/********************************************************************
 * Copyright by Autodesk, Inc
 *
 * The information contained herein is confidential, proprietary to
 * Autodesk, Inc., and considered a trade secret as defined in section
 * 499C of the penal code of the State of California. Use of
 * this information by anyone other than authorized employees of
 * Autodesk, Inc. is granted only under a written non-disclosure
 * agreement, expressly prescribing the scope and manner of such use.
 *
 * $Id$: SUBS_SyncOpportunityDataButtonController class for Sync Opportunity Data button on opportunity layout
 * $Created Date$: 19-Aug-2023
 * $Author$: Aparna Anisetti
 ***********************************************************************************************************************/

public without sharing class SUBS_SyncOpportunityDataButtonController {

    public static Database.BatchableContext batchContext = null;

    @AuraEnabled
    public static SyncDataWrapper fetchPendingTransactionsOnOpp(String recordId) {
        List<Transaction__c> txnList = new List<Transaction__c>();
        SUBS_SyncOpportunityDataButtonController.SyncDataWrapper wrap = new SUBS_SyncOpportunityDataButtonController.SyncDataWrapper();
        Opportunity opp = [SELECT Id, Pending_Update__c, Lock_Opportunity__c FROM Opportunity WHERE Id = :recordId LIMIT 1];
        //Added In Progress staus value as part of CRMEAGLE-1820 - Aparna
        txnList = [SELECT Id, Name, Status__c, Opportunity__c, Change_Type__c, Log__c, Transaction_Order_Number__c FROM Transaction__c WHERE Opportunity__c = :recordId AND Status__c IN ('Pending', 'Failed','In Progress') ORDER BY createdDate ASC]; //CRMEAGLE-879 Added Transaction_Order_Number__c
        wrap.txnLst = txnList;
        wrap.isOppLocked = opp.Lock_Opportunity__c;
        wrap.opportunityRec = opp;
        if (txnList.size() > 0) {
            wrap.hasPendingTxns = true;
        } else {
            wrap.hasPendingTxns = false;
        }
        return wrap;
    }

    @AuraEnabled
    public static void processPendingTransactions(List<Transaction__c> pendingTxnLst, Opportunity opp) {
        try {
            TransactionTriggerHelper.publishTxnEventOnTransactionRecInsert(pendingTxnLst);
        } catch (Exception e) {
            system.debug('exception' + e);
        }
    }

    @AuraEnabled
    public static String processTransaction(Transaction__c pendingTxn) {
        List<Transaction__c> txnList = new List<Transaction__c>();
        List<Transactions__e> txnEventLst = new List<Transactions__e>();
        txnList.add(pendingTxn);
        String status = '';
        Transaction__c finalTxn ;
        Boolean exceptionLogged = false;
        try {
            Transactions__e txnEvent = new Transactions__e();
            txnEvent.Change_Type__c = pendingTxn.Change_Type__c;
            txnEvent.Details__c = JSON.serialize(txnList);
            txnEventLst.add(txnEvent);

            if (txnEvent.Change_Type__c == 'Solution Provider Change') {
                TransactionEventTriggerHelper.processSolutionProviderChangesCLI(txnEventLst, 'Solution Provider Change');
            } else if (txnEvent.Change_Type__c == 'Quantity Change') {
                TransactionEventTriggerHelper.processQuantityChange(txnEventLst);
            } else if (txnEvent.Change_Type__c == 'Indirect Asset Split') {
                TransactionEventTriggerHelper.processAssetSeatChange(txnEventLst);
            } else if (txnEvent.Change_Type__c == 'Indirect Asset Move') {
                TransactionEventTriggerHelper.processAssetMoveChange(txnEventLst);
            } else if (txnEvent.Change_Type__c == 'Indirect Contract Merge') {
                TransactionEventTriggerHelper.processContractMergeChange(txnEventLst);
            } else if (txnEvent.Change_Type__c == 'Indirect CM Change') {
                TransactionEventTriggerHelper.processCMChange(txnEventLst);
            } else if (txnEvent.Change_Type__c == 'Order') {
                TransactionEventTriggerHelperExtension.processOrder(txnEventLst);
            } else if (txnEvent.Change_Type__c == 'Purchaser Change') {
                /*else if (txnEvent.Change_Type__c == 'Indirect Account Merge') {
                TransactionEventTriggerHelper.processAccountMerge(txnEventLst);
            }*/
                TransactionEventTriggerHelper.processSolutionProviderChangesCLI(txnEventLst, 'Purchaser Change');
            } else if (txnEvent.Change_Type__c == 'Contract Transfer' || txnEvent.Change_Type__c == 'Transfer Of License') {
                TransactionEventTriggerHelper.processContractTransferChange(txnEventLst, txnEvent.Change_Type__c);
            } else if (txnEvent.Change_Type__c == 'Payment Method Change') {
                TransactionEventTriggerHelper.processPaymentChange(txnEventLst);
            } else if (txnEvent.Change_Type__c == 'Account Merge') {
                TransactionEventTriggerHelperExtension.subsOpptyUpdatesForAccountMerge(txnEventLst);
            }

            finalTxn = [SELECT Id, Name, Status__c, Opportunity__c, Change_Type__c, Log__c FROM Transaction__c WHERE Id = :pendingTxn.Id];
            status = finalTxn.Status__c;
        } catch (Exception e) {
            System.debug('exception' + e);
            System.debug('exception getMessage' + e.getMessage());
            System.debug('exception getLineNumber' + e.getLineNumber());
            System.debug('exception getStackTraceString' + e.getStackTraceString());
            System.debug('exception getTypeName' + e.getTypeName());
            DROM_RenewalOpportunityUtility.logBatchException('Error Message : <br/>' + e.getMessage() + ' - Line Number : ' + e.getLineNumber() + '<br/>' + 'Stack Trace : <br/>' + e.getStackTraceString(), null , finalTxn.Id, 'SUBS_SyncOpportunityDataButtonController', 'processTransaction', 'SUBS_SyncOpportunityDataButtonController', 'Transaction', e.getTypeName(), null, batchContext);
            System.debug('exception' + e);
            DROM_RenewalOpportunityUtility.insertBatchExceptions();
            if (!exceptionLogged) {
                exceptionLogged = DROM_RenewalOpportunityUtility.exceptionLogged;
            }
            System.debug('exception' + e);
            status = 'Failed';
        }
        return status;
    }

    public class SyncDataWrapper {
        @AuraEnabled
        public Boolean hasPendingTxns;
        @AuraEnabled
        public List<Transaction__c> txnLst;
        @AuraEnabled
        public Boolean isOppLocked;
        @AuraEnabled
        public Opportunity opportunityRec;
    }
}
