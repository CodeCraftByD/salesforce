public class CalendlyActionTriggerHandler {
    public static Boolean createException = false;
    public static String RetrainingId = System.Label.RetrainingId;
    public CalendlyActionTriggerHandler(){
        createException = SM_Common.checkTrigger('ExceptionHandling');
    }
    
    public void handleAfterInsert(List<CalendlyAction__c> records) {
        List<CalendlyAction__c> recordsForCallout = new List<CalendlyAction__c>();
        Set<String> recordsForDelete = new Set<String>();
        
        for (CalendlyAction__c record : records) {
            if(record.EventTypeSlug__c == RetrainingId){
                if (record.Name == 'invitee.created' && String.isNotBlank(record.CustomResponse1__c)) {
                    recordsForCallout.add(record);
                }
                if (record.Name == 'invitee.canceled') {
                    recordsForDelete.add(record.InviteeUuid__c);
                }
            }
        }
        
        if(!recordsForCallout.isEmpty()){
            for (CalendlyAction__c record : recordsForCallout) {
                CalendlyActionCalloutQueueable calloutJob = new CalendlyActionCalloutQueueable();
                calloutJob.setCalendlyAction(record);
                
                try {
                    System.enqueueJob(calloutJob);
                    System.debug('Enqueued callout job for CalendlyAction: ' + record.Id);
                } catch (Exception e) {
                    if(createException){
                        SM_CaseDetailWrapper.CommonExceptionWrapper exceWrapObj = SM_Common.createWrapperLogObj('CalendlyActionTriggerHandler', 'handleAfterInsert', '', e);
                        SM_Common.insertErrorLog(exceWrapObj);
                    }
                }
            }
        }
        
        if(!recordsForDelete.isEmpty()){
            handleCanceledInvitations(recordsForDelete);
        }
    }
    
    private void handleCanceledInvitations(Set<String> canceledUuids) {
        try {
            List<Task> tasksToDelete = [
                SELECT Id,WhatId 
                FROM Task 
                WHERE InviteeUuid__c IN :canceledUuids
                WITH SECURITY_ENFORCED
            ];
            
            Set<Id> accountId = new Set<Id>();
            for(Task ts: tasksToDelete){
              accountId.add(ts.WhatId);  
            }
            
            List<Case> casesToClose = [
                SELECT Id, Status, Subject,Associated_Opportunity__r.Type,Associated_Opportunity__r.Products__c
                FROM Case 
                WHERE AccountId IN :accountId
                AND Status NOT IN ('Closed', 'Resolved')
                AND Subject LIKE 'Retraining%'
                WITH SECURITY_ENFORCED
            ];
            
            if (!tasksToDelete.isEmpty()) {
                delete tasksToDelete;
            }
            
            if (!casesToClose.isEmpty()) {
                for (Case c : casesToClose) {
                    c.Status = 'Closed';
                    c.Reason = 'Calendly Cancellation';
                    c.Subject = '[CANCELED] ' + c.Subject;
                    c.Resolution_Reasons__c = 'Training Rescheduled/ Cancelled (Customer)';
                }
                
                update casesToClose;
            }
            
        } catch (Exception e) {
            if(createException){
                SM_CaseDetailWrapper.CommonExceptionWrapper exceWrapObj = SM_Common.createWrapperLogObj('CalendlyActionTriggerHandler', 'handleCanceledInvitations', '', e);
                SM_Common.insertErrorLog(exceWrapObj);
            }
        }
    }
}
