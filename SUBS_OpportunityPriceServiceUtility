public with sharing class SUBS_OpportunityPriceServiceUtility {
    public static String renewalType = System.Label.Renewal_Status_Types;
    public static List<String> renewalTypes = renewalType.split(',');

    @AuraEnabled
    public static Integer validateValueBasedOlis(Id oppId) {
        Boolean firstLoop = true;
    Date currentDateOfUser;
        List<OpportunityLineItem> oppLineItems = Database.query('SELECT ' + SUBS_OpportunityPriceService.getOLIFieldsToQuery() + ' FROM OpportunityLineItem WHERE (Renewal_Status__c IN :renewalTypes OR Renewal_Status__c = null) AND OpportunityId =: oppId');
        for (OpportunityLineItem oli : oppLineItems) {
            if (firstLoop) {
                String tz = StateCountryTimeZoneUtility.getTimeZoneDetails(oli.Opportunity.AccountId);
                currentDateOfUser = Add_Product_Utility.getDateFromUTC(System.now(), tz);
                firstLoop = false;
            }
            if(oli.Opportunity.Discount_Approval_Status__c == 'Approved'){//CRMEAGLE-3150
                return 1;
            }
            else if ((oli.Line_Item_Action__c !='Trade-in'  && oli.Pricing_Method__c == 'VAL' && (!(oli.Annual_Declared_Value__c!=null))) || ((oli.Line_Item_Action__c == 'Mid-term switch') && (oli.New_Term_Start_Date__c == null || oli.New_Term_Start_Date__c < currentDateOfUser || oli.New_Term_Start_Date__c > currentDateOfUser + 30))) {
                return 2;
            }
        }
        return 0;
    }

    public static PriceServiceModels.GetContextualPriceRequest  prepareGCPReqbody(OpportunityLineItem oli ,String orderContext, String term, String languageCode, Date startDate,Integer i,PriceServiceModels.GetContextualPriceRequest gcpRequest,Map<String, Integer> refSubsIdToSwitchToItemId ){
        PriceServiceModels.GetContextualPriceRequest gcpReq;
        gcpReq = prepareGCPReq(oli, orderContext,term,languageCode,startDate,i,gcpRequest,refSubsIdToSwitchToItemId);
        return gcpReq;
    }
    public static PriceServiceModels.GetContextualPriceRequest prepareGCPReq(OpportunityLineItem oli, String orderContext, String term, String languageCode, Date startDate, Integer i, PriceServiceModels.GetContextualPriceRequest gcpRequest, Map<String, Integer> refSubsIdToSwitchToItemId) {
        String pricingMethod = oli.Pricing_Method__c != null ? oli.Pricing_Method__c : 'QTY';
        PriceServiceModels.RequestOffer requestOffer = new PriceServiceModels.RequestOffer(handleNull(oli.Intended_Usage__c), handleNull(oli.Access_Model__c), handleNull(term), handleNull(oli.Connectivity__c), handleNull(oli.Service_Plan__c), handleNull(oli.Billing_Frequency__c), handleNull(pricingMethod));
        gcpRequest.lineItems.add(
            new PriceServiceModels.LineItem(
                i,
                oli.Product2.OfferingId__c,
                Integer.valueOf(oli.Quantity),
                languageCode,
                requestOffer,
                handleNull(oli.Line_Item_Action__c),
                String.valueOf(startDate),
                String.valueOf(oli.New_Term_End_Date__c),
                handleNull(oli.Promotion_Name__c),
                orderContext,
                Integer.valueOf(oli.Additional_Discount_Per__c != null ? oli.Additional_Discount_Per__c : 0),
                Integer.valueOf(oli.Additional_Discount_Amount__c != null ? oli.Additional_Discount_Amount__c : 0),
                oli.Switch_Price_Condition__c,
                oli.Annual_Declared_Value__c != null &&
                oli.Annual_Declared_Value__c > 0
                ? (Long) oli.Annual_Declared_Value__c
                : null,
                oli.Line_Item_Action__c == QuoteServiceUtility.LINE_ITEM_ACTION_TRADEIN
                        ? new PriceServiceModels.TradeInOrderDetails(oli.Net_Price__c, oli.Cost_Per_Day__c, refSubsIdToSwitchToItemId.get(oli.Contract_Line_Item__r.Pelican_Subscription_Id__c))
                        : null
            )
        );
        return gcpRequest;
    }

    public static Map<String, Integer> getSwitchToItemId(List<OpportunityLineItem> olis) {
        Map<String, Integer> refSubsIdToSwitchToItemId = new Map<String, Integer>();
        Integer i = 1;
        for (OpportunityLineItem oli : olis) {
            if (oli.Reference_Subscription_Ids__c != null && oli.Line_Item_Action__c == QuoteServiceUtility.LINE_ITEM_ACTION_MIDTERMSWITCH) {
                List<String> refSubsIds = oli.Reference_Subscription_Ids__c.split(',');
                for (String subsId : refSubsIds) {
                    refSubsIdToSwitchToItemId.put(subsId.trim(), i);
                }
            }
            i++;
        }
        System.debug('refSubsIdToSwitchToItemId:: ' + refSubsIdToSwitchToItemId);
        return refSubsIdToSwitchToItemId;
    }

    public static String handleNull(String param) {
        if (param == null) {
            param = '';
        }
        return param;
    }
}
