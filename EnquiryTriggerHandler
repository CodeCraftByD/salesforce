public class EnquiryTriggerHandler {
    private static final String CUSTOM_NOTIFICATION_NAME = 'Custom_Notification_for_Task';

    public static void handleAfterInsert(List<Enquiry__c> newList) {
        try {
            List<Task> tasksToInsert = new List<Task>();
            Set<String> memberNames = new Set<String>();
            Map<Id, Enquiry__c> enquiryMap = new Map<Id, Enquiry__c>();

            for (Enquiry__c enquiry : newList) {
                if (enquiry.Enquiry_Stage__c == 'New' && String.isNotBlank(enquiry.CRE_User_Members__c)) {
                    memberNames.add(enquiry.CRE_User_Members__c.trim());
                    enquiryMap.put(enquiry.Id, enquiry);
                }
            }

            if (enquiryMap.isEmpty()) return;

            // Fetch matching Users (assuming picklist holds FirstName)
            Map<String, User> nameToUserMap = new Map<String, User>();
            for (User u : [SELECT Id, FirstName FROM User WHERE FirstName IN :memberNames]) {
                nameToUserMap.put(u.FirstName, u);
            }

            // Get Custom Notification Type ID
            Id notifTypeId = [
                SELECT Id FROM CustomNotificationType 
                WHERE DeveloperName = :CUSTOM_NOTIFICATION_NAME 
                LIMIT 1
            ].Id;

            for (Enquiry__c enquiry : enquiryMap.values()) {
                String userKey = enquiry.CRE_User_Members__c.trim();
                if (!nameToUserMap.containsKey(userKey)) continue;

                User recipient = nameToUserMap.get(userKey);

                // Create Task
                Task task = new Task(
                    Subject = 'Enquiry Task',
                    WhatId = enquiry.Id,
                    OwnerId = recipient.Id
                );
                tasksToInsert.add(task);

                // Create Bell Notification
               // createNotification(notifTypeId,UserInfo.getName(),enquiry.Name,enquiry.Id,UserInfo.getUserId(),new Set<String>{recipient.Id});
            }

            if (!tasksToInsert.isEmpty()) {
                insert tasksToInsert;
            }

        } catch (Exception e) {
            System.debug(LoggingLevel.ERROR, 'Error in EnquiryTriggerHandler (Insert): ' + e.getMessage());
        }
    }

 private static void createNotification(
        Id notificationTypeId,
        String ownerName,
        String enquiryName,
        Id enquiryId,
        Id ownerId,
        Set<String> recipientIds
    ) {
        Messaging.CustomNotification notification = new Messaging.CustomNotification();
        notification.setTitle('New Enquiry Assigned');
        notification.setBody(ownerName + ' assigned you the enquiry: ' + enquiryName);
        notification.setNotificationTypeId(notificationTypeId);
        notification.setTargetId(enquiryId);
        notification.setSenderId(ownerId);
        notification.send(recipientIds); 
    }   
    
    


   public static void updateEnquirytoQualified(List<Enquiry__c> newList, Map<Id, Enquiry__c> oldMap) {
    Set<String> otherQualifiedResponses = new Set<String>{
        'Want Test Ride', 'Want Booking', 'Want Quotation'
    };
    System.debug('newList: ' + newList);
       System.debug('oldMap: ' + oldMap);
    for (Enquiry__c enq : newList) {
         if (oldMap != null) { 
            Enquiry__c oldEnq = oldMap.get(enq.Id);
            
            boolean responseChanged = 
                enq.Customer_Response__c != oldEnq.Customer_Response__c ||
                enq.Customer_Response2__c != oldEnq.Customer_Response2__c ||
                enq.Customer_Response3__c != oldEnq.Customer_Response3__c;
                
            if (!responseChanged) {
                continue;
            }
        }
        
        Boolean isPlanToBuy = 
            'Plan to Buy' == enq.Customer_Response__c ||
            'Plan to Buy' == enq.Customer_Response2__c ||
            'Plan to Buy' == enq.Customer_Response3__c;

        Boolean isOtherQualified = 
            otherQualifiedResponses.contains(enq.Customer_Response__c) ||
            otherQualifiedResponses.contains(enq.Customer_Response2__c) ||
            otherQualifiedResponses.contains(enq.Customer_Response3__c);
        
        Boolean isNotInterested = 
            'Not Interested' == enq.Customer_Response__c ||
            'Not Interested' == enq.Customer_Response2__c ||
            'Not Interested' == enq.Customer_Response3__c;
          System.debug('Enquiry : ' + enq);
        if (isNotInterested) {
            enq.Enquiry_Stage__c = 'Unqualified';
         System.debug('Enquiry marked as Unqualified: ' + enq.Id + 
                         ' | All responses = Not Interested');
        } else if (isPlanToBuy) {
            enq.Enquiry_Stage__c = 'Qualified';
            enq.Is_Converted__c = true;
        } else if (isOtherQualified) {
            enq.Enquiry_Stage__c = 'Qualified';
            enq.Is_Converted__c = true;
        }
        
        System.debug('Enquiry 2: ' + enq);
        System.debug('Enquiry.Is_Converted__c : ' + enq.Is_Converted__c);
    }
}


    
  /*  public static void insertAccount(List<Enquiry__c> newList, Map<Id,Enquiry__c> oldMap) {
        Set<Id> enquiryIds = new Set<Id>();
        for(Enquiry__c en : newList){
            enquiryIds.add(en.Id);
        }
        
        List<Enquiry__c> newList1 = [
            SELECT Id, Customer_Name__c, Contact_Number__c, Enquiry_Brand__c,
                   Customer_Response__c,Customer_Response2__c,Customer_Response3__c, OwnerId, Owner.Name
            FROM Enquiry__c
            WHERE Id IN :enquiryIds
        ];
        List<Account> accountsToInsert = new List<Account>();
        List<Contact> contactsToInsert = new List<Contact>();
        List<Lead__c> leadsToInsert = new List<Lead__c>();
        for (Enquiry__c enq : newList1) {
            boolean isInsert = (oldMap == null);
        boolean valueChanged = isInsert ? true : 
                              (oldMap.get(enq.Id).Customer_Response__c != enq.Customer_Response__c ||
             oldMap.get(enq.Id).Customer_Response2__c != enq.Customer_Response2__c ||
             oldMap.get(enq.Id).Customer_Response3__c != enq.Customer_Response3__c);
        //    if (enq.Customer_Response__c == 'Plan to Buy' && valueChanged) {
             boolean isPlannedToBuy = 
            enq.Customer_Response__c == 'Plan to Buy' ||
            enq.Customer_Response2__c == 'Plan to Buy' ||
            enq.Customer_Response3__c == 'Plan to Buy';

        if (isPlannedToBuy && valueChanged) {
                //Inserting Account
                Account acc = new Account();
                acc.Name = enq.Customer_Name__c;
                acc.Phone = enq.Contact_Number__c;
                accountsToInsert.add(acc);
                
                //Inserting Contact
                Contact con = new Contact();
                con.LastName = enq.Customer_Name__c;
                contactsToInsert.add(con);

             //Inserting Lead
              Lead__c ld = new Lead__c();
                ld.Contact_Number__c = enq.Contact_Number__c;
                ld.Lead_Brand__c = enq.Enquiry_Brand__c;
                ld.Lead_Employee_Responsible__c = enq.Owner.Name;
                ld.Lead_Status__c = 'Plan to Buy';
                ld.Show_Toast__c = true;
                leadsToInsert.add(ld); 
                    
            } 
        }
         if (!leadsToInsert.isEmpty()) {
            INSERT leadsToInsert;
             
             if(leadsToInsert.size() > 0) {
            setRecentLeadId(leadsToInsert[0].Id);
        }
         } 
    }  */


       

          

    
    // Helper method to store the recent lead ID in a custom setting
private static void setRecentLeadId(Id leadId) {
    // Create or update a custom setting record to store the lead ID
    Recent_Lead_Creation__c recentLead = Recent_Lead_Creation__c.getInstance(UserInfo.getUserId());
    System.debug('recentLead : '+recentLead);
    if(recentLead != null && recentLead.Id != null) {
        recentLead.Lead_Id__c = leadId;
        update recentLead;
        System.debug('recentLead 2: '+recentLead);
    } else {
        // If the record doesn't exist, insert a new one
        Recent_Lead_Creation__c newRecord = new Recent_Lead_Creation__c(
            SetupOwnerId = UserInfo.getUserId(),
            Lead_Id__c = leadId
        );
        insert newRecord;
        System.debug('newRecord: '+newRecord);
    }
    
}
    
    
    public static void insertAccount(List<Enquiry__c> newList, Map<Id, Enquiry__c> oldMap) {
        List<Enquiry__c> enquiriesWithDetails = getEnquiryDetails(newList);
        
        Map<String, Id> accountRecordTypeMap = getAccountRecordTypes();
        
        Set<String> qualifiedResponses = new Set<String>{
            'Plan to Buy', 'Want Quotation', 'Want Booking', 'Want Test Ride'
        };
        
        List<Account> accountsToInsert = new List<Account>();
        Map<Integer, Contact> contactsToInsertMap = new Map<Integer, Contact>();
        Map<Integer, Lead__c> leadsToInsertMap = new Map<Integer, Lead__c>();
        
        for (Integer i = 0; i < enquiriesWithDetails.size(); i++) {
            Enquiry__c enq = enquiriesWithDetails[i];
            
            if (isQualifyingChange(enq, oldMap, qualifiedResponses)) {
                
                Account newAccount;
                if (String.isNotBlank(enq.Company_Name__c)) {
                    newAccount = createBusinessAccount(enq, accountRecordTypeMap.get('Bussiness Account'));
                    contactsToInsertMap.put(i, createContact(enq));
                } else {
                    newAccount = createPersonAccount(enq, accountRecordTypeMap.get('Person Account'));
                }
                
                accountsToInsert.add(newAccount);
                
                Lead__c newLead = createLead(enq);
                leadsToInsertMap.put(i, newLead);
            }
        }
        
        if (!accountsToInsert.isEmpty()) {
            try {
                insert accountsToInsert;
                
                List<Contact> contactsToInsert = new List<Contact>();
                List<Lead__c> leadToInsert = new List<Lead__c>();
                for (Integer i = 0; i < accountsToInsert.size(); i++) {
                    if (contactsToInsertMap.containsKey(i)) {
                        Contact con = contactsToInsertMap.get(i);
                        con.AccountId = accountsToInsert[i].Id;
                        contactsToInsert.add(con);
                    }
                    
                    if (leadsToInsertMap.containsKey(i)) {
                        Lead__c lead = leadsToInsertMap.get(i);
                        lead.Account_Name__c = accountsToInsert[i].Id;
                        leadToInsert.add(lead);
                    }
                }
                
                if (!contactsToInsert.isEmpty()) {
                    insert contactsToInsert;
                }
                
                if (!leadToInsert.isEmpty()) {
                    insert leadToInsert;
                    
                    /*if (leadToInsert.size() > 0) {
                        List<ENquiryCheckIn__e> events = new List<ENquiryCheckIn__e>();// Replace ENquiryCheckIn__e with platform event name
                        for(Lead__c ld : leadToInsert){
                                events.add(new ENquiryCheckIn__e(LeadId__c = ld.Id)); // replace LeadId__c with platform event created field name

                        } 
                        if(!events.isEmpty()){
                            EventBus.publish(events);
                        }*/
                        setRecentLeadId(leadToInsert[0].Id);
                    }
            } catch (Exception e) {
                System.debug('exception: '+e);
            }
        }
    }
    
    
    private static List<Enquiry__c> getEnquiryDetails(List<Enquiry__c> enquiries) {
        Set<Id> enquiryIds = new Set<Id>();
        for (Enquiry__c enq : enquiries) {
            enquiryIds.add(enq.Id);
        }
        
        return [
            SELECT Id, Customer_Name__c, Contact_Number__c, Enquiry_Brand__c,Is_Converted__c, Enquiry_Stage__c,
                   Company_Name__c, Alternate_Contact_No__c,
                   Customer_Response__c, Customer_Response2__c, Customer_Response3__c, 
                   OwnerId, Owner.Name
            FROM Enquiry__c
            WHERE Id IN :enquiryIds
        ];
    }
    
    
    private static Map<String, Id> getAccountRecordTypes() {
        Map<String, Id> accountRecordTypeMap = new Map<String, Id>();
        for (RecordType rt : [SELECT Id, Name FROM RecordType 
                              WHERE SObjectType = 'Account' 
                              AND (Name = 'Bussiness Account' OR Name = 'Person Account')]) {
            accountRecordTypeMap.put(rt.Name, rt.Id);
        }
        return accountRecordTypeMap;
    }
    
    
    private static Boolean isQualifyingChange(Enquiry__c enq, Map<Id, Enquiry__c> oldMap, Set<String> qualifiedResponses) {
        boolean isInsert = (oldMap == null);
        
        boolean valueChanged = isInsert ? true : 
            (oldMap.get(enq.Id).Customer_Response__c != enq.Customer_Response__c ||
             oldMap.get(enq.Id).Customer_Response2__c != enq.Customer_Response2__c ||
             oldMap.get(enq.Id).Customer_Response3__c != enq.Customer_Response3__c);
        
        boolean notConverted = isInsert ? true : 
            (oldMap.get(enq.Id).Is_Converted__c != enq.Is_Converted__c &&
             oldMap.get(enq.Id).Is_Converted__c == false );
        
        Boolean isQualified = 
            qualifiedResponses.contains(enq.Customer_Response__c) ||
            qualifiedResponses.contains(enq.Customer_Response2__c) ||
            qualifiedResponses.contains(enq.Customer_Response3__c);
        
        
        return isQualified && valueChanged  && notConverted;
    }
    
    
    private static Account createBusinessAccount(Enquiry__c enq, Id recordTypeId) {
        Account acc = new Account();
        acc.Name = enq.Company_Name__c;
        acc.Phone = enq.Contact_Number__c;
        acc.RecordTypeId = recordTypeId;
        acc.OwnerId = enq.OwnerId; 
        return acc;
    }
    
    
    private static Account createPersonAccount(Enquiry__c enq, Id recordTypeId) {
        Account acc = new Account();
        acc.LastName = enq.Customer_Name__c;
        acc.PersonMobilePhone = enq.Contact_Number__c;
        acc.PersonOtherPhone = enq.Alternate_Contact_No__c;
        acc.RecordTypeId = recordTypeId;
        acc.OwnerId = enq.OwnerId;
        return acc;
    }
    
    
    private static Contact createContact(Enquiry__c enq) {
        Contact con = new Contact();
        con.LastName = enq.Customer_Name__c;
        con.Phone = enq.Contact_Number__c;
        con.OtherPhone = enq.Alternate_Contact_No__c;
        con.OwnerId = enq.OwnerId;
        return con;
    }
    
    
    private static Lead__c createLead(Enquiry__c enq) {
        Lead__c ld = new Lead__c();
        ld.Contact_Number__c = enq.Contact_Number__c;
        ld.Lead_Brand__c = enq.Enquiry_Brand__c;
        ld.Lead_Employee_Responsible__c = enq.Owner.Name;
        ld.Lead_Status__c = 'Plan to Buy'; 
        ld.Show_Toast__c = true;
        return ld;
    }
      
}
