@isTest
public with sharing class SUBS_SyncOppDataButtonControllerTest {
    @TestSetup
    static void makeData() {
        ContactTriggerServices.SKIP_CONTACT_TRIGGER = true;
        MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
        List<Account> accountList = new List<Account>();
        List<Contact> contactList = new List<Contact>();
        List<Product2> products = new List<Product2>();
        List<Asset__c> assets = new List<Asset__c>();
        List<ServiceContract> contracts = new List<ServiceContract>();
        List<ContractLineItem> contractLineItems = new List<ContractLineItem>();
        List<Entitlement> entitlements = new List<Entitlement>();
        List<Opportunity> opportunityList = new List<Opportunity>();

        String customerAccount1CSN = 'custAc1CSN';
        String resellerAccount1CSN = 'resAc1CSN';
        String soldToAccount1CSN = 'soldAc1CSN';

        Id adminUserId = UserInfo.getUserId();

        // ODM Enabed country
        /*Country__c country1 = new Country__c();
        country1.Name = 'United States';
        country1.ODM_Flag__c = true;
        insert country1;*/

        //Create Test Accounts
        Account customerAccount1 = new Account();
        customerAccount1.Account_CSN__c = customerAccount1CSN;
        customerAccount1.name = 'Test AZ23';
        customerAccount1.Country_Picklist__c = 'United States';
        customerAccount1.State_Province__c = 'PA';
        customerAccount1.Account_EC_Status__c = 'ACCEPT';
        Account resellerAccount1 = TestUtilityClass.createTestAccountRec('NewAccount');
        resellerAccount1.Account_CSN__c = resellerAccount1CSN;
        resellerAccount1.Type = 'Reseller';
        resellerAccount1.Partner_Type__c = 'Reseller';
        resellerAccount1.Partner_Hierarchy__c = 'Domestic Ultimate';
        resellerAccount1.ispartner__c = true;
        resellerAccount1.Customer_Account_Group__c = 'Ship-To Party';
        resellerAccount1.CPM_Admin_User__c = adminUserId;
        resellerAccount1.Country_Picklist__c = 'United States';
        Account soldToAccount1 = TestUtilityClass.createTestAccountRec('NewAccount');
        soldToAccount1.Account_CSN__c = soldToAccount1CSN;
        soldToAccount1.Type = 'Distributor';
        soldToAccount1.Partner_Type__c = 'Distributor';
        soldToAccount1.Partner_Hierarchy__c = 'Domestic Ultimate';
        soldToAccount1.ispartner__c = true;
        soldToAccount1.Customer_Account_Group__c = 'Sold-To Party';
        soldToAccount1.CPM_Admin_User__c = adminUserId;
        soldToAccount1.Country_Picklist__c = 'United States';
        accountList.add(customerAccount1);
        accountList.add(resellerAccount1);
        accountList.add(soldToAccount1);
        AccountTriggerOperations.SKIP_ACCOUNT_TRIGGER = true;
        insert accountList;

        System.debug('accountList : ' + accountList);

        //Creating Test Contacts

        Contact customerAccount1Contact1 = new Contact();
        customerAccount1Contact1.AccountId = customerAccount1.Id;
        customerAccount1Contact1.LastName = 'testContactUnique';
        customerAccount1Contact1.firstName = 'testFirstNameUnique';
        customerAccount1Contact1.Unique_identifier__c = 'testUnique123@gmail.com';
        customerAccount1Contact1.Email = 'testUnique123@gmail.com';

        Contact resellerAccount1Contact1 = TestUtilityClass.createTestContact(resellerAccount1.Id, 'NewContact');
        resellerAccount1Contact1.FirstName = 'Bat';
        resellerAccount1Contact1.Contact_CSN__c = '333333333';
        resellerAccount1Contact1.LastName = 'Man';
        resellerAccount1Contact1.Oxygen_ID__c = 'CcCcCcCcCc';

        Contact soldToAccount1Contact1 = TestUtilityClass.createTestContact(soldToAccount1.Id, 'NewContact');
        soldToAccount1Contact1.FirstName = 'Super';
        soldToAccount1Contact1.LastName = 'Man';
        soldToAccount1Contact1.Contact_CSN__c = '';
        soldToAccount1Contact1.ADSK_Guid__c = 'TestGUID1212';
        soldToAccount1Contact1.Oxygen_ID__c = 'DdDdDdDdDd';

        contactList.add(customerAccount1Contact1);
        contactList.add(resellerAccount1Contact1);
        contactList.add(soldToAccount1Contact1);
        insert contactList;

        String offeringRecordTypeId = Schema.SobjectType.Product2.getRecordTypeInfosByName().get('Offering').getRecordTypeId();
        Product2 premSubNewSKU = new Product2(Name = '12800-000110-S001 Premium SUB Commercial Product Subscription New', part_number__c = '12800-000110-S001', product_line_code__c = 'PREMSUB', ProductCode = 'PREMSUB', Usage_Type__c = 'COM', Program_Type__c = 'None', Subscription_Level__c = 'PREMS', End_User_Type__c = 'NONE', NFR_Use__c = 'None', Material_Group__c = 'SUBSCRPTN', Service_Type__c = 'AA', Service_Sales_Type__c = 'N', Special_Sales_Program_Type__c = '', RecordTypeID = offeringRecordTypeId);

        products.add(premSubNewSKU);
        insert products;

        Asset__c customerAccount1SubAsset1 = new Asset__c(Asset_Number__c = '1111111111111', Status__c = 'Registered', name = 'customerAccount1SubAsset1', Product_Line_Code__c = 'PREMSUB', Account__c = soldToAccount1.Id, Contact__c = customerAccount1Contact1.Id, Reseller_Account__c = resellerAccount1.Id, End_Customer_Account__c = customerAccount1.Id, Alias_Name__c = 'Autodesk Premium SUB 2013 English', Product_Line_Name__c = 'Autodesk Premium SUB', Version__c = '2015', Language_Code__c = 'ENU', Quantity__c = 1, Part_Number__c = '12800-000110-S001', SerialNumber__c = '111-111111111');
        assets.add(customerAccount1SubAsset1);
        insert assets;

        Id standardPBId = Test.getStandardPricebookId();

        List<PricebookEntry> standardpbes = new List<PricebookEntry>();

        PricebookEntry standardPriceEntry1 = new PricebookEntry(Pricebook2Id = standardPBId, Product2Id = premSubNewSKU.Id, UnitPrice = 0.0, IsActive = true, CurrencyIsoCode = 'USD');
        standardpbes.add(standardPriceEntry1);

        insert standardpbes;
        System.debug('standardpbes : ' + standardpbes);

        //Service Contracts and Contract Line Item requires PricebookEntryId.
        Pricebook2 customPB = new Pricebook2(name = 'Partner Price Book', Description = 'General', isactive = true);
        Pricebook2 autodeskPB = new Pricebook2(name = 'ADSK Products List', Description = 'General', isactive = true);
        Pricebook2 standardPB = new Pricebook2(name = 'Standard Price Book', Description = 'General', isactive = true);
        insert customPB;
        insert autodeskPB;
        insert standardPB;
        System.debug('customPB : ' + customPB);

        List<PricebookEntry> pbes = new List<PricebookEntry>();
        Pricebookentry pbe1 = new Pricebookentry();
        pbe1.pricebook2Id = autodeskPB.Id;
        pbe1.Product2Id = premSubNewSKU.Id;
        pbe1.UnitPrice = 0.0;
        pbe1.Isactive = true;
        pbe1.CurrencyIsoCode = 'USD';
        pbes.add(pbe1);

        Pricebookentry pbe2 = new Pricebookentry();
        pbe2.pricebook2Id = customPB.Id;
        pbe2.Product2Id = premSubNewSKU.Id;
        pbe2.UnitPrice = 0.0;
        pbe2.Isactive = true;
        pbe2.CurrencyIsoCode = 'USD';
        pbes.add(pbe2);

        Pricebookentry pbe3 = new Pricebookentry();
        pbe3.pricebook2Id = standardPB.Id;
        pbe3.Product2Id = premSubNewSKU.Id;
        pbe3.UnitPrice = 0.0;
        pbe3.Isactive = true;
        pbe3.CurrencyIsoCode = 'USD';
        pbes.add(pbe3);

        insert pbes;
        System.debug('pbes : ' + pbes);

        String indirectSCRecordTypeId = Schema.SobjectType.ServiceContract.getRecordTypeInfosByName().get('Indirect').getRecordTypeId();
        //String odmsCRecordTypeId = Schema.SobjectType.ServiceContract.getRecordTypeInfosByName().get('ODM').getRecordTypeId();

        ServiceContract customerAccount1ServiceContract1 = new ServiceContract(Name = 'Test Contract1', Agreement_Number__c = '1-1111111111', PriceBook2Id = autodeskPB.Id, RecordTypeID = indirectSCRecordTypeId, AccountId = customerAccount1.Id, ContactId = customerAccount1Contact1.Id, StartDate = system.today() - 334, EndDate = system.today() + 30 + 730, Agreement_Type__c = 'Subscription', Billing_Behavior_Code__c = 'A100', Contract_Term_Code__c = 'A06', Term = 36, CurrencyIsoCode = 'USD', Contract_Term_UOM_Code__c = 'Year');

        contracts.add(customerAccount1ServiceContract1);
        //contracts.add(customerAccount1ServiceContract4);
        insert contracts;

        //Create Standard Asset inorder to avoid Entitlement UniqueId violation
        Asset standardAsset = new Asset(name = 'teststandardAsset', AccountId = customerAccount1.Id, Service_Contract_Row_Id__c = 'SerContId-001', Product2Id = premSubNewSKU.Id);
        insert standardAsset;

        Entitlement customerAccount1ServiceContract1Entitlement1 = new Entitlement(Name = CaseUtility.ENTITLEMENT_LEVEL_PREMIUM, Service_Level__c = CaseUtility.ENTITLEMENT_LEVEL_PREMIUM, AccountId = customerAccount1.Id, AssetId = standardAsset.Id, StartDate = System.today() - 334, EndDate = System.today() + 30 + 730);

        customerAccount1ServiceContract1Entitlement1.ServiceContractId = customerAccount1ServiceContract1.id;
        //customerAccount1ServiceContract4Entitlement1.ServiceContractId = customerAccount1ServiceContract4.id;

        Entitlements.add(customerAccount1ServiceContract1Entitlement1);
        //Entitlements.add(customerAccount1ServiceContract4Entitlement1);
        insert Entitlements;

        String oppRecordTypeId = Schema.SobjectType.Opportunity.getRecordTypeInfosByName().get('Subscription Opportunity').getRecordTypeId();
        Opportunity opp1 = new Opportunity();
        opp1.Name = 'PremiumSubscriptionOppty1';
        opp1.CloseDate = System.Today() + 30 + 730;
        opp1.AccountId = customerAccount1.Id;
        opp1.StageName = 'Stage 1';
        opp1.RecordTypeId = oppRecordTypeId;
        opp1.CurrencyIsoCode = 'USD';
        opp1.Opportunity_Classification__c = 'Autodesk';
        opp1.Type = 'New';

        opportunityList.add(opp1);
        insert opportunityList;

        String defaultCLIRecordTypeId = Schema.SobjectType.ContractLineItem.getRecordTypeInfosByName().get('Default').getRecordTypeId();
        ContractLineItem customerAccount1ServiceContract1cli1 = new ContractLineItem(
            ServiceContractId = customerAccount1ServiceContract1.Id,
            Asset__c = customerAccount1SubAsset1.Id,
            PricebookEntryId = pbes[0].Id,
            Reseller_Account__c = resellerAccount1.Id,
            OfferingId__c = premSubNewSKU.Id,
            Purchaser__c = customerAccount1Contact1.Id,
            Opportunity__c = opp1.Id,
            Pelican_Subscription_Id__c = '00563-09277187',
            RecordTypeId = defaultCLIRecordTypeId,
            Entitlement__c = customerAccount1ServiceContract1Entitlement1.Id,
            Quantity = 7,
            QuantityToReduce__c = 3,
            UnitPrice = 0.0,
            Primary_Admin__c = customerAccount1Contact1.Id,
            StartDate = system.today().addMonths(-8),
            EndDate = system.today().addMonths(28).addDays(-1),
            Actual_End_Date__c = system.today().addMonths(28).addDays(29)
        );

        ContractLineItems.add(customerAccount1ServiceContract1cli1);

        insert ContractLineItems;

        Product2 product2Obj = new Product2(Name = 'Premium Subscription', ProductCode = 'PC-0232', isActive = true);
        insert product2Obj;

        Pricebook2 pricebook2Obj = new Pricebook2(Id = Test.getStandardPricebookId(), IsActive = true);
        update pricebook2Obj;
        PricebookEntry pricebookEntryObj = new PricebookEntry(UnitPrice = 1000, Pricebook2Id = pricebook2Obj.Id, IsActive = true, Product2Id = product2Obj.Id);
        insert pricebookEntryObj;
        OpportunityLineItem opportunityLineItemObj = new OpportunityLineItem(Contract_Line_Item__c = customerAccount1ServiceContract1cli1.Id, OpportunityId = opp1.Id, PricebookEntryId = pricebookEntryObj.Id, Term__c = 'Quarterly', TotalPrice = 100000, End_Date__c = Date.TODAY() + 30, Renewal_Status__c = 'Open', Product_Type__c = System.Label.PJ51_Maintenance_Plan, Part_Number__c = '001D1-AB51K1-10121', Quantity = 9, ACV_at_Risk__c = 12000, Collection_Products_Value_on_OLI__c = 20000);
        insert opportunityLineItemObj;
        Set<Id> cliIds = new Set<Id>();
        cliIds.add(customerAccount1ServiceContract1cli1.Id);
        Map<Id, String> cliOldMapValues = new Map<Id, String>();
        String str = 'ContractLineItemId';
        List<Transaction__c> txnList = new List<Transaction__c>();
        Transaction__c txn1 = new Transaction__c();
        txn1.Opportunity__c = opp1.Id;
        txn1.Transaction_Type__c = 'Opportunity Update';
        txn1.Change_Type__c = 'Indirect Contract Merge';
        txn1.Status__c = 'Pending';
        txn1.Log__c = 'Old Values -' + JSON.serialize(cliOldMapValues) + ';';
        txn1.Log__c = txn1.Log__c + '\r\n' + 'New Values -' + JSON.serialize(cliIds);
        txnList.add(txn1);

        Transaction__c txn2 = new Transaction__c();
        txn2.Opportunity__c = opp1.Id;
        txn2.Transaction_Type__c = 'Opportunity Update';
        txn2.Change_Type__c = 'Solution Provider Change';
        txn2.Status__c = 'Pending';
        txn2.Log__c = 'Old Values -' + JSON.serialize(cliOldMapValues) + ';';
        txn2.Log__c = txn2.Log__c + '\r\n' + 'New Values -' + JSON.serialize(cliIds);
        txnList.add(txn2);

        Transaction__c txn3 = new Transaction__c();
        txn3.Opportunity__c = opp1.Id;
        txn3.Transaction_Type__c = 'Opportunity Update';
        txn3.Change_Type__c = 'Indirect Asset Split';
        txn3.Status__c = 'Pending';
        txn3.Log__c = 'Old Values -' + JSON.serialize(cliOldMapValues) + ';';
        txn3.Log__c = txn3.Log__c + '\r\n' + 'New Values -' + JSON.serialize(cliIds);
        txnList.add(txn3);

        Transaction__c txn4 = new Transaction__c();
        txn4.Opportunity__c = opp1.Id;
        txn4.Transaction_Type__c = 'Opportunity Update';
        txn4.Change_Type__c = 'Indirect Asset Move';
        txn4.Status__c = 'Pending';
        txn4.Log__c = 'Old Values -' + JSON.serialize(cliOldMapValues) + ';';
        txn4.Log__c = txn4.Log__c + '\r\n' + 'New Values -' + JSON.serialize(cliIds);
        txnList.add(txn4);

        Transaction__c txn5 = new Transaction__c();
        txn5.Opportunity__c = opp1.Id;
        txn5.Transaction_Type__c = 'Opportunity Update';
        txn5.Change_Type__c = 'Indirect CM Change';
        txn5.Status__c = 'Pending';
        txn5.Log__c = 'Old Values -' + JSON.serialize(cliOldMapValues) + ';';
        txn5.Log__c = txn5.Log__c + '\r\n' + 'New Values -' + JSON.serialize(cliIds);
        txnList.add(txn5);

        //Transaction__c txn6 = new Transaction__c();
        //txn6.Opportunity__c = opp1.Id;
        //txn6.Transaction_Type__c = 'Opportunity Update';
        //txn6.Change_Type__c = 'Transfer Of License';
        //txn6.Status__c = 'Pending';
        //txn6.Log__c = 'Old Values -' + JSON.serialize(cliOldMapValues) + ';';
        //txn6.Log__c = txn6.Log__c + '\r\n' + 'New Values - null';
        //txnList.add(txn6);

        Transaction__c txn7 = new Transaction__c();
        txn7.Opportunity__c = opp1.Id;
        txn7.Transaction_Type__c = 'Opportunity Update';
        txn7.Change_Type__c = 'Quantity Change';
        txn7.Status__c = 'Pending';
        txn7.Log__c = 'Old Values -' + JSON.serialize(cliOldMapValues) + ';';
        txn7.Log__c = txn7.Log__c + '\r\n' + 'New Values -' + JSON.serialize(cliIds);
        txnList.add(txn7);

        ///Transaction__c txn8 = new Transaction__c();
       // txn8.Opportunity__c = opp1.Id;
        //txn8.Transaction_Type__c = 'Opportunity Update';
        //txn8.Change_Type__c = 'Contract Transfer';
        //txn8.Status__c = 'Pending';
        //txn8.Log__c = 'Old Values -' + JSON.serialize(cliOldMapValues) + ';';
        //txn8.Log__c = txn8.Log__c + '\r\n' + 'New Values - null';
        //txnList.add(txn8);
        
        Transaction__c txn9 = new Transaction__c();
        txn9.Opportunity__c = opp1.Id;
        txn9.Transaction_Type__c = 'Opportunity Update';
        txn9.Change_Type__c = 'Account Merge';
        txn9.Status__c = 'Pending';
        txn9.Log__c = 'Old Values -' + JSON.serialize(cliOldMapValues) + ';';
        txn9.Log__c = txn9.Log__c + '\r\n' + 'New Values -' + JSON.serialize(cliIds);
        txnList.add(txn9);

        insert txnList;
    }

    /*@isTest
    public static void testMethodBatch() {
        List<Transaction__c> txnInsert = [SELECT Id, Opportunity__c, Transaction_Type__c, Change_Type__c, Status__c, Log__c FROM Transaction__c WHERE Change_Type__c = 'Payment Method Change'];
        System.assert(txnInsert.size() > 0, 'No transactions found');

        SUBS_HandlePendingTransactionsOpptyBatch objbatch = new SUBS_HandlePendingTransactionsOpptyBatch();
        Set<Id> txnIds = new Set<Id>();
        txnIds.add(txnInsert[0].Id);
        objbatch.transactionIds = txnIds;
        Database.executeBatch(objbatch, 10);

        SUBS_HandlePendingTransactionsOpptyBatch objbatch2 = new SUBS_HandlePendingTransactionsOpptyBatch();
        Database.executeBatch(objbatch2, 10);
    }*/

    @isTest
    public static void testMethodButton() {
        Opportunity opp = [SELECT Id, Pending_Update__c, Lock_Opportunity__c FROM Opportunity LIMIT 1];
        System.assert(opp != null, 'No opportunity found');
        System.assertNotEquals(opp.Id, null, 'Opp Id not null');
        SUBS_SyncOpportunityDataButtonController.fetchPendingTransactionsOnOpp(opp.Id);
        List<Transaction__c> txnList = [SELECT Id, Opportunity__c, Transaction_Type__c, Change_Type__c, Status__c, Log__c FROM Transaction__c];
        System.assert(txnList.size() > 0, 'No transactions found');
        for (Transaction__c txn : txnList) {
            SUBS_SyncOpportunityDataButtonController.processTransaction(txn);
        }
        SUBS_SyncOpportunityDataButtonController.processPendingTransactions(txnList, opp);
    }
    
}
