public without sharing class OJJourneyAssignmentTriggerHandler {
    
    public class OJJourneyAssignmentWithCriteriaObjectLog{
        public OJJourneyAssignment__c JourneyAssignment;
        public List<OJChecklistCriteria__c> Criteria;
    }
    
    public static Map<String, OJJourneyAssignment__c> checkBoomerangOJJAs(Map<Id, OJJourneyAssignment__c> newJourneyAssignmentsMap, Map<Id, OJJourneyAssignment__c> oldJourneyAssignmentsMap) {

        //Retrieve all involved employee numbers for boomerangs
        Map<String, OJJourneyAssignment__c> ojjasByEmployeeNumber = new Map<String, OJJourneyAssignment__c>();

        //Add boomerang employees if applicable 
        for(OJJourneyAssignment__c newOJJA : newJourneyAssignmentsMap.values()) {
            OJJourneyAssignment__c oldOJJA = oldJourneyAssignmentsMap.get(newOJJA.id);
            if(oldOJJA != null && oldOJJA.EndDate__c != null && oldOJJA.EndDate__c < newOJJA.Start_Date__c && newOJJA.EndDate__c == null) {
                ojjasByEmployeeNumber.put(newOJJA.EmployeeNumber__c, newOJJA);
            }
        }

        //Return either an empty map or a map with boomerang employees
        return ojjasByEmployeeNumber;
    }
// run the assignment engine that compares the Journey Assignments against the Checklist Criteria 
    public static void upsertChecklistAssignment(List<OJJourneyAssignment__c> journeyAssignments) {
        
        List<OJChecklistCriteria__c> globalCriteria = getGlobalCriteria();

        //Get all the checklists by existing record types
        List<OJChecklist__c> onboardingCriteria = getRelevantChecklistByRT(OJConstants.checklistOnboardingRT);
        List<OJChecklist__c> corporateCriteria = getRelevantChecklistByRT(OJConstants.checklistCorporateRT);
        List<OJChecklist__c> maCriteria = getRelevantChecklistByRT(OJConstants.checklistOnboardingMA);
        List<OJChecklist__c> japanCriteria = getRelevantChecklistByRT(OJConstants.checklistOnboardingJapan);
        List<OJChecklist__c> futureForceCriteria = getRelevantChecklistByRT(OJConstants.checklistOnboardingFutureForce);

        List<OJChecklistAssignment__c> checklistAssignmentsToCreate = new List<OJChecklistAssignment__c>();
        for(OJJourneyAssignment__c journeyAssignment: journeyAssignments) {
            List<String> journeyAssignmentChainLevelValues = getNotNullChainLevelValues(journeyAssignment);
            //Review by OJJA which list needs to be iterated
            List<OJChecklist__c> checklistToIterate;
            if (String.isNotEmpty(journeyAssignment.HireReason__c) && journeyAssignment.HireReason__c.containsIgnoreCase(OJConstants.CRITERIA_CHECKER_MA)) {
                checklistToIterate = maCriteria;
            } else if(String.isNotEmpty(journeyAssignment.EmployeeType__c) && journeyAssignment.EmployeeType__c.containsIgnoreCase(OJCOnstants.CRITERIA_CHECKER_FUTURE_FORCE)) {
                checklistToIterate = futureForceCriteria;
                if (journeyAssignment.RecordTypeId == OJConstants.jAssignmentOnboardingRT) {
                    checklistToIterate.addAll(onboardingCriteria);
                }
            } else if(String.isNotEmpty(journeyAssignment.Region__c) && journeyAssignment.Region__c.containsIgnoreCase(OJCOnstants.CRITERIA_CHECKER_JAPAN)) {
                checklistToIterate = japanCriteria;
            } else if(journeyAssignment.RecordTypeId == OJConstants.jAssignmentOnboardingRT) {
                checklistToIterate = onboardingCriteria;
            } else if(journeyAssignment.RecordTypeId == OJConstants.jAssignmentCorporateRT) {
                checklistToIterate = corporateCriteria;
            }
            for(OJChecklist__c checklist: checklistToIterate) {

                if(!checklist.OJ_Checklist_Criteria__r.isEmpty()){
                    List<OJChecklistCriteria__c> criteria = checklist.OJ_Checklist_Criteria__r;
                    criteria.addAll(globalCriteria);
                    //If criteria matches we create a new checklist assignment with the current JA and checklist
                    if(matchesCriteria(journeyAssignment, criteria, journeyAssignmentChainLevelValues)){
                        String generatedLog = generateChecklistAssignmentLog(journeyAssignment, criteria);
                        checklistAssignmentsToCreate.add(new OJChecklistAssignment__c(
                            Journey_Assignment__c = journeyAssignment.Id,
                            Checklist__c = checklist.Id,
                            Log__c = generatedLog
                        ));
                    }
                }                      
            }
        }
        upsert checklistAssignmentsToCreate;
    }
    
    //Getting all existing checklist with their related criteria
    private static List<OJChecklist__c> getRelevantChecklistByRT(String rtId) {
        return [SELECT Id, RecordType.DeveloperName, (SELECT Id, Key__c, Operator__c, Value__c, Checklist__c FROM OJ_Checklist_Criteria__r) FROM OJChecklist__c  WHERE RecordTypeId =: rtId];
    }

    private static List<OJChecklistCriteria__c> getGlobalCriteria(){
        return [SELECT Key__c, Operator__c, Value__c, Checklist__c FROM OJChecklistCriteria__c WHERE RecordTypeId = :OJConstants.criteriaGlobalRT];
    }

    public static List<String> getNotNullChainLevelValues(OJJourneyAssignment__c journeyAssignment){
        List<String> toReturn = new List<String>();
        String fieldName, fieldValue;

        for(String field: OJConstants.jaFields.keySet()){
            fieldName = String.valueOf(OJConstants.jaFields.get(field));
            if(OJConstants.chainLevelFields.contains(fieldName)){
                fieldValue = String.valueOf(journeyAssignment.get(fieldName));
                if(String.isNotBlank(fieldValue)){
                    toReturn.add(fieldValue.trim());
                }
            }
        }

        return toReturn;
    }

    //We wanna make "Onboarding_Journey_Assignment" as default record type if it comes empty or null
    private static Boolean journeyAssignmentIsOfType(OJJourneyAssignment__c journeyAssignment, String type){
        //Empty, so RT will be always onboarding
        if(String.isEmpty(journeyAssignment.RecordTypeId) && type.contains(OJConstants.CORPORATE)){
            return false;
        }
        else if (String.isEmpty(journeyAssignment.RecordTypeId) && type.contains(OJConstants.ONBOARDING)) {
            return true;
        }
        //Not empty.. so we check whether JA RecordType is of the type passed
        return Schema.SObjectType.OJJourneyAssignment__c.getRecordTypeInfosById().get(journeyAssignment.RecordTypeId).getName().contains(type);
    }

    //For each criteria we ask for the selected operation and we work it encapsulated
    private static Boolean matchesCriteria(OJJourneyAssignment__c journeyAssignment, List<OJChecklistCriteria__c> criteria, List<String> journeyAssignmentChainLevelValues){
        List<String> journeyAssignmentFields;
        String criteriaValue;
        
        for(OJChecklistCriteria__c crt: criteria){            
            journeyAssignmentFields = new List<String>();
            criteriaValue = crt.Value__c.trim();
            
            if(crt.Key__c.equalsIgnoreCase(OJConstants.mgmtChainLevelName)){
                journeyAssignmentFields = journeyAssignmentChainLevelValues.clone();
            }
            else {
                if(journeyAssignment.get(crt.Key__c) != null){
                    journeyAssignmentFields.add(String.valueOf(journeyAssignment.get(crt.Key__c)));
                }
            }

            if(crt.Operator__c.equalsIgnoreCase('equals')){
                if(!matchesCriteriaEquals(criteriaValue, journeyAssignmentFields)){
                    return false;
                }
            }
            else if (crt.Operator__c.equalsIgnoreCase('contains')){
                if(!matchesCriteriaContains(criteriaValue, journeyAssignmentFields)){
                    return false;
                }
            }
            else if (crt.Operator__c.equalsIgnoreCase('does not contain')){
                if(!matchesCriteriaDoesNotContain(criteriaValue, journeyAssignmentFields)){
                    return false;
                }
            }
            else if (crt.Operator__c.equalsIgnoreCase('any')){
                if(!matchesCriteriaAny(criteriaValue, journeyAssignmentFields)){
                    return false;
                }
            }
            else if ((crt.Operator__c.equalsIgnoreCase('exclude')) && (!matchesCriteriaExclude(criteriaValue, journeyAssignmentFields))) {
                    return false;
            }
        }

        return true;
    }   

    // any of the fields match the criteria
    private static Boolean matchesCriteriaEquals(String criteriaValue, List<String> journeyAssignmentFields){
        for(String jaField: journeyAssignmentFields){
            if(jaField.equalsIgnoreCase(criteriaValue)){
                return true;
            }
        }
        return false;
    }

    // any of the fields contain the criteria value
    private static Boolean matchesCriteriaContains(String criteriaValue, List<String> journeyAssignmentFields){
        for(String jaField: journeyAssignmentFields){
            if(jaField.containsIgnoreCase(criteriaValue)){
                return true;
            }
        }
        return false;
    }

    // any field matches on any of a comma separated list of criteria
    private static Boolean matchesCriteriaAny(String criteriaValue, List<String> journeyAssignmentFields){
        List<String> anyValues = criteriaValue.split(',');
        
        for(String jaField: journeyAssignmentFields){
            for(String valueCriteria: anyValues){
                if(jaField.equalsIgnoreCase(valueCriteria.trim())){
                    return true;
                }
            }
        }
        
        return false;
    }

    // none of the field contain the criteria value
    private static Boolean matchesCriteriaDoesNotContain(String criteriaValue, List<String> journeyAssignmentFields){
        for(String jaField: journeyAssignmentFields){
            if(jaField.containsIgnoreCase(criteriaValue)){
                return false;
            }
        }
        return true;
    }

    // none of the field match the criteria
    private static Boolean matchesCriteriaExclude(String criteriaValue, List<String> journeyAssignmentFields){
        for(String jaField: journeyAssignmentFields){
            if(jaField.equalsIgnoreCase(criteriaValue)){
                return false;
            }
        }
        return true;
    }

    // create a JSON string that stores the current assigment criteria and employee data.  This will be used for auditing how a
    // user was assigned or not assigned checklists.
    public static String generateChecklistAssignmentLog(OJJourneyAssignment__c journeyAssignment, List<OJChecklistCriteria__c> criteria){

        OJJourneyAssignmentWithCriteriaObjectLog jaWithCriteriaObjLog = new OJJourneyAssignmentWithCriteriaObjectLog();
        jaWithCriteriaObjLog.JourneyAssignment = journeyAssignment;
        jaWithCriteriaObjLog.Criteria = criteria;

        JSONGenerator jsonWriter = JSON.createGenerator(true);

        jsonWriter.writeStartObject();
            jsonWriter.writeFieldName('Journey Assignment');
            jsonWriter.writeStartObject();
            
            String fieldName, fieldValue = '';
            for(String field: OJConstants.jaFields.keySet()){
                fieldName = String.valueOf(OJConstants.jaFields.get(field));
                fieldValue = String.valueOf(jaWithCriteriaObjLog.JourneyAssignment.get(fieldName));
                
                if(!OJConstants.excludedFieldsCALog.contains(fieldName)){
                    if(String.isNotBlank(fieldName) && String.isNotBlank(fieldValue)){
                        jsonWriter.writeStringField(fieldName, fieldValue);
                    } else {
                        jsonWriter.writeNullField(fieldName);
                    }
                }
            }

            jsonWriter.writeEndObject();
            jsonWriter.writeFieldName('Criteria');
            
            jsonWriter.writeStartArray();
            for(OJChecklistCriteria__c crt: criteria){
                jsonWriter.writeStartObject();
                    jsonWriter.writeStringField('Key', crt.Key__c);
                    jsonWriter.writeStringField('Operator', crt.Operator__c);
                    jsonWriter.writeStringField('Value', crt.Value__c);
                    jsonWriter.writeBooleanField('Global', crt.Checklist__c == null);
                jsonWriter.writeEndObject();
            }
            jsonWriter.writeEndArray();
        jsonWriter.writeEndObject();
        
        return jsonWriter.getAsString();
    }

    //Deleting checklist assignments related to incoming journey assignments
    public static void deleteAssociatedChecklistAssignments(List<OJJourneyAssignment__c> journeyAssignments){
        delete [SELECT Id FROM OJChecklistAssignment__c WHERE Journey_Assignment__c IN :journeyAssignments];    
    }

    public static void getRecordsWhoseStartDateAreGreaterThanToday(List<OJJourneyAssignment__c> journeyAssignments, Map<String, OJJourneyAssignment__c> recordsToReturn) {

        for(OJJourneyAssignment__c journeyAssignment: journeyAssignments) {
            if(journeyAssignment.Start_Date__c != null && journeyAssignment.RecordTypeId.equals(OJConstants.jAssignmentOnboardingRT) && journeyAssignment.Start_Date__c > Date.Today()) {
                recordsToReturn.put(journeyAssignment.EmployeeNumber__c, journeyAssignment);
            }
        }
    }

    // filter out records that have end dates
    // this is to filter out terminated employees
    public static List<OJJourneyAssignment__c> getRecordsForNonTerminatedEmployees(List<OJJourneyAssignment__c> journeyAssignments){
        List<OJJourneyAssignment__c> recordsToReturn = new List<OJJourneyAssignment__c>();

        for(OJJourneyAssignment__c journeyAssignment: journeyAssignments){
            if(journeyAssignment.EndDate__c == null){
                recordsToReturn.add(journeyAssignment);
            }
        }
        return recordsToReturn;
    }

    // return records that have a start date more than 5 months in the past
    // we shouldn't be assigning people that have been at the company for a full quarter any
    // onboarding tasks
    public static List<OJJourneyAssignment__c> filterOutLongTenuredEmployees(List<OJJourneyAssignment__c> journeyAssignments){
        List<OJJourneyAssignment__c> recordsToReturn = new List<OJJourneyAssignment__c>();

        for(OJJourneyAssignment__c journeyAssignment: journeyAssignments){
            if(journeyAssignmentIsOfType(journeyAssignment, OJConstants.CORPORATE) || journeyAssignment.Start_Date__c >= Date.today().addDays(-150)){
                recordsToReturn.add(journeyAssignment);
            }
        }
        return recordsToReturn; 
    }

    //Deleting user tasks related to incoming journey assignments
    public static void deleteAssociatedUserTasks(List<OJJourneyAssignment__c> journeyAssignments){
        delete [SELECT Id FROM OJUserTask__c WHERE JourneyAssignment__c IN :journeyAssignments];
    } 

    //Check if journey assignment is null, if it is, put Onboarding by default.
    public static void checkForJourneyAssigmentRT(List<OJJourneyAssignment__c> journeyAssignments){
        for(OJJourneyAssignment__c journeyAssignment: journeyAssignments){
            if(String.isEmpty(journeyAssignment.RecordTypeId)){
                journeyAssignment.RecordTypeId = OJConstants.jAssignmentOnboardingRT;
            }
        }
    }

    //Checking that Employee Number starts with 'C-' if JA is corporate and viceversa
    public static void validateEmployeeNumberPrefix(List<OJJourneyAssignment__c> journeyAssignments){
        for(OJJourneyAssignment__c journeyAssignment: journeyAssignments){
            if(journeyAssignment.EmployeeNumber__c != null){
                if(journeyAssignmentIsOfType(journeyAssignment, OJConstants.CORPORATE) && !journeyAssignment.EmployeeNumber__c.startsWithIgnoreCase('C-')){
                    journeyAssignment.addError(Label.ojJourneyAssignmentEmployeeNumberPrefixError);
                }
                else if(journeyAssignmentIsOfType(journeyAssignment, OJConstants.ONBOARDING) && journeyAssignment.EmployeeNumber__c.startsWithIgnoreCase('C-')){
                    journeyAssignment.addError(Label.ojJourneyAssignmentEmployeeNumberPrefixError2);
                }
            }
        }
    }

    //Validating that employee number does not get repeated
    public static void singleAssignmentForEmployeeNumber(List<OJJourneyAssignment__c> journeyAssignments){
        //Getting all users related to journey assignments in trigger
        Set<String> employeeIds = new Set<String>();
        for (OJJourneyAssignment__c journeyAssignment : journeyAssignments) {
            employeeIds.add(journeyAssignment.EmployeeNumber__c);
        }

        //Creating map with user as key for journey assignment (only one should exist per user)
        Map<String, OJJourneyAssignment__c> userAndJourneyAssignment = new Map<String, OJJourneyAssignment__c>();
        for(OJJourneyAssignment__c journeyAssignment : [SELECT Id, EmployeeNumber__c FROM OJJourneyAssignment__c WHERE EmployeeNumber__c IN :employeeIds]){
            userAndJourneyAssignment.put(journeyAssignment.EmployeeNumber__c, journeyAssignment);
        }

        //Used to make sure the trigger did not bring repeated data. Creating a set of unique users being inserted/updated
        Set<String> usersWithAssignment = new Set<String>();

        for(OJJourneyAssignment__c journeyAssignment : journeyAssignments) {        
            //User has a journey assignment assigned to him and is different of the current journey assignment
            if((userAndJourneyAssignment.containsKey(journeyAssignment.EmployeeNumber__c) && 
                (journeyAssignment.Id == null || userAndJourneyAssignment.get(journeyAssignment.EmployeeNumber__c).Id != journeyAssignment.Id)) || 
                    
                    usersWithAssignment.contains(journeyAssignment.EmployeeNumber__c)){
                    journeyAssignment.addError(Label.ojSingleJourneyAssignmentError);
            
            } else {
                //Add User to Users with journey assignment set
                usersWithAssignment.add(journeyAssignment.EmployeeNumber__c);
            }                
        }
    }
    
    public static List<OJJourneyAssignment__c> assignUsersToJourneyAssignments(List<OJJourneyAssignment__c> journeyAssignments){
        Map<String, OJJourneyAssignment__c> employeeWithJassignments = new  Map<String, OJJourneyAssignment__c>();

        for(OJJourneyAssignment__c jAssignment: journeyAssignments){
            if(String.isBlank(jAssignment.User__c)){
                employeeWithJassignments.put(jAssignment.EmployeeNumber__c, jAssignment);
            }
        }

        if(!employeeWithJassignments.isEmpty()){
            Schema.SObjectField field = Schema.getGlobalDescribe().get('User').getDescribe().fields.getMap().get('sf62user__Employee_Number__c');
            Set<String> keys = employeeWithJassignments.keySet();
            String query, employeeNumberFieldName;

            if(field != null){
                employeeNumberFieldName = 'sf62user__Employee_Number__c';
            } else {
                employeeNumberFieldName = 'org62_Employee_Number__c';
            }

            query = 'SELECT ' + employeeNumberFieldName + ', IsActive, UserType, FederationIdentifier FROM User WHERE ' + employeeNumberFieldName + ' IN :keys AND UserType = \'Standard\' AND IsActive = true  AND FederationIdentifier != null';            
            
            for(User user: Database.query(query)){
                if(employeeWithJassignments.containsKey(String.valueOf(user.get(employeeNumberFieldName)))){
                    employeeWithJassignments.get(String.valueOf(user.get(employeeNumberFieldName))).User__c = user.Id;
                }
            }
        }

        return employeeWithJassignments.values();
    }
}
