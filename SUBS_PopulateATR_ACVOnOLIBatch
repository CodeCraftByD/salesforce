global class SUBS_PopulateATR_ACVOnOLIBatch implements Database.Batchable<sObject>, Database.AllowsCallouts, Database.Stateful {
    private String query;
    public String queryFilter;
    public Integer totalCount = 0;
    public Integer errorCount = 0;

    global SUBS_PopulateATR_ACVOnOLIBatch() {
        throwExceptionIfPreviousJobRunning();
    }

    global SUBS_PopulateATR_ACVOnOLIBatch(String queryFilter) {
        throwExceptionIfPreviousJobRunning();
        this.queryFilter = queryFilter;
    }

    global Database.QueryLocator start(Database.BatchableContext batchContext) {
        String filterString = '';
        //Get common fields from method
        query = 'Select ' + SUBS_OpportunityPriceService.getOLIFieldsToQuery() + ' FROM OpportunityLineItem';
        List<Batch_Job_Setting__mdt> bList = [SELECT Query_Filter__c FROM Batch_Job_Setting__mdt WHERE DeveloperName = 'Populate_ATR_ACV_Subs_Oppty_Filter'];
        if (bList.size() > 0 && String.isNotBlank(bList[0].Query_Filter__c)) {
            filterString = bList[0].Query_Filter__c;
            system.debug('filterString = ' + filterString);
        } else {
            filterString = 'Opportunity.RecordType.Name = \'Subscription Opportunity\' AND Line_Item_ATR__c = null AND Opportunity.isClosed = false AND Contract_Line_Item__c != null AND Contract_Line_Item__r.Pelican_Order__c != null and Renewal_Status__c = \'Open\' and Line_Item_Action__c = \'Renewal\' and Product2.M_A_Indicator__c = \'ACS\' ';
        }
        if (String.isNotBlank(filterString)) {
            query += ' WHERE ' + filterString;
        }
        if (String.isNotBlank(queryFilter)) {
            query += ' and ' + queryFilter;
        }
        System.debug(' query >> ' + query);
        return Database.getQueryLocator(query);
    }

    global void execute(Database.BatchableContext batchContext, List<OpportunityLineItem> lsOpptyLineItem) {
        Map<Id, OpportunityLineItem> eligibleOLIMap = new Map<Id, OpportunityLineItem>(lsOpptyLineItem);
        totalCount += lsOpptyLineItem.size(); //  Total Count
        try {
            SUBS_PopulateATR_ACVOnOLIBatchService.getOrderDatailsUsingOrderNo(lsOpptyLineItem);

            if (!SUBS_PopulateATR_ACVOnOLIBatchService.oliErrorMessageMap.isEmpty()) {
                for (String lineItem : SUBS_PopulateATR_ACVOnOLIBatchService.oliErrorMessageMap.keySet()) {
                    DROM_RenewalOpportunityUtility.logBatchException(SUBS_PopulateATR_ACVOnOLIBatchService.oliErrorMessageMap.get(lineItem), null, lineItem, 'SUBS_PopulateATR_ACVOnOLIBatch', 'execute', 'SUBS_PopulateATR_ACVOnOLIBatch', 'OpportunityLineItem', 'Custom Validation', null, batchContext);
                }
                errorCount += SUBS_PopulateATR_ACVOnOLIBatchService.oliErrorMessageMap.size(); // Total Error Count
            }
        } catch (Exception e) {
            DROM_RenewalOpportunityUtility.logBatchException('Error Message : <br/>' + e.getMessage() + ' - Line Number : ' + e.getLineNumber() + '<br/>' + 'Stack Trace : <br/>' + e.getStackTraceString(), eligibleOLIMap.keyset(), null, 'SUBS_PopulateATR_ACVOnOLIBatch', 'execute', 'SUBS_PopulateATR_ACVOnOLIBatch', 'OpportunityLineItem', e.getTypeName(), null, batchContext);
        }
        DROM_RenewalOpportunityUtility.insertBatchExceptions();
    }

    global void finish(Database.BatchableContext batchContext) {
        System.debug('Finish Block Executed');
        Integer successCount = totalCount - errorCount;
        String message = ' Total Records Processed: ' + totalCount + '\n' + ' Success Record Count: ' + successCount + '\n' + ' Failure Record Count: ' + errorCount;

        Batch_Transaction_Log__c log = new Batch_Transaction_Log__c(
            Batch_Job_Name__c = 'SUBS_PopulateATR_ACVOnOLIBatch',
            Error_Message__c = message,
            OwnerId = Userinfo.getUserId()
            //Error_Type__c = errorType
        );
        if (log != null) {
            insert log;
        }

        // Calling the pricing job to populate prices 
        // Note: This will populate prices for records created today
        if (!Test.isRunningTest()) {
            SUBS_PopulatePriceOnOpptyBatch b = new SUBS_PopulatePriceOnOpptyBatch(' CreatedDate = today ');
            Database.executeBatch(b, 10);
        }
    }
    
    public void throwExceptionIfPreviousJobRunning() {
        if (!Sf.settings.getBoolean('AIR_GenerationJobAllowParallelJobs', false)) {
            List<AsyncApexJob> asyncJobs = new List<AsyncApexJob>([SELECT Id, MethodName, JobItemsProcessed, ApexClassId, CompletedDate, Status, ExtendedStatus, TotalJobItems FROM AsyncApexJob WHERE (Status = 'Processing' OR Status = 'Queued' OR Status = 'Preparing' OR Status = 'Holding') AND ApexClassId IN (SELECT Id FROM ApexClass WHERE Name = 'SUBS_PopulateATR_ACVOnOLIBatch')]);
            //Execute the Batch only if no other jobs are running
            if (asyncJobs.size() > 0 && !Test.isRunningTest()) {
                throw new CustomException('PREVIOUS_JOB_RUNNING', 'Previous Job(s) is still running');
            }
        }
    }
}
