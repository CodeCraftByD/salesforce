public without sharing class SUBS_OpportunityCreationService {
    private static string recordTypeName = 'ODM';
    //List with All Clis(eligible and invalid)
    public static List<ContractLineItem> cliList { public get; private set; }

    private static Map<Id, String> cliIdRenewalKeyMap = new Map<Id, String>();
    private static Map<String, Opportunity> renewalKeyOpportunityMap = new Map<String, Opportunity>();
    private static Map<String, Opportunity> cliIdOpportunityMap = new Map<String, Opportunity>();
    private static Map<String, List<ContractLineitem>> renewalKeyWithClisList = new Map<String, List<ContractLineitem>>();
    public static Set<String> endCustomerAccountTypes;
    public static Set<String> noDealerCSNs;
    private static String subscriptionOppRecordTypeId = Schema.SobjectType.Opportunity.getRecordTypeInfosByDeveloperName().get('Subscription_Opportunity').getRecordTypeId();
    private static String autodeskOppRecordTypeId = Schema.SobjectType.Opportunity.getRecordTypeInfosByDeveloperName().get('Autodesk_Opportunity').getRecordTypeId(); //DAASN-19496
    //public static Map<String, String> soldToAccountCountryMap;
    private static Boolean isBatch = false;
    private static Database.BatchableContext batchContext = null;
    private static Map<String, Date> lowerLimitMap = new Map<String, Date>();
    private static Boolean bypassPriceBookError = false;
    private static SavePoint sp;
    private static set<String> pelicanOrderList = new Set<String>(); //DAASN-19496
    private static Map<String, Id> aoToOrderMap = new Map<String, Id>(); //DAASN-19496
    //For Logging Purposes
    public static String debugLog = '';
    public static Long totalTime = 0;
    public static List<PriceServiceModels.GetContextualPriceResponse> lsGCPResponse = new List<PriceServiceModels.GetContextualPriceResponse>();
    public static Map<String, Integer> mCLIToLineIdRecord = new Map<String, Integer>();
    public static Map<String, Decimal> storeSubIdWithATRvalue = new Map<String, Decimal>(); //CRMEAGLE-2043

    //Group Id to Account Id Mapping
    public static Map<id, id> groupAccountMap = new Map<id, id>();

    //OpportunityId-AccountId to Contract Line Item mapping
    //public static Map<String, String> opportunityAccountCliMap = new Map<String, String>();

    private static Boolean isValidationDone = false;
    private static final string OPPORTUNITY_LOCKED_ERROR = 'Opportunity is locked';
    private static Integer retryCount = DROM_RenewalOpportunityUtility.getIntegerSetting('RenewalOpportunityServiceRetryCount', 3);

    //Cli Id to ContractLineItem Map(All Clis passed to createInternalOpportunities - Map will have only eligible Clis after validation)
    public static Map<Id, ContractLineItem> cliMap { public get; public set; }

    //Cli Id to Error Message Map(Only Validation Errors)
    public static Map<Id, String> cliErrorMessageMap {
        public get {
            if (cliErrorMessageMap == null) {
                cliErrorMessageMap = new Map<Id, String>();
            }
            return cliErrorMessageMap;
        }
        private set;
    }
    public static Map<String, String> pbeMap = new Map<String, String>(); //CRMEAGLE-1001
    /**
     *   Description      : Loop through cliMap and check if cli is valid i.e Check contract type, check whether Renewal Sku  exists based on cliIdRenewalSkuMap and other relavant validations(validations for ROM are in ROM_RenewalOpportunityButtonHelper class)
     *                      If cli is invalid, remove it from from cliMap, insert error in cliErrorMessageMap for manaul creation, and insert into Batch_Transaction_Log__c for Batch creation
     **/
    public static void validateClis() {
        //Renewal Period Settings which determine when renewal has to be created
        Map<String, DROM_Renewal_Setting__mdt> renewalPeriodSettings = DROM_RenewalOpportunityUtility.renewalPeriodSettings;

        //Set of Product Codes for which renewals should not be created
        System.debug('--Number of Rows Initially' + Limits.getQueries());
        //Set<String> noRenewalProductCodes = ROM_RenewalOpportunityUtility.noRenewalProductCodes;
        System.debug('--Number of Rows finally' + Limits.getQueries());

        //Calculating End dates lower limit and higer limit(range of date for which Renewal has to be created-Same for both Manual and Batch)

        Map<String, Date> higherLimitMap = new Map<String, Date>();
        for (String s : renewalPeriodSettings.keySet()) {
            if (renewalPeriodSettings.get(s).Days_After__c != null) {
                lowerLimitMap.put(s, Date.today().addDays(-(Integer) renewalPeriodSettings.get(s).Days_After__c));
            }
            if (lowerLimitMap.get(s) == null) {
                lowerLimitMap.put(s, Date.today().addDays(-30));
            }
            if (renewalPeriodSettings.get(s).Days_Before__c != null) {
                higherLimitMap.put(s, Date.today().addDays((Integer) renewalPeriodSettings.get(s).Days_Before__c));
            }
        }

        System.debug('lowerLimitMap >>>>>' + lowerLimitMap);
        System.debug('higherLimitMap  >>>>>' + higherLimitMap);

        //Boolean ignoreExpiryDateCheckForClosedOppties = Sf.settings.getBoolean('DROM_IgnoreExpryDtChckForClosedOppties', false);
        for (ContractLineItem cli : cliMap.values()) {
            //changing it to Autodesk Opportunity
            //EAPESDROME-671: @mit recurring agreement starts
            //DAPSFDCPI-9156:Block creation of AIR Opty for FLEX contracts
            if (cli.OfferingId__c == null) {
                handleValidationError(cli, 'Offering is missing from Cli', '');
            } else if (cli.OfferingId__r.ProductCode == null) {
                handleValidationError(cli, 'Product Line Code is missing from Offering', '');
            }
        } //end of for loop

        isValidationDone = true;
        system.debug('inside validateClis method cliErrorMessageMap keyset' + cliErrorMessageMap.keyset());
        system.debug('inside validateClis method cliErrorMessageMap values' + cliErrorMessageMap.values());
    }

    public static void validateEORWithMixedResponseGcpCall(Map<String, List<ContractLineItem>> eligibleContractLineItems) {
        Map<String, String> mTermNameToCode = new Map<String, String>();
        Map<Integer, ContractLineItem> mLineIdToCLIRecord = new Map<Integer, ContractLineItem>();
        List<PriceServiceModels.GetContextualPriceRequest> lsGCPRequest = new List<PriceServiceModels.GetContextualPriceRequest>();

        Settings__c customDateSetting = Settings__c.getValues('Subs_O2P_PriceDate');
        String customPriceDate = (customDateSetting != null && String.isNotBlank(customDateSetting.value1__c)) ? customDateSetting.value1__c : String.valueOf(Date.today());
        List<String> customDateCountryList = (customDateSetting != null && String.isNotBlank(customDateSetting.value2__c)) ? customDateSetting.value2__c.split(',') : new List<String>();

        Integer i = 1; //Initializing to keep lineItemId in sequence across multiple oppty
        System.debug(mTermNameToCode);
        System.debug(eligibleContractLineItems);
        for (String key : eligibleContractLineItems.keySet()) {
            Map<Id, String> cliIdSalesChannelMap = SUBS_OpportunityCreationUtility.getSalesChannelFromCLI(eligibleContractLineItems.get(key));
            ContractLineitem item = eligibleContractLineItems.get(key)[0];
            PriceServiceModels.GetContextualPriceRequest gcpRequest = new PriceServiceModels.GetContextualPriceRequest();
            if (SUBS_OpportunityCreationUtility.isSalesChannelResale(item)) {
                gcpRequest.country = (item.Distributor__c == null && item.Reseller_Account__c != null) 
                        ? item.Reseller_Account__r.Country_Lookup__r.Country_Code__c 
                        : (item.Distributor__c != null) 
                        ? item.Distributor__r.Country_Lookup__r.Country_Code__c 
                        : item.ServiceContract.Account.Country_Lookup__r.Country_Code__c;
            } else if (item.ServiceContract.Account.Country_Lookup__c != null && item.ServiceContract.Account.Country_Lookup__r.Country_Code__c != null) {
                gcpRequest.country = item.ServiceContract.Account.Country_Lookup__r.Country_Code__c;
            } else {
                Country__c objCountry = PriceServiceHelper.getCountryRecByName(item.ServiceContract.Account.Country_Picklist__c);
                if (objCountry != null) {
                    gcpRequest.country = objCountry.Country_Code__c;
                }
            }
            String opptyCurrency = String.isNotBlank(item.Subscription_Currency_Code__c) ? item.Subscription_Currency_Code__c : SUBS_OpportunityCreationUtility.getOpportunityCurrency(item.ServiceContract.Account.Country_Picklist__c);
            if (SUBS_OpportunityCreationUtility.isSalesChannelResale(item)) {
                gcpRequest.priceCurrency = (item.Distributor__c == null && item.Reseller_Account__c != null) 
                        ? item.Reseller_Account__r.CurrencyIsoCode 
                        : (item.Distributor__c != null) 
                        ? item.Distributor__r.currencyIsoCode 
                        : item.ServiceContract.Account.currencyIsoCode;
            } else if (opptyCurrency == '') {
                //assign the End Customer Account currency
                gcpRequest.priceCurrency = item.ServiceContract.Account.currencyIsoCode;
            } else {
                //assign the End Customer Account currency from Country__c Object
                gcpRequest.priceCurrency = opptyCurrency;
            }
            gcpRequest.priceDate = customDateCountryList.contains(gcpRequest.country) ? customPriceDate : String.valueOf(Date.today()); //set the price date
            //gcpRequest.salesChannelCode = Sf.settings.getString('Sales_SalesChannelCode', 'direct');
            //gcpRequest.salesPlatformCode = Sf.settings.getString('Sales_SalesPlatformCode', 'CPQ');
            gcpRequest.lineItems = new List<PriceServiceModels.LineItem>();
            String languageCode = 'en_US';
            //String languageCode = PriceServiceHelper.getLanguageCode(eligibleContractLineItems.get(key)[0].Purchaser__r.Contact_Language__c, eligibleContractLineItems.get(key)[0].ServiceContract.Account.Country_Lookup__r.Country_Code__c);
            for (ContractLineItem cli : eligibleContractLineItems.get(key)) {
                String salesChannel = cliIdSalesChannelMap.containsKey(cli.Id) ? cliIdSalesChannelMap.get(cli.Id) : null;
                String salesPlatform = salesChannel;
                gcpRequest.salesChannelCode = (salesChannel == 'Agency') ? Sf.settings.getString('Sales_SalesChannelCode', 'direct') : salesChannel;
                gcpRequest.salesPlatformCode = (salesPlatform == 'Resale' || salesPlatform == 'direct') ? Sf.settings.getString('Sales_SalesPlatformCode', 'CPQ') : Sf.settings.getString('Sales_SalesPlatformCode_exc', 'EXC');
                //gcpRequest.salesChannelCode = (cli.Merchant__c != null && cli.ServiceContract.Account.Country_Lookup__r.ODM_Flag__c == false) ? Sf.settings.getString('Sales_SalesChannelCode_Indirect', 'indirect') : Sf.settings.getString('Sales_SalesChannelCode', 'direct'); //CRMEAGLE-2841 added MoR check
                //gcpRequest.salesPlatformCode = (cli.Merchant__c != null && cli.ServiceContract.Account.Country_Lookup__r.ODM_Flag__c == false) ? Sf.settings.getString('Sales_SalesPlatformCode_exc', 'EXC') : Sf.settings.getString('Sales_SalesPlatformCode', 'CPQ'); //CRMEAGLE-2841 added MoR check
                String orderContext = ''; //oppty.Originated_from_LC__c == true ? 'LC' : '';
                String term = cli.Term__c;
                Date startDate = (cli.Actual_end_date__c + 1) != null ? (cli.Actual_end_date__c + 1) : cli.StartDate;
                // Added attributes from contextualPrice v2 to lineItems
                //Handle null values - if null, then make it empty string such that API does not fail
                if (cli.Pricing_Method__c == 'VAL') {
                    PriceServiceModels.RequestOffer requestOffer = new PriceServiceModels.RequestOffer(SUBS_OpportunityPriceService.handleNull(cli.Intended_Usage__c), SUBS_OpportunityPriceService.handleNull(cli.Access_Model__c), SUBS_OpportunityPriceService.handleNull(term), SUBS_OpportunityPriceService.handleNull(cli.Connectivity__c), SUBS_OpportunityPriceService.handleNull(cli.Service_Plan__c), SUBS_OpportunityPriceService.handleNull(cli.Billing_Frequency__c), SUBS_OpportunityPriceService.handleNull(cli.Pricing_Method__c));
                    gcpRequest.lineItems.add(new PriceServiceModels.LineItem(i, cli.Offering_Id__c, Integer.valueOf(cli.Quantity), languageCode, requestOffer, 'Renewal', String.valueOf(startDate), String.valueOf(QuoteServiceUtility.getEndDateBasedOnTermAndStartDate((cli.Actual_end_date__c + 1), cli.Term__c)), SUBS_OpportunityPriceService.handleNull(''), orderContext, Integer.valueOf(0), Integer.valueOf(0), cli.Switch_Price_Condition__c, (long) cli.Annual_Declared_Value__c));
                } else {
                    PriceServiceModels.RequestOffer requestOffer = new PriceServiceModels.RequestOffer(SUBS_OpportunityPriceService.handleNull(cli.Intended_Usage__c), SUBS_OpportunityPriceService.handleNull(cli.Access_Model__c), SUBS_OpportunityPriceService.handleNull(term), SUBS_OpportunityPriceService.handleNull(cli.Connectivity__c), SUBS_OpportunityPriceService.handleNull(cli.Service_Plan__c), SUBS_OpportunityPriceService.handleNull(cli.Billing_Frequency__c));
                    gcpRequest.lineItems.add(new PriceServiceModels.LineItem(i, cli.Offering_Id__c, Integer.valueOf(cli.Quantity), languageCode, requestOffer, 'Renewal', String.valueOf(startDate), String.valueOf(QuoteServiceUtility.getEndDateBasedOnTermAndStartDate((cli.Actual_end_date__c + 1), cli.Term__c)), SUBS_OpportunityPriceService.handleNull(''), orderContext, Integer.valueOf(0), Integer.valueOf(0), cli.Switch_Price_Condition__c));
                }
                mLineIdToCLIRecord.put(i, cli);
                mCLIToLineIdRecord.put(cli.Id, i);
                i++;
            }

            lsGCPRequest.add(gcpRequest);
            //System.debug(gcpRequest);
        }

        System.debug('lsGCPRequest' + lsGCPRequest);

        //Get the response for different opportunities
        PriceServiceHelper.context = QuoteServiceUtility.GCP_CALL_FROM_OPPORTUNITY;
        for (PriceServiceModels.GetContextualPriceRequest gcpRequest : lsGCPRequest) {
            System.debug('gcpRequest' + gcpRequest);
            PriceServiceModels.GetContextualPriceResponse gcpResponse = PriceServiceHelper.getContextualPricev2(gcpRequest);
            lsGCPResponse.add(gcpResponse);
        }
        for (PriceServiceModels.GetContextualPriceResponse gcpResponse : lsGCPResponse) {
            for (PriceServiceModels.ContextualPrice price : gcpResponse.prices) {
                ContractLineItem cli = mLineIdToCLIRecord.get(price.lineItemID);
                if ((price.endOfRenewalDate != null && Date.valueOf(price.endOfRenewalDate) <= date.today()) || (price.code != null && price.code == 'O2PER200')) {
                    handleValidationError(cli, 'Offer is End Of Renewal', '');
                }
            }
        }
    }

    public static void validateEORWithGcpCall(List<ContractLineitem> eligibleContractLineItems) {
        List<PriceServiceModels.GetContextualPriceRequest> lsGCPRequest = new List<PriceServiceModels.GetContextualPriceRequest>();
        Map<Integer, ContractLineItem> mLineIdToCLIRecord = new Map<Integer, ContractLineItem>();

        Settings__c customDateSetting = Settings__c.getValues('Subs_O2P_PriceDate');
        String customPriceDate = (customDateSetting != null && String.isNotBlank(customDateSetting.value1__c)) ? customDateSetting.value1__c : String.valueOf(Date.today());
        List<String> customDateCountryList = (customDateSetting != null && String.isNotBlank(customDateSetting.value2__c)) ? customDateSetting.value2__c.split(',') : new List<String>();

        //Iterate on oppty such that one request to O2P can consist of all line items of tha opportunity
        Integer i = 1; //Initializing to keep lineItemId in sequence across multiple oppty
        for (ContractLineItem cli : eligibleContractLineItems) {
            PriceServiceModels.GetContextualPriceRequest gcpRequest = new PriceServiceModels.GetContextualPriceRequest();
            if (cli.ServiceContract.Account.Country_Lookup__c != null && cli.ServiceContract.Account.Country_Lookup__r.Country_Code__c != null) {
                gcpRequest.country = cli.ServiceContract.Account.Country_Lookup__r.Country_Code__c;
            } else {
                Country__c objCountry = PriceServiceHelper.getCountryRecByName(cli.ServiceContract.Account.Country_Picklist__c);
                if (objCountry != null) {
                    gcpRequest.country = objCountry.Country_Code__c;
                }
            }
            String opptyCurrency = String.isNotBlank(cli.Subscription_Currency_Code__c) ? cli.Subscription_Currency_Code__c : SUBS_OpportunityCreationUtility.getOpportunityCurrency(cli.ServiceContract.Account.Country_Picklist__c);
            if (opptyCurrency == '') {
                //assign the End Customer Account currency
                gcpRequest.priceCurrency = cli.ServiceContract.Account.currencyIsoCode;
            } else {
                //assign the End Customer Account currency from Country__c Object
                gcpRequest.priceCurrency = opptyCurrency;
            }
            gcpRequest.priceDate = customDateCountryList.contains(gcpRequest.country) ? customPriceDate : String.valueOf(Date.today()); //set the price date
            gcpRequest.salesChannelCode = cli.Merchant__c != NULL ? Sf.settings.getString('Sales_SalesChannelCode_Indirect', 'indirect') : Sf.settings.getString('Sales_SalesChannelCode', 'direct');//CRMEAGLE-2841 added MoR check
            gcpRequest.salesPlatformCode = Sf.settings.getString('Sales_SalesPlatformCode', 'CPQ');
            gcpRequest.lineItems = new List<PriceServiceModels.LineItem>();
            String languageCode = 'en_US';
            //String languageCode = PriceServiceHelper.getLanguageCode(cli.Purchaser__r.Contact_Language__c, cli.ServiceContract.Account.Country_Lookup__r.Country_Code__c);

            String orderContext = '';
            String term = cli.Term__c;
            Date startDate = (cli.Actual_end_date__c + 1) != null ? (cli.Actual_end_date__c + 1) : cli.StartDate;
            // Added attributes from contextualPrice v2 to lineItems
            //Handle null values - if null, then make it empty string such that API does not fail
            PriceServiceModels.RequestOffer requestOffer = new PriceServiceModels.RequestOffer(SUBS_OpportunityPriceService.handleNull(cli.Intended_Usage__c), SUBS_OpportunityPriceService.handleNull(cli.Access_Model__c), SUBS_OpportunityPriceService.handleNull(term), SUBS_OpportunityPriceService.handleNull(cli.Connectivity__c), SUBS_OpportunityPriceService.handleNull(cli.Service_Plan__c), SUBS_OpportunityPriceService.handleNull(cli.Billing_Frequency__c));
            gcpRequest.lineItems.add(new PriceServiceModels.LineItem(i, cli.Offering_Id__c, Integer.valueOf(cli.Quantity), languageCode, requestOffer, 'Renewal', String.valueOf(startDate), String.valueOf(QuoteServiceUtility.getEndDateBasedOnTermAndStartDate((cli.Actual_end_date__c + 1), cli.Term__c)), SUBS_OpportunityPriceService.handleNull(''), orderContext, Integer.valueOf(0), Integer.valueOf(0), cli.Switch_Price_Condition__c));
            mLineIdToCLIRecord.put(i, cli);
            mCLIToLineIdRecord.put(cli.Id, i);
            i++;
            lsGCPRequest.add(gcpRequest);
        }

        PriceServiceHelper.context = QuoteServiceUtility.GCP_CALL_FROM_OPPORTUNITY;
        for (PriceServiceModels.GetContextualPriceRequest gcpRequest : lsGCPRequest) {
            try {
                PriceServiceModels.GetContextualPriceResponse gcpResponse = PriceServiceHelper.getContextualPricev2(gcpRequest);
                lsGCPResponse.add(gcpResponse);
                if (gcpResponse.prices[0].endOfRenewalDate != null && Date.valueOf(gcpResponse.prices[0].endOfRenewalDate) <= date.today()) {
                    handleValidationError(mLineIdToCLIRecord.get(gcpRequest.lineItems[0].id), 'Offer is End Of Renewal', '');
                }
            } catch (Exception ex) {
                //Check the custom exception thrown and basis on the exception type update the status and message
                //Expecting EOR exception, update the OLI renewal status with 'End of Renewal' status
                //Add the lineitems to one list and update
                handleValidationError(mLineIdToCLIRecord.get(gcpRequest.lineItems[0].id), 'Offer is End Of Renewal', '');
            }
        }
    }

    // Used to create Subscription Opportunity and LineItems
    public static List<Opportunity> createSubscriptionOpportunities(List<ContractLineItem> cliList, Boolean flag) {
        cliMap = new Map<Id, ContractLineItem>(cliList);
        validateCliEithPricebookEntryNotFound(cliMap); // CRMEAGLE-1001
        cliList = cliList;
        isBatch = flag;
        if (!isValidationDone) {
            validateClis();
        }
        Set<String> renewalKeySet = new Set<String>();
        endCustomerAccountTypes = ROM_RenewalOpportunityUtility.getEndCustomerTypes();
        noDealerCSNs = ROM_RenewalOpportunityUtility.getNoDealerAccountCSNs();
        System.debug('cliList : ' + cliMap.values());
        SUBS_OpportunityCreationUtility.getResellerAccountMap(cliMap.values(), 'ODM');
        SUBS_OpportunityCreationUtility.getDistributorAccountMap(cliMap.values(), 'ODM');

        // map key with cli based on ContractLineItemList
        cliIdRenewalKeyMap = SUBS_OpportunityCreationUtility.getRenewalKeys(cliMap.values());
        for (ContractLineItem cli : cliMap.values()) {
            String key = cliIdRenewalKeyMap.get(cli.Id);
            if (cli.Pelican_Order__c != null) {
                pelicanOrderList.add(cli.Pelican_Order__c); // DAASN-19496
            }
            if (renewalKeyWithClisList.ContainsKey(key)) {
                renewalKeyWithClisList.get(key).add(cli);
            } else {
                renewalKeyWithClisList.put(key, new List<ContractLineItem>{ cli });
            }
        }

        System.debug('isMixedEORResponseNewModel' + Sf.settings.getBoolean('EnableMixedEORResponse', false));
        if (Sf.settings.getBoolean('EnableMixedEORResponse', false)) {
            validateEORWithMixedResponseGcpCall(renewalKeyWithClisList);
        } else {
            validateEORWithGcpCall(cliMap.values());
        }
        //CRMEAGLE-2043
        /*if (!isBatch) {
            getCliAtrValues(cliMap.values());
        }*/
        sp = Database.setSavePoint();
        //CRMEAGLE-1287 - Shubham Agarwal
        if (!isBatch) {
            List<ContractLineItem> cliListForLock = [SELECT Id FROM ContractLineItem WHERE Id IN :cliMap.keySet() FOR UPDATE];
            System.Debug('cliListForLock' + cliListForLock);
        }

        System.Debug('Order number list' + pelicanOrderList);
        //DAASN-19496 start
        if (!pelicanOrderList.isEmpty()) {
            for (Opportunity opp : [SELECT id, Pelican_Order_Number__c FROM Opportunity WHERE Pelican_Order_Number__c IN :pelicanOrderList AND recordTypeId = :autodeskOppRecordTypeId]) {
                aoToOrderMap.put(opp.Pelican_Order_Number__c, opp.id);
            }
        }
        //DAASN-19496 end
        System.debug('renewalKeyWithClisList====' + renewalKeyWithClisList);
        System.debug('cliIdRenewalKeyMap----' + cliIdRenewalKeyMap);
        //cliIdRenewalKeyMap Maps the CLI Ids with renewal Key

        renewalKeySet.addAll(cliIdRenewalKeyMap.values());
        checkIfOpptyExistOrNot(renewalKeySet);
        createOpptyAndLineItems();
        createOpportunityLineItems();
        associateServiceContractWithOpportunity();
        populateOpportunityPrice();

        return renewalKeyOpportunityMap.values();
    }

    // To check if existing Oppty exist for Renewal key or not
    public static void checkIfOpptyExistOrNot(Set<String> renewalKeySet) {
        //Querying for existing opportunities with same renewal keys
        //DAASN-19496: added Sales_Opportunity__c to query
        //DAASN-19648: added Originated_from_LC__c to query
        if (!renewalKeySet.isEmpty()) {
            for (Opportunity opp : [
                SELECT Name, Id, isClosed, currencyisocode, StageName, Originated_from_LC__c, Opportunity_Number__c, CloseDate, Asset_End_Date__c, Partner_Account__c, Opportunity_Key__c, opportunity_classification__c, SoldToAccount__c, New_Reseller_Account__c, Account.Country_Picklist__c, SoldToAccount__r.Country_Picklist__c, Integration_Status__c, Error__c, Expiry_Date__c, Owner.UserName, Renewal_Type__c, Agreement_Numbers__c, Parent_Opportunity_Id__c, Lock_Opportunity__c, Expiration_Date__c, Sales_Opportunity__c
                FROM Opportunity
                WHERE RecordtypeId = :subscriptionOppRecordTypeId AND Opportunity_Key__c IN :renewalKeySet AND isClosed = FALSE
            ]) {
                renewalKeyOpportunityMap.put(opp.Opportunity_Key__c + '=' + opp.CurrencyIsoCode, opp); // CRMEAGLE-1427 - Added by Utkarsh
            }
        }
        System.debug('renewalKeyOpportunityMap---->' + renewalKeyOpportunityMap);
    }

    /**
     *  Description       : method to create error message map with CLI Id and remove the CLIs from map
     **/
    @TestVisible
    private static void handleValidationError(ContractLineItem cli, String errorMessage, String errorCode) {
        if (System.isBatch()) {
            if (Sf.settings.getBoolean('DROM_LogValidationErrorAsException', false)) {
                DROM_RenewalOpportunityUtility.logBatchException(errorMessage, null, cli.Id, 'SUBS_OpportunityCreationService', 'validateClis', 'SUBS_OpportunityCreationBatch', 'ContractLineItem', errorCode, 'DROS0', batchContext);
            }
            cliErrorMessageMap.put(cli.Id, errorMessage);
        } else {
            cliErrorMessageMap.put(cli.Id, errorMessage);
        }
        cliMap.remove(cli.Id);
    }

    //CRMEAGLE-2043
    public static void getCliAtrValues(List<ContractLineitem> eligibleContractLineItems) {
        Map<string, List<ContractLineitem>> storeOrderNoWithCLI = new Map<string, List<ContractLineitem>>();
        Map<String, String> cliSubsIdMap = new Map<String, String>();
        List<TransactionEventTriggerHelperExtension.Order> storeResponse;
        for (ContractLineitem cli : eligibleContractLineItems) {
            if (!storeOrderNoWithCLI.containsKey(String.valueOf(cli.Pelican_Order__c))) {
                storeOrderNoWithCLI.put(String.valueOf(cli.Pelican_Order__c), new List<ContractLineitem>{ cli });
            } else {
                storeOrderNoWithCLI.get(String.valueOf(cli.Pelican_Order__c)).add(cli);
            }
            cliSubsIdMap.put(cli.Pelican_Subscription_Id__c, cli.Id);
        }
        if (storeOrderNoWithCLI.size() > 0) {
            for (string orderNumber : storeOrderNoWithCLI.keyset()) {
                storeResponse = SUBS_GetOrderDetailsController.getOrderDetailViaAtrBatch(orderNumber);
                if (storeResponse != null) {
                    for (TransactionEventTriggerHelperExtension.Order order : storeResponse) {
                        if (storeOrderNoWithCLI.containsKey(order.id)) {
                            for (TransactionEventTriggerHelperExtension.LineItem lineItem : order.lineItems) {
                                String subscriptionId = String.valueOf(lineItem.subscriptionInfo.subscriptionId);
                                if (cliSubsIdMap.containsKey(subscriptionId)) {
                                    Date subStartDate = Date.ValueOf(lineItem.subscriptionInfo.subscriptionPeriodStartDate);
                                    Date subEndDate = Date.ValueOf(lineItem.subscriptionInfo.subscriptionPeriodEndDate);
                                    Integer differenceInDays = subStartDate.daysBetween(subEndDate) + 1;
                                    Decimal atrValue = (lineItem.Price.endUserPrice * 365) / differenceInDays;
                                    storeSubIdWithATRvalue.put(subscriptionId, atrValue);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public static void createOpptyAndLineItems() {
        List<Opportunity> subscriptionOppList = new List<Opportunity>();
        Map<Id, Opportunity> opptyUpdateMap = new Map<Id, Opportunity>();
        //SUBS_OpportunityCreationUtility.getOpportunityCurrency();
        if (!cliMap.values().isEmpty()) {
            Opportunity opp;
            for (ContractLineItem cli : cliMap.values()) {
                //opp = renewalKeyOpportunityMap.get(cliIdRenewalKeyMap.get(cli.Id));
                opp = renewalKeyOpportunityMap.get(cliIdRenewalKeyMap.get(cli.Id) + '=' + cli.Subscription_Currency_Code__c); // CRMEAGLE-1427 - Added by Utkarsh
                System.debug('Oppty----' + Opp);
                System.debug('cli code----' + cli.Subscription_Currency_Code__c);
                //if (opp == null) {
                if (opp == null || (opp != null && opp.CurrencyIsoCode <> cli.Subscription_Currency_Code__c)) {
                    // CRMEAGLE-1427 - Added by Utkarsh
                    System.debug('New Oppty----' + Opp);
                    opp = createOpportunities(cli);
                    if (aoToOrderMap.containsKey(cli.Pelican_Order__c) && aoToOrderMap.get(cli.Pelican_Order__c) != null) {
                        opp.Sales_Opportunity__c = aoToOrderMap.get(cli.Pelican_Order__c); //DAASN-19496
                    }
                    subscriptionOppList.add(opp);
                    cliIdOpportunityMap.put(cli.Id, opp);
                } else {
                    //Opp.Service_Contract__c = cli.ServiceContractId;
                    if (opp.Lock_Opportunity__c) {
                        //ENHSLSMKT-1660: Added condition to check locked Oppty
                        handleValidationError(cli, OPPORTUNITY_LOCKED_ERROR, OPPORTUNITY_LOCKED_ERROR);
                        opp.DROM_Pending_Updates__c = true;
                        opptyUpdateMap.put(opp.Id, opp);
                    } else {
                        if (opp.CloseDate > cli.Actual_End_Date__c) {
                            opp.CloseDate = cli.Actual_End_Date__c;
                            Opp.Name = SUBS_OpportunityCreationUtility.getSubscriptionOppName(cli, Opp);
                        }
                        if (opp.Expiration_Date__c < cli.Termination_Date__c.addDays(-1)) {
                            opp.Expiration_Date__c = cli.Termination_Date__c.addDays(-1);
                            opp.Expiry_Date__c = opp.Expiration_Date__c;
                        }
                        cliIdOpportunityMap.put(cli.Id, opp);
                        // DAASN-19496 start
                        if (opp.Sales_Opportunity__c == null && aoToOrderMap.containsKey(cli.Pelican_Order__c) && aoToOrderMap.get(cli.Pelican_Order__c) != null) {
                            opp.Sales_Opportunity__c = aoToOrderMap.get(cli.Pelican_Order__c);
                        }
                        // DAASN-19496 end
                        //DAASN-19648 - added for LC tagging : existing opty , if new line item is LC and opty is not tagged as LC already
                        system.debug('>>> lcDuraMap.containsKey(olItem.Term__c) ' + SUBS_OpportunityCreationUtility.lcDuraMap);
                        string term;
                        if (cli.Term__c == 'A01') {
                            term = 'Annual';
                        } else if (cli.Term__c == 'A06') {
                            term = '3-Year';
                        }
                        opp.Term__c = term;
                        if (cli.LC_Originated_Subscription__c && !opp.Originated_from_LC__c && string.isNotBlank(term) && SUBS_OpportunityCreationUtility.lcDuraMap.containsKey(term) && cli.StartDate != null && cli.StartDate.addMonths(SUBS_OpportunityCreationUtility.lcDuraMap.get(term)) >= Date.today()) {
                            Opp.Originated_from_LC__c = true;
                        }
                        //DAASN-19648 - added for LC tagging
                    }
                    if (!opptyUpdateMap.ContainsKey(opp.Id)) {
                        opptyUpdateMap.put(opp.Id, opp);
                    }
                }
            }
            System.debug('subscriptionOppList-----' + subscriptionOppList.size());
            List<OpportunityContactRole> opptyContactRole = new List<OpportunityContactRole>();
            List<Opportunity> updateOpportunityList = new List<Opportunity>(); //DAASN-19646:using new map as opptyUpdateMap have null as keys
            if (subscriptionOppList != null && subscriptionOppList.size() > 0) {
                if (isBatch) {
                    handleOpportunityDML(subscriptionOppList, true);
                } else {
                    MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
                    Database.Insert(subscriptionOppList, true);
                }
                //DAASN-19454:changes starts
                set<Id> opportunityIdSet = new Set<Id>();
                for (opportunity oppty : subscriptionOppList) {
                    if (String.isNotBlank(oppty.Id)) {
                        opportunityIdSet.add(oppty.Id);
                    }
                    if (oppty.Parent_Opportunity_Id__c != null) {
                        //DAASN-19646:changes starts
                        updateOpportunityList.add(new Opportunity(Id = oppty.Id, Opportunity_Key__c = oppty.Opportunity_Key__c + '=' + oppty.Id));
                    } //DAASN-19646:changes ends
                } //end of for loop
                if (!opportunityIdSet.isEmpty()) {
                    PSCProcessCollabhubEvents.insertCollabHubEvents(opportunityIdSet, 'Opportunity'); //DAASN-19632
                    OpportunityTriggerServices.addRenewalOwnerToAIROpptyAccountTeam(opportunityIdSet);
                } //DAASN-19454:changes ends
                for (Opportunity oppty : subscriptionOppList) {
                    opptyContactRole.add(createOpportunityContactRole(oppty));
                }
                if (!opptyContactRole.isEmpty()) {
                    insert opptyContactRole;
                }
            }

            if (opptyUpdateMap != null && opptyUpdateMap.size() > 0) {
                if (isBatch) {
                    handleOpportunityDML(opptyUpdateMap.values(), false);
                } else {
                    MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
                    Database.update(opptyUpdateMap.values(), true);
                }
            }
            if (!updateOpportunityList.isEmpty()) {
                //DAASN-19646:changes starts
                update updateOpportunityList;
            } //DAASN-19646:changes ends
            SUBS_OpportunityCreationService.handleBatchException();
            SUBS_OpportunityCreationService.handleContractLineItemUpdate();
            SUBS_OpportunityCreationService.createOpportunityShareRecord(subscriptionOppList, opptyUpdateMap);
        }
    }

    public static void handleBatchException() {
        if (isBatch) {
            //filtering out Cli Ids for which the Oppty insert/update failed and logging errors.
            Opportunity temp;
            for (ContractLineItem cli : cliMap.values()) {
                temp = cliIdOpportunityMap.get(cli.Id);
                if (temp != null && temp.Integration_Status__c == DROM_ConstantsUtility.DROM_OPPORTUNITY_DML_ERROR) {
                    DROM_RenewalOpportunityUtility.logBatchException(temp.Error__c, null, cli.Id, 'SUBS_OpportunityCreationService', 'createOpportunities', 'SUBS_OpportunityCreationBatch', 'ContractLineItem', DROM_ConstantsUtility.OPPORTUNITY_DML_ERROR, 'DROS1', batchContext);
                    cliMap.remove(cli.Id);
                    cliErrorMessageMap.put(cli.Id, temp.Error__c);
                } else if (temp == null || temp.Id == null) {
                    DROM_RenewalOpportunityUtility.logBatchException(null, null, cli.Id, 'SUBS_OpportunityCreationService', 'createOpportunities', 'SUBS_OpportunityCreationBatch', 'ContractLineItem', DROM_ConstantsUtility.OPPORTUNITY_UNKNOWN_ERROR, 'DROS1', batchContext);
                    cliMap.remove(cli.Id);
                    cliErrorMessageMap.put(cli.Id, temp.Error__c);
                }
            }
        }
    }

    public static void handleContractLineItemUpdate() {
        List<ContractLineItem> oppUpdateOnCLi = new List<ContractLineItem>();
        for (ContractLineItem cli : cliMap.values()) {
            //if (cli.Opportunity__c != null && cli.Opportunity__c != renewalKeyOpportunityMap.get(cliIdRenewalKeyMap.get(cli.Id)).Id) {
            if (cli.Opportunity__c != null && cli.Opportunity__c != renewalKeyOpportunityMap.get(cliIdRenewalKeyMap.get(cli.Id) + '=' + cli.Subscription_Currency_Code__c).Id) {
                // CRMEAGLE-1427 - Added by Utkarsh
                cli.Previous_Opportunity__c = cli.Opportunity__c;
            }
            //cli.Opportunity__c = renewalKeyOpportunityMap.get(cliIdRenewalKeyMap.get(cli.Id)).Id;
            cli.Opportunity__c = renewalKeyOpportunityMap.get(cliIdRenewalKeyMap.get(cli.Id) + '=' + cli.Subscription_Currency_Code__c).Id; // CRMEAGLE-1427 - Added by Utkarsh
            cli.Opportunity_Creation_Error__c = null;
            //DAASN-19646: changes starts
            //Opportunity oppty = renewalKeyOpportunityMap.get(cliIdRenewalKeyMap.get(cli.Id));
            Opportunity oppty = renewalKeyOpportunityMap.get(cliIdRenewalKeyMap.get(cli.Id) + '=' + cli.Subscription_Currency_Code__c); // CRMEAGLE-1427 - Added by Utkarsh
            if (oppty.Parent_Opportunity_Id__c != null) {
                //Parent_Opportunity_Id__c is populated in createOpportunities method
                cli.Parent_Opportunity__c = oppty.Parent_Opportunity_Id__c;
                cli.Split_Opportunity__c = oppty.Id;
            } else {
                cli.Parent_Opportunity__c = null;
                cli.Split_Opportunity__c = null;
            } //DAASN-19646: changes ends
            oppUpdateOnCLi.add(cli);
        }
        if (oppUpdateOnCLi != null && oppUpdateOnCLi.size() > 0) {
            if (isBatch) {
                handleCliDML(oppUpdateOnCLi);
            } else {
                ADSK_ContractLineItemTriggerHandler.skipADSKContractLineItemTrigger = true;
                Database.update(oppUpdateOnCLi, true);
            }
        }
    }

    public static OpportunityContactRole createOpportunityContactRole(Opportunity oppty) {
        OpportunityContactRole contactRole = new OpportunityContactRole();
        contactRole.IsPrimary = true;
        contactRole.ContactId = renewalKeyWithClisList.get(Oppty.Opportunity_Key__c)[0].Purchaser__c;
        contactRole.Role = 'Purchaser';
        contactRole.OpportunityId = Oppty.Id;
        return contactRole;
    }

    public static void createOpportunityShareRecord(List<Opportunity> subscriptionOppList, Map<Id, Opportunity> opptyUpdateMap) {
        //Creating Shares
        List<Id> opportunityIds = new List<Id>();
        List<Id> accountIds = new List<Id>();
        Map<Id, Opportunity> opportunityIdMap = new Map<id, Opportunity>(subscriptionOppList);
        opportunityIdMap.putAll(opptyUpdateMap);

        for (Opportunity oppty : renewalKeyOpportunityMap.values()) {
            if (oppty.opportunity_classification__c != 'Autodesk') {
                if (oppty.Partner_Account__c != null && oppty.Id != null) {
                    opportunityIds.add(oppty.Id);
                    accountIds.add(oppty.Partner_Account__c);
                }
            }
        }
        Opportunity oppty;

        //Set of OpportunityId-AccountId for which shares have not been inserted
        Set<String> failedOppAccounts = new Set<String>();
        failedOppAccounts = SUBS_TransitionSubscriptionOpptyUtility.createOpportunityShare(opportunityIds, accountIds, groupAccountMap, batchContext, isBatch);
    }

    /**
     *   Description      : update Assets and create Batch Transaction Logs in case of exception
     **/
    @TestVisible
    private static void handleCliDML(List<ContractLineItem> cliInsertList) {
        ADSK_ContractLineItemTriggerHandler.skipADSKContractLineItemTrigger = true;
        Database.SaveResult[] results = Database.update(cliInsertList, false);
        String message = '';
        String errorType;
        Integer i = 0;
        for (Database.SaveResult result : results) {
            if (!result.isSuccess()) {
                message = 'Error in updating Contract line Item ' + cliInsertList[i].Id + ' with Opportunity - ' + cliInsertList[i].Autodesk_Opportunity__c + '\n' + 'Error Message : \n';
                for (Database.Error err : result.getErrors()) {
                    message += err.getStatusCode() + ' : ' + err.getMessage().replaceall(',', ' -') + '\n';
                    errorType = '' + err.getStatusCode();
                }
                DROM_RenewalOpportunityUtility.logBatchException(message, null, cliInsertList[i].Id, 'SUBS_OpportunityCreationService', 'createOpptyAndLineItems', 'SUBS_OpportunityCreationBatch', 'ContractLineItem', errorType, 'DROS6', batchContext);
                cliMap.remove(cliInsertList[i].Id);
                cliErrorMessageMap.put(cliInsertList[i].Id, message);
            }
            i++;
        }
    }

    /**
     *  Description       : Insert/Update Opportunity and create Batch Transaction Log Records in case of exception
     **/
    @TestVisible
    private static void handleOpportunityDML(List<Opportunity> opptyList, Boolean isInsert) {
        Database.SaveResult[] results;
        if (isInsert) {
            MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
            results = Database.insert(opptyList, false);
        } else {
            MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
            results = Database.update(opptyList, false);
        }
        String message = '';
        Integer i = 0;
        for (Database.SaveResult result : results) {
            if (!result.isSuccess()) {
                if (isInsert) {
                    message = DROM_ConstantsUtility.OPPORTUNITY_INSERT_DML_ERROR + opptyList[i].name + '\n' + 'Error Message : \n';
                } else {
                    message = DROM_ConstantsUtility.OPPORTUNITY_UPDATE_DML_ERROR + opptyList[i].name + '\n' + 'Error Message : \n';
                }
                for (Database.Error err : result.getErrors()) {
                    message += err.getStatusCode() + ' : ' + err.getMessage().replaceall(',', ' -') + '\n';
                }
                //This is not actually saved in database. It is just used for identifying records for which the DML failed and for logging errors in the next step.
                opptyList[i].Integration_Status__c = 'DROM Opportunity DML Error';
                opptyList[i].Error__c = message;
            }
            i++;
        }
    }

    public static Opportunity createOpportunities(ContractLineItem cli) {
        Opportunity opp = new Opportunity();
        // calling Utility Method to
        opp = SUBS_OpportunityCreationUtility.createOpportunityRecord(cli);
        opp.Primary_Contact__c = cli.Purchaser__c;
        /** Logic used to enter data in Opportunity  */
        opp.Opportunity_Key__c = cliIdRenewalKeyMap.get(cli.Id);
        if (String.isNotBlank(cli.Subscription_Currency_Code__c)) {
            opp.CurrencyIsoCode = cli.Subscription_Currency_Code__c;
        } else {
            String opptyCurrency = SUBS_OpportunityCreationUtility.getOpportunityCurrency(cli.ServiceContract.Account.Country_Picklist__c);
            if (opptyCurrency == '') {
                //assign the End Customer Account currency
                opp.CurrencyIsoCode = cli.ServiceContract.Account.currencyIsoCode;
            } else {
                //assign the End Customer Account currency from Country__c Object
                opp.CurrencyIsoCode = opptyCurrency;
            }
        }

        opp.CloseDate = SUBS_OpportunityCreationUtility.getLowestActualEndDate(renewalKeyWithClisList.get(cliIdRenewalKeyMap.get(cli.Id)));
        opp.Name = SUBS_OpportunityCreationUtility.getSubscriptionOppName(cli, Opp);
        opp.Expiration_Date__c = SUBS_OpportunityCreationUtility.getLatestTerminationDate(renewalKeyWithClisList.get(cliIdRenewalKeyMap.get(cli.Id))); //opp.CloseDate.addDays(45);
        opp.Expiry_Date__c = opp.Expiration_Date__c; //opp.CloseDate.addDays(45);
        // Assign Oppty Owner
        if ((cli.ServiceContract.Account.Named_Account_Info__c) != null) {
            opp.OwnerId = cli.ServiceContract.Account.OwnerId;
            opp.Last_Owner_Sales_Role__c = cli.ServiceContract.Account.Owner.Sales_Role__c; // DAASN-19524: populating the sales role.
        } else if (SUBS_OpportunityCreationUtility.geoGenericOwnerMap.get(cli.ServiceContract.Account.Geo__c) != null) {
            opp.OwnerId = SUBS_OpportunityCreationUtility.geoGenericOwnerMap.get(cli.ServiceContract.Account.Geo__c).Id;
        } else {
            //Default Owner
            opp.OwnerId = System.label.ROM_GenericRenewalOwnerId;
        }
        // opp.Parent_Opportunity_ID__c = cli.Parent_Opportunity__c; //DAASN-19646:added changes for Split // Commented based on story DAASN-25284

        //DAASN-19648 - added for LC tagging : new opty and if line item is LC and duration qualifies
        system.debug('>>> lcDuraMap.containsKey(olItem.Term__c) ' + SUBS_OpportunityCreationUtility.lcDuraMap);
        string term;
        if (cli.Term__c == 'A01') {
            term = 'Annual';
        } else if (cli.Term__c == 'A06') {
            term = '3-Year';
        }
        opp.Term__c = term;
        opp.StageName = 'Stage 1';
        //opp.Status__c = 'Open';
        if (cli.LC_Originated_Subscription__c && string.isNotBlank(term) && SUBS_OpportunityCreationUtility.lcDuraMap.containsKey(term) && cli.StartDate != null && cli.StartDate.addMonths(SUBS_OpportunityCreationUtility.lcDuraMap.get(term)) >= Date.today()) {
            Opp.Originated_from_LC__c = true;
        }
        //DAASN-19648 - added for LC tagging
        opp.Is_Multi_Currency_Subs_Opty__c = cli.ServiceContract.Account.Country_Lookup__r.Default_Currency__c != cli.ServiceContract.Account.Country_Lookup__r.Alternate_Currency__c; // CRMEAGLE-1521 - Multi-Currency Checkbox
        renewalKeyOpportunityMap.put(opp.Opportunity_Key__c + '=' + opp.CurrencyIsoCode, opp); // CRMEAGLE-1427 - Added by Utkarsh
        return Opp;
    }

    // @description : to create OpportunityLineIem for ODM Clis
    public static void createOpportunityLineItems() {
        Set<String> autodeskCliIds = new Set<String>();
        Set<String> prodLineCodeSet = new Set<String>();
        //  Set<String> currencyCodeSet = new Set<String>(); // CRMEAGLE-1001
        //Price Book Entries are queried based on SoldTo Account Currency Code and Asset Product Line Code
        for (ContractLineItem cli : cliMap.values()) {
            if (cli.OfferingId__r.ProductCode != null) {
                prodLineCodeSet.add(cli.OfferingId__r.ProductCode);
            }
            if (endCustomerAccountTypes.contains(cli.ServiceContract.Account.Type) && noDealerCSNs.contains(cli.Reseller_Account__r?.Account_CSN__c)) {
                // key = getAutodeskRenewalKey(cli, anniversaryDate);
                autodeskCliIds.add(cli.Id);
            }
        }

        Map<id, String> opportunityProductCode = new Map<id, String>();
        // Added field for ENHSLSMKT-353
        if (!prodLineCodeSet.isEmpty()) {
            // query on products to get subscription type
            for (Product2 oProduct : [SELECT id, Subscr_Type__c, IsDelCAM__c FROM Product2 WHERE id IN :prodLineCodeSet]) {
                // store subscr type in map with product id
                opportunityProductCode.put(oProduct.id, oProduct.Subscr_Type__c);
            }
        }

        List<OpportunityLineItem> oliItemList = new List<OpportunityLineItem>();
        //Clis for which Opportunity line items already exist
        Map<Id, OpportunityLineItem> cliIdExistingOliMap = new Map<Id, OpportunityLineItem>();
        Set<Id> opportunityIds = new Set<Id>();
        for (Opportunity opp : cliIdOpportunityMap.values()) {
            opportunityIds.add(opp.Id);
        }
        //If OpportunityLineItem that already exists belongs to valid Opportunity then we don't need to create new OpportunityLineItem. Existing one can be reused.
        //If OpportunityLineItem that already exists belongs to invalid Opportunity then we have to create new OpportunityLineItem. Also the "Pending for Updates" flag would be set on Invalid Opportunity, so that it would be processed by batch job and the OpportunityLineItem would either be deleted or its status would be updated.
        for (OpportunityLineItem existingOli : [SELECT Id, PriceBookEntryId, Contract_Line_Item__c, Contract_Line_Item__r.Asset__c, OpportunityId FROM OpportunityLineItem WHERE Contract_Line_Item__c IN :cliMap.values() AND Opportunity.RecordTypeId = :subscriptionOppRecordTypeId ORDER BY CreatedDate DESC]) {
            if (opportunityIds.contains(existingOli.opportunityId)) {
                cliIdExistingOliMap.put(existingOli.Contract_Line_Item__c, existingOli);
            }
        }
        System.debug('cliIdExistingOliMap' + cliIdExistingOliMap);
        System.debug('cliIdOpportunityMap-- ' + cliIdOpportunityMap);
        //try{
        OpportunityLineItem olItem;
        String directPriceBookName = DROM_RenewalOpportunityUtility.getSetting('DirectPriceBookName', 'Direct');
        String indirectPriceBookName = DROM_RenewalOpportunityUtility.getSetting('IndirectPriceBookName', 'Indirect');
        String resalePriceBookName = DROM_RenewalOpportunityUtility.getSetting('ResalePriceBookName', 'Resale');
        for (ContractLineItem cli : cliMap.values()) {
            if (!cliIdExistingOliMap.containsKey(cli.Id)) {
                id pricebookEntryId;
                Opportunity opp = cliIdOpportunityMap.get(cli.Id);
                System.debug('Opp' + Opp.Id);
                //logic to assign PricebookEntry
                if (opp.Lock_Opportunity__c) {
                    return;
                }
                String pricebookName = (SUBS_OpportunityCreationUtility.isSalesChannelResale(cli)) 
                    ? 'Resale' 
                    : (cli?.Merchant__c != null && cli?.ServiceContract?.Account?.Country_Lookup__r?.ODM_Flag__c == false) 
                    ? indirectPriceBookName 
                    : directPriceBookName;
                pricebookEntryId = pbeMap.get(cli.OfferingId__r.ProductCode + Opp.currencyIsoCode + pricebookName);
                if (pricebookEntryId == null) {
                    return;
                }
                olItem = SUBS_OpportunityCreationUtility.createOpportunityLineItemRecord(cli, pricebookEntryId);
                // direct Assign from Cli
                olItem.OpportunityId = Opp.Id;
                olItem.Support_Level__c = ROM_RenewalOpportunityUtility.getSupportProgram(cli.Entitlement__r.Service_Level__c);
                olItem.Line_Item_ATR__c = storeSubIdWithATRvalue.containsKey(cli.Pelican_Subscription_Id__c) ? storeSubIdWithATRvalue.get(cli.Pelican_Subscription_Id__c) : System.isBatch() ? null : 0;
                oliItemList.add(olItem);
            }
        }
        if (!oliItemList.isEmpty()) {
            oliItemList = SUBS_OpportunityCreationUtility.populateDiscountCategory(oliItemList);
        }
        System.debug('oliItemList' + oliItemList.size());
        if (oliItemList != null && oliItemList.size() > 0) {
            if (isBatch) {
                handleOpportunityLineItemDML(oliItemList);
            } else {
                MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
                MJA_OpportunityUtility.SKIP_OPPORTUNITYLINEITEM_TRIGGER = true;
                Database.Upsert(oliItemList, true);
            }
            System.debug('Op Line Item List' + oliItemList[0].Id);
        }
    }
    /**
     *   Description      : Insert OLI and create Batch Transaction Logs in case of exception
     **/
    @TestVisible
    private static void handleOpportunityLineItemDML(List<OpportunityLineItem> oliItemList) {
        MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
        MJA_OpportunityUtility.SKIP_OPPORTUNITYLINEITEM_TRIGGER = true;
        Database.UpsertResult[] results = Database.upsert(oliItemList, false);
        String message = '';
        Integer i = 0;
        String errorType;
        for (Database.UpsertResult result : results) {
            if (!result.isSuccess()) {
                message = DROM_ConstantsUtility.OLI_DML_ERROR + oliItemList[i].OpportunityId + ' - ' + oliItemList[i].Contract_Line_Item__c + '\n' + 'Error Message : \n';
                errorType = '';
                for (Database.Error err : result.getErrors()) {
                    message += err.getStatusCode() + ' : ' + err.getMessage().replaceall(',', ' -') + '\n';
                    errorType = '' + err.getStatusCode();
                }
                DROM_RenewalOpportunityUtility.logBatchException(message, null, oliItemList[i].Contract_Line_Item__c, 'SUBS_OpportunityCreationService', 'createOpportunityLineItems', 'SUBS_OpportunityCreationBatch', 'ContractLineItem', errorType, 'DROS3', batchContext);
                //filtering out CliIds for which the OpptyLineItem insert failed
                cliMap.remove(oliItemList[i].Contract_Line_Item__c);
                cliErrorMessageMap.put(oliItemList[i].Contract_Line_Item__c, message);
            }
            i++;
        }
    }
    /**
     *   Description      : Associate Service_Contract_Opportunity records with Opportunity and Service Contract
     **/
    private static void associateServiceContractWithOpportunity() {
        Set<Id> opportunityIds = new Set<Id>();
        Set<Id> contractIds = new Set<Id>();
        for (ContractLineItem cli : cliMap.values()) {
            if (cliIdOpportunityMap.get(cli.Id) != null) {
                opportunityIds.add(cliIdOpportunityMap.get(cli.Id).Id);
                contractIds.add(cli.ServiceContractId);
            }
        }
        Set<String> existingAssociations = new Set<String>();
        for (Service_Contract_Opportunity__c so : [SELECT Service_Contract__c, Opportunity__c FROM Service_Contract_Opportunity__c WHERE Service_Contract__c IN :contractIds AND Opportunity__c IN :opportunityIds]) {
            existingAssociations.add((String) so.Service_Contract__c + (String) so.Opportunity__c);
        }
        List<Service_Contract_Opportunity__c> scInsertList = new List<Service_Contract_Opportunity__c>();
        Map<String, Id> scCliIdMap = new Map<String, Id>();
        String scKey;
        for (ContractLineItem cli : cliMap.values()) {
            if (cliIdOpportunityMap.get(cli.Id) != null) {
                if (!existingAssociations.contains((String) cli.ServiceContractId + (String) cliIdOpportunityMap.get(cli.Id).Id)) {
                    scInsertList.add(new Service_Contract_Opportunity__c(Service_Contract__c = cli.ServiceContractId, Opportunity__c = cliIdOpportunityMap.get(cli.Id).Id));
                    scKey = (String) cli.ServiceContractId + (String) cliIdOpportunityMap.get(cli.Id).Id;
                    existingAssociations.add(scKey);
                    scCliIdMap.put(scKey, cli.Id);
                }
            }
        }
        if (scInsertList != null && scInsertList.size() > 0) {
            //In manual process, the entire transaction is failed and rolled back if there is an error. In batch process, errors are logged for the failed records and successful records are processed.
            if (isBatch) {
                handleServiceContractOpportunityDML(scInsertList, scCliIdMap);
            } else {
                Integer i = 1;
                Boolean retry = true;
                while (retry) {
                    try {
                        handleServiceContractInsert(scInsertList, true);
                        break;
                    } catch (Exception ex) {
                        System.debug('>>>>error message>>>' + ex.getMessage());
                        if (ex.getMessage().contains(DROM_ConstantsUtility.UNABLE_TO_LOCK_ROW)) {
                            if (i < retryCount) {
                                i++;
                            } else {
                                throw ex;
                            }
                        } else {
                            throw ex;
                        }
                    }
                }
            }
        }
    }
    private static void handleServiceContractInsert(List<Service_Contract_Opportunity__c> scInsertList, Boolean flag) {
        Database.Insert(scInsertList, flag);
    }
    @TestVisible
    private static void handleServiceContractOpportunityDML(List<Service_Contract_Opportunity__c> scInsertList, Map<String, Id> scCliIdMap) {
        Database.SaveResult[] results = Database.insert(scInsertList, false);
        String message = '';
        String errorType;
        Integer i = 0;
        for (Database.SaveResult result : results) {
            if (!result.isSuccess()) {
                message = DROM_ConstantsUtility.SERVICE_CONTRACT_DML_ERROR + scInsertList[i].Service_Contract__c + ' - ' + scInsertList[i].Opportunity__c + '\n' + 'Error Message : \n';
                for (Database.Error err : result.getErrors()) {
                    message += err.getStatusCode() + ' : ' + err.getMessage().replaceall(',', ' -') + '\n';
                    errorType = '' + err.getStatusCode();
                }
                DROM_RenewalOpportunityUtility.logBatchException(message, null, scCliIdMap.get((String) scInsertList[i].Service_Contract__c + (String) scInsertList[i].Opportunity__c), 'SUBS_OpportunityCreationService', 'associateServiceContractWithOpportunity', 'SUBS_OpportunityCreationBatch', 'ContractLineItem', errorType, 'DROS4', batchContext); //filtering out CliIds the ServiceContractOpportunity record insert failed
                cliMap.remove(scCliIdMap.get((String) scInsertList[i].Service_Contract__c + (String) scInsertList[i].Opportunity__c));
            }
            i++;
        }
    }
    private static void populateOpportunityPrice() {
        Set<Id> opportunityIdSet = new Set<Id>();
        for (ContractLineItem cli : cliMap.values()) {
            if (cliIdOpportunityMap.get(cli.Id) != null) {
                opportunityIdSet.add(cliIdOpportunityMap.get(cli.Id).Id);
            }
        }
        Map<Integer, OpportunityLineItem> mLineIdToOLIRecord = new Map<Integer, OpportunityLineItem>();
        if (opportunityIdSet.isEmpty() == false) {
            for (OpportunityLineItem oli : [SELECT Id, Contract_Line_Item__c, Opportunity.Discount_Approval_Status__c, Product2.OfferingId__c, Line_Item_Action__c, Additional_Discount_Per__c, Intended_Usage__c, Quantity, Access_Model__c, Adjusted_Srp__c, Term__c, Connectivity__c, Service_Plan__c, Billing_Frequency__c, Start_Date__c, New_Term_Start_Date__c, New_Term_End_Date__c, Promotion_Name__c, Total_Discount__c, Additional_Discount_Amount__c, Switch_Price_Condition__c FROM OpportunityLineItem WHERE OpportunityId IN :opportunityIdSet AND (Unit_SRP__c = NULL OR Unit_SRP__c = 0)]) {
                mLineIdToOLIRecord.put(mCLIToLineIdRecord.get(oli.Contract_Line_Item__c), oli);
            }
        }
        if (!System.isFuture() && !System.isBatch() && mLineIdToOLIRecord.isEmpty() == false) {
            SUBS_OpportunityPriceService.mapPriceAndUpdateOpportunityLineItem(lsGCPResponse, mLineIdToOLIRecord);
        }
    }
    public static void validateCliEithPricebookEntryNotFound(Map<Id, ContractLineItem> cliMp) {
        cliMap = SUBS_TransitionSubscriptionOpptyUtility.validateCliEithPricebookEntryNotFound(cliMp, 'ODM'); // CRMEAGLE-1001
    }
}
