public class ContactTriggerHandler implements TriggerInterface {
    
    /**
     * Handles the before insert event for Contact records.
     * 
     * This method checks if there are any duplicate email addresses for Contacts with the same AccountId.
     * If duplicates are found, an error is added to the Contact record to prevent insertion.
     * 
     * @param newItems List of new Contact records being inserted.
     */
    public void BeforeInsert(List<SObject> newItems) {
        Contact contact;
        Set<Id> accIdSet = new Set<Id>();
        List<Contact> conList = new List<Contact>();
        List<Contact> newConList = new List<Contact>();
        Map<Id, Set<String>> accIdemailListMap = new Map<Id, Set<String>>();
        Apex_Helper_Settings__c ccProfileId = Apex_Helper_Settings__c.getValues('Customer Care Service Cloud');
        
        // Cast newItems to Contact and add to newConList
        for (SObject cons : newItems) {
            contact = (Contact)cons;
            newConList.add(contact);
        }
        
        try {
            if (ccProfileId != null && UserInfo.getProfileId().substring(0, 15).contains(ccProfileId.Value__c)) {
                // Collect Account IDs from new Contacts
                for (Contact con : newConList) {
                    accIdSet.add(con.AccountId);
                }
                
                // Query existing Contacts with the same Account IDs
                if (!accIdSet.isEmpty()) {
                    conList = [SELECT Id, FirstName, LastName, Email, AccountId FROM Contact WHERE AccountId IN :accIdSet];
                }
                
                // Map existing Contacts' emails by AccountId
                system.debug('CinlIts-->'+conList);
                if (!conList.isEmpty()) {
                    for (Contact con : conList) {
                        if (accIdemailListMap.containsKey(con.AccountId)) {
                            accIdemailListMap.get(con.AccountId).add(con.Email);
                        } else {
                            accIdemailListMap.put(con.AccountId, new Set<String>());
                            accIdemailListMap.get(con.AccountId).add(con.Email);
                        }
                    }
                }
                
                // Validate new Contacts to avoid duplicates
                for (Contact con : newConList) {
                    if (con.AccountId != null) {
                        if (accIdemailListMap.containsKey(con.AccountId)) {
                            Set<String> cEmailSet = accIdemailListMap.get(con.AccountId);
                            if (cEmailSet.contains(con.Email)) {
                                con.addError('Contact with this email address already exists on the same Account');
                            }
                        }
                    }
                }
            }
        } catch (DmlException e) {
            // Handle DML exceptions
            CCP_Exception_Util.CCP_Exception_Mail(e);
        }
    }
    
    /**
     * Handles the before update event for Contact records.
     * 
     * This method is a placeholder for logic to be executed before Contact records are updated.
     * Currently not implemented.
     * 
     * @param newItems Map of updated Contact records being processed.
     * @param oldItems Map of old Contact records before update.
     */
    public void BeforeUpdate(Map<Id, SObject> newItems, Map<Id, SObject> oldItems) {}
    
    /**
     * Handles the before delete event for Contact records.
     * 
     * This method is a placeholder for logic to be executed before Contact records are deleted.
     * Currently not implemented.
     * 
     * @param oldRecordsList List of Contact records being deleted.
     * @param oldItems Map of Contact records before delete.
     */
    public void BeforeDelete(List<SObject> oldRecordsList, Map<Id, SObject> oldItems) {}
    
    /**
     * Handles the after insert event for Contact records.
     * 
     * This method triggers actions after a new Contact record has been inserted, including assigning 
     * external entities to the Contact. The logic is controlled by a static flag in CaseUtil_CCP.
     * 
     * @param newRecordsList List of new Contact records inserted.
     * @param newItems Map of new Contact records.
     */
    public void AfterInsert(List<SObject> newRecordsList, Map<Id, SObject> newItems) {
        if (!CaseUtil_CCP.AddEntlContact) {
            CaseUtil_CCP.AddEntlContact = true;
            AssignEntltoContact_CCP vInsert_EntlCon = new AssignEntltoContact_CCP();
            vInsert_EntlCon.getDataonInsert(newRecordsList);
        }
        Set<Id> accountIds = new Set<Id>();
        for (SObject obj : newRecordsList) {
            Contact contact = (Contact)obj;
            if (contact.AccountId != null) {
                accountIds.add(contact.AccountId);
            }
        }
        if (!accountIds.isEmpty()) {
            ContactTriggerHelper.updateAccountContactCounts(accountIds);
        }
    }
    
    /**
     * Handles the after update event for Contact records.
     * 
     * This method triggers actions after a Contact record has been updated. It updates related entities
     * and performs additional operations as needed. It also updates WeChat follower information.
     * 
     * @param newRecordsMap Map of updated Contact records after update.
     * @param oldRecordsMap Map of Contact records before update.
     */
    public void AfterUpdate(Map<Id, SObject> newRecordsMap, Map<Id, SObject> oldRecordsMap) {
        Contact Con;
        Map<Id, Contact> newConMap = new Map<Id, Contact>();
        Map<Id, Contact> oldConMap = new Map<Id, Contact>();
        List<Contact> newConList = new List<Contact>();
        
        // Populate newConMap and newConList
        for (SObject cons : newRecordsMap.values()) {
            Con = (Contact)cons;
            newConMap.put(Con.Id, Con);
            newConList.add(Con);
        }
        
        // Populate oldConMap
        for (SObject oldcons : oldRecordsMap.values()) {
            Con = (Contact)oldcons;
            oldConMap.put(Con.Id, Con);
        }
        if (!CaseUtil_CCP.AddEntlContact) {
            CaseUtil_CCP.AddEntlContact = true;
            AssignEntltoContact_CCP vUpdate_EntlCon = new AssignEntltoContact_CCP();
            vUpdate_EntlCon.getDataonUpdate(oldConMap, newConMap);
            vUpdate_EntlCon.updatePQAssigneeonContact(newConList, oldConMap);
        }
        
        // Update WeChat follower information
        WeChatFollowerCls.afterContactUpdate(newConMap, oldConMap);
        
        Set<Id> accountIds = new Set<Id>();
        for (Contact newContact : newConList) {
            Contact oldContact = oldConMap.get(newContact.Id);
            if (newContact.AccountId != oldContact.AccountId) {
                if (oldContact.AccountId != null) {
                    accountIds.add(oldContact.AccountId);
                }
                if (newContact.AccountId != null) {
                    accountIds.add(newContact.AccountId);
                }
            }
        }
        if (!accountIds.isEmpty()) {
            ContactTriggerHelper.updateAccountContactCounts(accountIds);
        }
    }
    
    /**
     * Handles the after delete event for Contact records.
     * 
     * This method is a placeholder for logic to be executed after Contact records are deleted.
     * Currently not implemented.
     * 
     * @param oldItems Map of Contact records that were deleted.
     */
    public void AfterDelete(Map<Id, SObject> oldItems) {
        Set<Id> accountIds = new Set<Id>();
        for (SObject obj : oldItems.values()) {
            Contact contact = (Contact)obj;
            if (contact.AccountId != null) {
                accountIds.add(contact.AccountId);
            }
        }
        if (!accountIds.isEmpty()) {
            ContactTriggerHelper.updateAccountContactCounts(accountIds);
        }
    }
    
    /**
     * Handles the after undelete event for Contact records.
     * 
     * This method is a placeholder for logic to be executed after Contact records are undeleted.
     * Currently not implemented.
     * 
     * @param newRecordsList List of Contact records that were undeleted.
     * @param newItems Map of undeleted Contact records.
     */
    public void AfterUndelete(List<SObject> newRecordsList, Map<Id, SObject> newItems) {
        
    }
    
    
}
