/*
 * Company : Hanwaha Qcells.
 * Date : 05/01/2022
 * Author : Rahul Mishra
 * Description : Task handler class to filter out task record for notifications
 * History : Updated on Sept 23rd 2023 for FP-990
 * @last modified on  : 03-17-2025
 * @last modified by  : Bhaskar Ray
**/

public without sharing class Enfin_TaskHandler {

    /**
    * @description method if task is updated
    * @author Nishant Kumar | 07-25-2024 
    * @param lstNewTask 
    * @param oldTask 
    **/
    public static void onAfterUpdate(List < Task > lstNewTask, Map < Id, Task > oldTask) {
        DateTime timeNow;
        String cronExp;
        Set < Id > setOfContactIds = new Set < Id > ();
        Map < id, clcommon__Party__c > mapOfContactIdToParty = new Map < Id, clcommon__Party__c > ();
        List < Task > lstOfTasks = new List < Task > ();
        List < genesis__Applications__c > applicationList = new List < genesis__Applications__c > ();
        Set < Id > setOfApplicationId = new Set < Id > ();
        Map < Id, Set < Id >> mapOfAppIdToTaskId = new Map < Id, Set < Id >> ();
        Set<Id> appIdForSendingPIEmailSet = new Set<Id>();
        Date launchDate = Date.valueOf(Label.Project_30_Launch_date);
        OriginateUtility objOrigUtility = new OriginateUtility();
        List<genesis__Application_Note__c> notesList = new List<genesis__Application_Note__c> ();
        List<Id> appIdList = new List<Id>();
        List<Id> confirmationCallContactList  = new List<Id>();
        List<Id> enhancedMtwoCallContactList  = new List<Id>();
        List<genesis__Applications__c> taskApplicationList = new List<genesis__Applications__c>();
        try { 


            for (Task tsk: lstNewTask) {
                if (String.isNotBlank(tsk.Status) && tsk.Status != oldTask.get(tsk.Id).Status) {
                    if ((tsk.Subject == OriginateConstantValues.LOAN_CONFIRMATION_CALL || tsk.Subject.equalsIgnoreCase(OriginateConstantValues.TPO_CONFIRMATION_CALL) || tsk.Subject.equalsIgnoreCase(OriginateConstantValues.MENTIS_TPO_CONFIRMATION_CALL)) &&
                        (tsk.Status == OriginateConstantValues.TASK_UNABLE_TO_CONTACT || tsk.Status == OriginateConstantValues.TASK_LOAN_CONFIRMATION || tsk.Status == OriginateConstantValues.MANUAL_REVIEW_APPROVED ||tsk.Status == OriginateConstantValues.MANUAL_REVIEW_DECLINED ||
                            tsk.Status == OriginateConstantValues.READY_FOR_SECOND_ATTEMPT || tsk.Status == OriginateConstantValues.READY_FOR_SECOND_AUTOMATED_ATTEMPT || tsk.status == OriginateConstantValues.PENDING_LOAN_CONFIRMATION ||
                            tsk.Status == OriginateConstantValues.LOAN_CONFIRMATION_FAILED)) {
                        setOfContactIds.add(tsk.WhoId);
                        lstOfTasks.add(tsk);

                    } else if ((tsk.Subject.equalsIgnoreCase(OriginateConstantValues.ENHANCED_MTWO) || tsk.Subject.equalsIgnoreCase(OriginateConstantValues.TPO_ENHANCED_MTWO)) &&
                        ((tsk.Status.equalsIgnoreCase(OriginateConstantValues.READY_FOR_SECOND_ATTEMPT) || tsk.Status.equalsIgnoreCase(OriginateConstantValues.READY_FOR_SECOND_AUTOMATED_ATTEMPT)) ||
                            tsk.Status.equalsIgnoreCase(OriginateConstantValues.PENDING_HO_CONFIRMATION))) {
                        setOfContactIds.add(tsk.WhoId);
                        lstOfTasks.add(tsk);
                    }

                    if (tsk.genesis__Application__c != null){
                        setOfApplicationId.add(tsk.genesis__Application__c);
                    }
                    if((tsk.Subject == OriginateConstantValues.LOAN_CONFIRMATION_CALL 
                        || tsk.Subject.equalsIgnoreCase(OriginateConstantValues.TPO_CONFIRMATION_CALL) 
                        || tsk.Subject.equalsIgnoreCase(OriginateConstantValues.MENTIS_TPO_CONFIRMATION_CALL)) 
                        && (tsk.status == OriginateConstantValues.PENDING_LOAN_CONFIRMATION)){
                            if(tsk.genesis__Application__c != null){
                                confirmationCallContactList.add(tsk.WhoId);
                                appIdList.add(tsk.genesis__Application__c);
                            }
                    }
                    if((tsk.Subject.equalsIgnoreCase(OriginateConstantValues.ENHANCED_MTWO) || tsk.Subject.equalsIgnoreCase(OriginateConstantValues.TPO_ENHANCED_MTWO)) &&
                        (tsk.Status.equalsIgnoreCase(OriginateConstantValues.PENDING_HO_CONFIRMATION))){
                            if(tsk.genesis__Application__c != null){
                                enhancedMtwoCallContactList.add(tsk.WhoId);
                                appIdList.add(tsk.genesis__Application__c);
                            }
                    }
                     if((tsk.Subject.equalsIgnoreCase(OriginateConstantValues.PI_MANDATORY_CONFIRMATION_CALL)) &&
                        (tsk.Status.equalsIgnoreCase(OriginateConstantValues.TASK_LOAN_CONFIRMATION))){
                            if(tsk.genesis__Application__c != null){
                                setOfContactIds.add(tsk.WhoId);
                                lstOfTasks.add(tsk);
                                appIdList.add(tsk.genesis__Application__c);
                            }
                    }
                }
            }


            for (clcommon__Party__c party: [Select Id, genesis__Application__r.genesis__Status__c, genesis__Application__c, Active_Application__r.genesis__Application_Submission_Date__c, Active_Application__r.genesis__Loan_Amount__c,genesis__Application__r.Contract_Type__c, Active_Application__r.genesis__APR__c, clcommon__Contact__c, clcommon__Contact__r.Phone, clcommon__Contact__r.FirstName, clcommon__Contact__r.Email, clcommon__Account__r.SMS_Opt_in__c from clcommon__Party__c where clcommon__Contact__c =: setOfContactIds]) {
                mapOfContactIdToParty.put(party.clcommon__Contact__c, party);
            }

            if (!setOfApplicationId.isEmpty()) {

                for (Task tsk: [Select Id, 
                                        Status, 
                                        Subject, 
                                        genesis__Application__r.Queues__c,
                                        genesis__Application__c 
                                        FROM Task 
                                        WHERE genesis__Application__c =: setOfApplicationId
                                        AND subject IN(: OriginateConstantValues.LOAN_CONFIRMATION_CALL,: OriginateConstantValues.TPO_CONFIRMATION_CALL,: OriginateConstantValues.MENTIS_TPO_CONFIRMATION_CALL, :OriginateConstantValues.PI_MANDATORY_CONFIRMATION_CALL)  
                                        AND STATUS NOT IN(: OriginateConstantValues.TASK_LOAN_CONFIRMATION,: OriginateConstantValues.LOAN_CONFIRMATION_FAILED,: OriginateConstantValues.TASK_UNABLE_TO_CONTACT,: OriginateConstantValues.NO_ACTION_NEEDED) 
                                        WITH SYSTEM_MODE
                                        ORDER BY createdDate desc
                    ]) {

                    set < Id > setOfTasksId = new Set < id > ();
                    if (!mapOfAppIdToTaskId.containsKey(tsk.genesis__Application__c)) {
                        setOfTasksId.add(tsk.Id);
                        mapOfAppIdToTaskId.put(tsk.genesis__Application__c, setOfTasksId);
                    } else {
                        setOfTasksId = mapOfAppIdToTaskId.get(tsk.genesis__Application__c);
                        setOfTasksId.add(tsk.Id);
                        mapOfAppIdToTaskId.put(tsk.genesis__Application__c, setOfTasksId);

                    }
                }
            }

            for (Task tsk: lstOfTasks) {
                if (mapOfContactIdToParty.containsKey(tsk.WhoId)) {

                    Map < Id, clcommon__Party__c > partyMap = new Map < Id, clcommon__Party__c > ();
                    partyMap.put(tsk.WhoId, mapOfContactIdToParty.get(tsk.WhoId));
                    if (tsk.Subject.equalsIgnoreCase(OriginateConstantValues.LOAN_CONFIRMATION_CALL)) {
                        if (tsk.Status == OriginateConstantValues.TASK_UNABLE_TO_CONTACT && mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__r.Contract_Type__c == System.Label.Contract_Type_English) {
                            if(mapOfContactIdToParty.get(tsk.WhoId).Active_Application__r.genesis__Application_Submission_Date__c < launchDate ){
                                WelcomeCallsNotificationHandler.sendNotification(partyMap, OriginateConstantValues.WELCOME_CALL_NO_ANSWER_EMAIL_Old);
                            }else if(mapOfContactIdToParty.get(tsk.WhoId).Active_Application__r.genesis__Application_Submission_Date__c >= launchDate){
                                WelcomeCallsNotificationHandler.sendNotification(partyMap, OriginateConstantValues.WELCOME_CALL_NO_ANSWER_EMAIL);
                            } 
                        } else if (tsk.Status == OriginateConstantValues.TASK_UNABLE_TO_CONTACT && mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__r.Contract_Type__c == System.Label.Contract_Type_Spanish) {
                            if(mapOfContactIdToParty.get(tsk.WhoId).Active_Application__r.genesis__Application_Submission_Date__c < launchDate ){
                                WelcomeCallsNotificationHandler.sendNotification(partyMap, OriginateConstantValues.SPANISH_WELCOME_CALL_NO_ANSWER_EMAIL_Old);
                            }else if(mapOfContactIdToParty.get(tsk.WhoId).Active_Application__r.genesis__Application_Submission_Date__c >= launchDate){
                                WelcomeCallsNotificationHandler.sendNotification(partyMap, OriginateConstantValues.SPANISH_WELCOME_CALL_NO_ANSWER_EMAIL);
                            } 
                        }else if (tsk.Status == OriginateConstantValues.TASK_LOAN_CONFIRMATION) {
                            if(mapOfContactIdToParty.get(tsk.WhoId).Active_Application__r.genesis__Application_Submission_Date__c < launchDate && mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__r.Contract_Type__c == System.Label.Contract_Type_English ){
                                WelcomeCallsNotificationHandler.sendNotification(partyMap, OriginateConstantValues.WELCOME_CALL_RECAP_EMAIL_Old);
                            }else if(mapOfContactIdToParty.get(tsk.WhoId).Active_Application__r.genesis__Application_Submission_Date__c  >= launchDate && mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__r.Contract_Type__c == System.Label.Contract_Type_English){
                                WelcomeCallsNotificationHandler.sendNotification(partyMap, OriginateConstantValues.WELCOME_CALL_RECAP_EMAIL);
                            }else if(mapOfContactIdToParty.get(tsk.WhoId).Active_Application__r.genesis__Application_Submission_Date__c < launchDate && mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__r.Contract_Type__c == System.Label.Contract_Type_Spanish ){
                                WelcomeCallsNotificationHandler.sendNotification(partyMap, OriginateConstantValues.SPANISH_WELCOME_CALL_RECAP_EMAIL_Old);
                            }else if(mapOfContactIdToParty.get(tsk.WhoId).Active_Application__r.genesis__Application_Submission_Date__c  >= launchDate && mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__r.Contract_Type__c == System.Label.Contract_Type_Spanish){
                                WelcomeCallsNotificationHandler.sendNotification(partyMap, OriginateConstantValues.SPANISH_WELCOME_CALL_RECAP_EMAIL);
                            } 
                            //Updating application status automatically to READY_FOR_HIC for new PI and mandatory loan confirmation record type

                            if (mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__c != null &&
                                mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__r.genesis__Status__c.equalsIgnoreCase(OriginateConstantValues.PENDING_LOAN_CONFIRMATION_CALL)) {

                                if (!(mapOfAppIdToTaskId != null && mapOfAppIdToTaskId.containsKey(tsk.genesis__Application__c) && !(mapOfAppIdToTaskId.get(tsk.genesis__Application__c).contains(tsk.Id)))) {
                                applicationList.add(new genesis__Applications__c(Id = tsk.genesis__Application__c,
                                    genesis__Status__c = OriginateConstantValues.READY_FOR_HIC,Queues__c=''));
                                    appIdForSendingPIEmailSet.add(tsk.genesis__Application__c);
                                }
                            }
                        } else if ((tsk.Status == OriginateConstantValues.READY_FOR_SECOND_ATTEMPT || tsk.Status == OriginateConstantValues.READY_FOR_SECOND_AUTOMATED_ATTEMPT || tsk.Status == OriginateConstantValues.PENDING_LOAN_CONFIRMATION || tsk.Status == OriginateConstantValues.LOAN_CONFIRMATION_FAILED) && mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__r.Contract_Type__c == System.Label.Contract_Type_English ) {
                            WelcomeCallsNotificationHandler.sendNotification(partyMap, OriginateConstantValues.WELCOME_CALL_FAILED_ATTEMPT);
                        }else if ((tsk.Status == OriginateConstantValues.READY_FOR_SECOND_ATTEMPT || tsk.Status == OriginateConstantValues.READY_FOR_SECOND_AUTOMATED_ATTEMPT || tsk.Status == OriginateConstantValues.PENDING_LOAN_CONFIRMATION || tsk.Status == OriginateConstantValues.LOAN_CONFIRMATION_FAILED) && mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__r.Contract_Type__c == System.Label.Contract_Type_Spanish ) {
                            WelcomeCallsNotificationHandler.sendNotification(partyMap, OriginateConstantValues.SPANISH_WELCOME_CALL_FAILED_ATTEMPT);
                        }
                    } else if (tsk.Subject.equalsIgnoreCase(OriginateConstantValues.TPO_CONFIRMATION_CALL) || tsk.Subject.equalsIgnoreCase(OriginateConstantValues.MENTIS_TPO_CONFIRMATION_CALL)) {
                        //Spanish Welcome EMail for TPO 
                        
                        Map<String, Map<String, String>> templateMap = new Map<String, Map<String, String>>();                       
                        // Spanish Templates
                        Map<String, String> spanishTemplates = new Map<String, String>{
                            OriginateConstantValues.TASK_UNABLE_TO_CONTACT => OriginateConstantValues.SPANISH_TPO_WELCOME_CALL_EMAIL,
                            OriginateConstantValues.TASK_LOAN_CONFIRMATION => OriginateConstantValues.SPANISH_TPO_WELCOME_REACAP_EMAIL,
                            OriginateConstantValues.READY_FOR_SECOND_ATTEMPT => OriginateConstantValues.SPANISH_TPO_WELCOME_CALL_EMAIL,
                            OriginateConstantValues.READY_FOR_SECOND_AUTOMATED_ATTEMPT => OriginateConstantValues.SPANISH_TPO_WELCOME_CALL_EMAIL,
                            OriginateConstantValues.PENDING_LOAN_CONFIRMATION => OriginateConstantValues.SPANISH_TPO_WELCOME_CALL_EMAIL,
                            OriginateConstantValues.LOAN_CONFIRMATION_FAILED => OriginateConstantValues.SPANISH_TPO_WELCOME_CALL_EMAIL
                        };

                        // English Templates
                        Map<String, String> englishTemplates = new Map<String, String>{
                            OriginateConstantValues.TASK_UNABLE_TO_CONTACT => OriginateConstantValues.TPO_WELCOME_CALL_EMAIL,
                            OriginateConstantValues.TASK_LOAN_CONFIRMATION => OriginateConstantValues.TPO_WELCOME_REACAP_EMAIL,
                            OriginateConstantValues.READY_FOR_SECOND_ATTEMPT => OriginateConstantValues.TPO_WELCOME_CALL_EMAIL,
                            OriginateConstantValues.READY_FOR_SECOND_AUTOMATED_ATTEMPT => OriginateConstantValues.TPO_WELCOME_CALL_EMAIL,
                            OriginateConstantValues.PENDING_LOAN_CONFIRMATION => OriginateConstantValues.TPO_WELCOME_CALL_EMAIL,
                            OriginateConstantValues.LOAN_CONFIRMATION_FAILED => OriginateConstantValues.TPO_WELCOME_CALL_EMAIL
                        };

                       
                        templateMap.put(OriginateConstantValues.SPANISH, spanishTemplates);
                        templateMap.put(OriginateConstantValues.ENGLISH, englishTemplates);

                        // Fetch contract type and status
                        String contractType = mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__r.Contract_Type__c;
                        String status = tsk.Status;

                        // Get the corresponding template
                        String tpoTemplate = getTemplateNameTPO(contractType,status,templateMap);

                        


                        // Add spanish TPO Welcome call email
                        if (tsk.Status == OriginateConstantValues.TASK_UNABLE_TO_CONTACT) {

                            // WelcomeCallsNotificationHandler.sendNotification(partyMap, OriginateConstantValues.TPO_WELCOME_CALL_EMAIL);
                            WelcomeCallsNotificationHandler.sendNotification(partyMap, tpoTemplate);

                        } else if (tsk.Status == OriginateConstantValues.TASK_LOAN_CONFIRMATION) {

                           // WelcomeCallsNotificationHandler.sendNotification(partyMap, OriginateConstantValues.TPO_WELCOME_REACAP_EMAIL);
                           WelcomeCallsNotificationHandler.sendNotification(partyMap, tpoTemplate);


                            if (!(mapOfAppIdToTaskId != null && mapOfAppIdToTaskId.containsKey(tsk.genesis__Application__c) && !(mapOfAppIdToTaskId.get(tsk.genesis__Application__c).contains(tsk.Id)))) {
                                timeNow = DateTime.now().addSeconds(5);
                                cronExp = String.valueOf(timeNow.second()) + OriginateConstantValues.SPACE +
                                    String.valueOf(timeNow.minute()) + OriginateConstantValues.SPACE +
                                    String.valueOf(timeNow.hour()) + OriginateConstantValues.SPACE +
                                    String.valueOf(timeNow.day()) + OriginateConstantValues.SPACE +
                                    String.valueOf(timeNow.month()) + OriginateConstantValues.SPACE +
                                    OriginateConstantValues.QUESTION_MARK + OriginateConstantValues.SPACE +
                                    String.valueOf(timeNow.year());

                                System.schedule(OriginateConstantValues.READY_FOR_SECOND_MILESTONE +
                                    timeNow.format(OriginateConstantValues.DATE_TIME_FORMAT) + new GenericUtility().genToken(10),
                                    cronExp,
                                    new VerifyReadyForSecondMilestoneScheduler(tsk.genesis__Application__c));
                                //new VerifyReadyForSecondMilestoneScheduler(tsk.genesis__Application__c);

                            }
                        } else if (tsk.Status == OriginateConstantValues.READY_FOR_SECOND_ATTEMPT || tsk.Status == OriginateConstantValues.READY_FOR_SECOND_AUTOMATED_ATTEMPT || tsk.Status == OriginateConstantValues.PENDING_LOAN_CONFIRMATION || tsk.Status == OriginateConstantValues.LOAN_CONFIRMATION_FAILED) {
                            // WelcomeCallsNotificationHandler.sendNotification(partyMap, OriginateConstantValues.TPO_WELCOME_CALL_EMAIL);
                            WelcomeCallsNotificationHandler.sendNotification(partyMap, tpoTemplate);
                        } else if (tsk.Status == OriginateConstantValues.MANUAL_REVIEW_APPROVED || tsk.Status == OriginateConstantValues.MANUAL_REVIEW_DECLINED) {
                            MentisManualReviewCallout.calloutMethod(tsk.id);
                        }
                    } else if (tsk.Subject.equalsIgnoreCase(OriginateConstantValues.ENHANCED_MTWO) || tsk.Subject.equalsIgnoreCase(OriginateConstantValues.TPO_ENHANCED_MTWO)) {
               
                      String mTwoTemplate= sendEnhancedNotificationMTWO(partyMap,mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__r.Contract_Type__c,tsk.Subject);
                      WelcomeCallsNotificationHandler.sendNotification(partyMap, mTwoTemplate);
                        
                    }else if(tsk.Subject.equalsIgnoreCase(OriginateConstantValues.PI_MANDATORY_CONFIRMATION_CALL )){
                        if (mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__c != null &&
                                mapOfContactIdToParty.get(tsk.WhoId).genesis__Application__r.genesis__Status__c.equalsIgnoreCase(OriginateConstantValues.PENDING_LOAN_CONFIRMATION_CALL)) {

                            if (!(mapOfAppIdToTaskId != null && mapOfAppIdToTaskId.containsKey(tsk.genesis__Application__c) && !(mapOfAppIdToTaskId.get(tsk.genesis__Application__c).contains(tsk.Id)))) {
                                applicationList.add(new genesis__Applications__c(Id = tsk.genesis__Application__c,
                                    genesis__Status__c = OriginateConstantValues.READY_FOR_HIC,Queues__c=''));
                                appIdForSendingPIEmailSet.add(tsk.genesis__Application__c);
                            }
                        }                   
                    }
                }
            }
            if (!applicationList.isEmpty()) {
                Database.update(applicationList, AccessLevel.SYSTEM_MODE);
            }
            //FP1621-Sending Ready For HIC Eamil to PI when app moves from PENDING LOAN CONFIRMATION CALL
            //to READY FOR HIC
            if(!appIdForSendingPIEmailSet.isEmpty()){
                new SendPIEmailNotificationUtil().sendPIEmail(appIdForSendingPIEmailSet);
            }
            if(!confirmationCallContactList.isEmpty()){
                for(Id contactId : confirmationCallContactList){
                    objOrigUtility.createExternalNoteOnApplication(contactId,Label.Extrenal_Note_For_Confirmation_Call);
                }
            }
            if(!enhancedMtwoCallContactList.isEmpty()){
                for(Id contactId : enhancedMtwoCallContactList){
                    objOrigUtility.createExternalNoteOnApplication(contactId,Label.External_Note_For_Enhanced_M2);
                }
            }
            if(!appIdList.isEmpty()){
                taskApplicationList = [SELECT Id,Partner_Installer_Account__r.PI_Mandatory_Loan_Confirmation_Call__c, 
                                            Notes_Counter__c,
                                            New_Note_Counter__c,
                                            (select id,name from genesis__Parent_Applications__r where genesis__Status__c = 'CONTRACT SIGNED')  
                                        FROM genesis__Applications__c
                                        WHERE ID IN :appIdList
                                        WITH SYSTEM_MODE];
            }
            for(genesis__Applications__c applicationObj : taskApplicationList){
                  if(applicationObj.Partner_Installer_Account__r.PI_Mandatory_Loan_Confirmation_Call__c){
                    genesis__Applications__c activeContract = new genesis__Applications__c();
                    activeContract = taskApplicationList[0].genesis__Parent_Applications__r[0]; 
                    activeContract.Welcome_Call_Completed__c = true; 
                    update activeContract ;
                
                }else{                
                    applicationObj.Notes_Counter__c+=1;
                    applicationObj.New_Note_Counter__c+=1;
                }
            }
            if(!taskApplicationList.isEmpty() && !taskApplicationList[0].Partner_Installer_Account__r.PI_Mandatory_Loan_Confirmation_Call__c ){
                Database.update(taskApplicationList,false,AccessLevel.SYSTEM_MODE);
            }
        } catch (Exception objException) {
            new GenericUtility().insertLog('Enfin_TaskHandler', 'onAfterUpdate', objException);
        }

    }

    /**
    * @description method to call pinpoint and deposition API
    * @author Nishant Kumar | 07-25-2024 
    * @param lstNewTask 
    * @param oldTask 
    **/
    public static void awsCalloutAfterInsertAndUpdate(List < Task > lstNewTask, Map < Id, Task > oldTask) {
        Map <String, Id> recordTypeNameVsIdMap = getTaskRecordTypeIds();
        List<Id> recordTypeIdList = new List<Id>();
        for(String recordTypeName : recordTypeNameVsIdMap.keySet()){
            recordTypeIdList.add(recordTypeNameVsIdMap.get(recordTypeName));
        } 
        try{
        for (Task tsk: lstNewTask) {
            Task oldTsk = null;
            if (oldTask != null) {
                oldTsk = oldTask.get(tsk.Id);
            }
            if ((!(tsk.Legal_Communication_Only__c  
                && ((recordTypeNameVsIdMap.containsKey(OriginateConstantValues.ENHANCED_MTWO) && recordTypeNameVsIdMap.get(OriginateConstantValues.ENHANCED_MTWO) == tsk.RecordTypeId )
                     || (recordTypeNameVsIdMap.containsKey(OriginateConstantValues.TPO_ENHANCED_MTWO) && recordTypeNameVsIdMap.get(OriginateConstantValues.TPO_ENHANCED_MTWO) == tsk.RecordTypeId))))
                && String.isNotBlank(tsk.Status) && (tsk.Status == OriginateConstantValues.READY_FOR_FIRST_ATTEMPT || tsk.Status == OriginateConstantValues.READY_FOR_FIRST_AUTOMATED_ATTEMPT) 
                && (oldTsk == null || tsk.Status != oldTsk.Status) 
                && recordTypeIdList.contains(tsk.RecordTypeId) && !Test.isRunningTest()) {
                AWSPinpointCallout.calloutMethod(tsk.Id);
            }
            // Include the  check and make an API call only if update not made by AWS API user   
            else if (oldTsk != null && tsk.AWS_Successful_Callout__c == True && UserInfo.getUserName() != System.Label.AWS_API_USER &&  tsk.Status != oldTsk.Status 
                    && ((tsk.Status == OriginateConstantValues.TASK_UNABLE_TO_CONTACT  
                    || tsk.Status == OriginateConstantValues.PENDING_LOAN_CONFIRMATION  
                    || tsk.Status == OriginateConstantValues.TASK_LOAN_CONFIRMATION  
                    || tsk.Status == OriginateConstantValues.LOAN_CONFIRMATION_FAILED  
                    || tsk.Status == OriginateConstantValues.VERIFIED_TASK_STATUS  
                    || tsk.Status == OriginateConstantValues.PROJECT_CANCELLED_MANUALLY_STATUS 
                    || tsk.Status == OriginateConstantValues.PROJECT_INCOMPLETE 
                    || tsk.Status == OriginateConstantValues.PENDING_HO_CONFIRMATION 
                    || tsk.Status == OriginateConstantValues.NO_ACTION_NEEDED) 
                    ||((tsk.Status == OriginateConstantValues.TASK_NEW && tsk.Legal_Communication_Only__c 
                        && recordTypeNameVsIdMap.containsKey(OriginateConstantValues.ENHANCED_MTWO) 
                        && recordTypeNameVsIdMap.get(OriginateConstantValues.ENHANCED_MTWO) == tsk.RecordTypeId)
                      || (tsk.Status == OriginateConstantValues.TASK_NEW && tsk.Legal_Communication_Only__c 
                        && recordTypeNameVsIdMap.containsKey(OriginateConstantValues.TPO_ENHANCED_MTWO) 
                        && recordTypeNameVsIdMap.get(OriginateConstantValues.TPO_ENHANCED_MTWO) == tsk.RecordTypeId) )                        
                    ) && !Test.isRunningTest()) {
                AWSTaskDispositionCallout.calloutMethod(tsk.Id);
            }
            Id mentisrecordTypeId = Schema.SObjectType.Task.getRecordTypeInfosByName().get(OriginateConstantValues.MENTIS_TPO_CONFIRMATION_CALL).getRecordTypeId();
            if (String.isNotBlank(tsk.Status) && (tsk.Status == OriginateConstantValues.IN_PROGRESS) 
                && (oldTsk == null || tsk.Status != oldTsk.Status) 
                && (tsk.RecordTypeId == mentisrecordTypeId) && !Test.isRunningTest()) {
                MentisAIWelcomeCallCallout.calloutMethod(tsk.Id);
            }
        }
        
        Set < Id > setOfContactIdsWC = new Set < Id > ();
            Map < id, clcommon__Party__c > mapOfContactIdToPartyWC = new Map < Id, clcommon__Party__c > ();
            List < Task > lstOfTasksWC = new List < Task > ();
            List < genesis__Applications__c > applicationListWC = new List < genesis__Applications__c > ();
            Map < Id, Set < Task >> mapOfAppIdToTaskIdWC = new Map < Id, Set < Task >> ();
            for (Task tsk: lstNewTask) {
                Task oldTsk = null;
                if (oldTask != null) {
                    oldTsk = oldTask.get(tsk.Id);
                }
                if (oldTsk == null || tsk.Status != oldTask.get(tsk.Id).Status) {
                    if ((tsk.Subject == OriginateConstantValues.LOAN_CONFIRMATION_CALL || tsk.Subject.equalsIgnoreCase(OriginateConstantValues.TPO_CONFIRMATION_CALL) || 
                          tsk.Subject == OriginateConstantValues.ENHANCED_MTWO   ||                 
                         tsk.Subject.equalsIgnoreCase(OriginateConstantValues.MENTIS_TPO_CONFIRMATION_CALL)||tsk.Subject.equalsIgnoreCase(OriginateConstantValues.PI_MANDATORY_CONFIRMATION_CALL))){
                             setOfContactIdsWC.add(tsk.WhoId);
                             lstOfTasksWC.add(tsk);
                             set < Task > setOfTasksId = new Set < Task > ();
                             if (!mapOfAppIdToTaskIdWC.containsKey(tsk.genesis__Application__c)) {
                                 setOfTasksId.add(tsk);
                                 mapOfAppIdToTaskIdWC.put(tsk.genesis__Application__c, setOfTasksId);
                             } else {
                                 setOfTasksId = mapOfAppIdToTaskIdWC.get(tsk.genesis__Application__c);
                                 setOfTasksId.add(tsk);
                                 mapOfAppIdToTaskIdWC.put(tsk.genesis__Application__c, setOfTasksId); 
                             }
                         }
                }
            }
            for (clcommon__Party__c party: [Select Id, clcommon__Type__r.name,  genesis__Application__r.genesis__Status__c,genesis__Application__r.Type_Of_Application_New__c, genesis__Application__c, Active_Application__r.genesis__Application_Submission_Date__c, Active_Application__r.genesis__Loan_Amount__c,genesis__Application__r.Contract_Type__c, Active_Application__r.genesis__APR__c, clcommon__Contact__c, clcommon__Contact__r.Phone, clcommon__Contact__r.FirstName, clcommon__Contact__r.Email, clcommon__Account__r.SMS_Opt_in__c from clcommon__Party__c where clcommon__Contact__c =: setOfContactIdsWC]) {
                mapOfContactIdToPartyWC.put(party.clcommon__Contact__c, party);
            }
            
            for (Id appId: mapOfAppIdToTaskIdWC.keySet()) {
                Set<Task> taskset = mapOfAppIdToTaskIdWC.get(appId);
                genesis__Applications__c appWC = new genesis__Applications__c();
                appWC.id = appId;
                 for (Task tsk: taskset) {
                    if (mapOfContactIdToPartyWC.containsKey(tsk.WhoId)) {
                        if (mapOfContactIdToPartyWC.get(tsk.WhoId).clcommon__Type__r.name == OriginateConstantValues.BORROWER){
                            appWC.Borrower_WC_Status__c = tsk.Status;
                            appWC.Borrower_WC_Completion_Date__c = tsk.CompletedDateTime;
                            
                        if (mapOfContactIdToPartyWC.get(tsk.WhoId).genesis__Application__r.Type_Of_Application_New__c == OriginateConstantValues.TYPE_OF_APPLICATION_LOAN){
                            

                            if(tsk.Subject == OriginateConstantValues.ENHANCED_MTWO)
                                appWC.Borrower_EnhancedM2_Loan_Completed_Date__c = tsk.CompletedDateTime;
                            else
                                appWC.Borrower_Loan_WC_Completion_Date_Time__c = tsk.CompletedDateTime;
                        }
                        if ((mapOfContactIdToPartyWC.get(tsk.WhoId).genesis__Application__r.Type_Of_Application_New__c == OriginateConstantValues.TYPE_OF_APPLICATION_TPO || mapOfContactIdToPartyWC.get(tsk.WhoId).genesis__Application__r.Type_Of_Application_New__c == OriginateConstantValues.TYPE_OF_APPLICATION_TPO_LEASE)){
                            
                            
                            if(tsk.Subject == OriginateConstantValues.ENHANCED_MTWO)
                                appWC.Borrower_EnhancedM2_TPO_Completed_Date__c = tsk.CompletedDateTime;
                            else
                                appWC.Borrower_TPO_WC_Completion_Date_Time__c = tsk.CompletedDateTime;
                         }                       
                        }
                          
                         
                        else if(mapOfContactIdToPartyWC.get(tsk.WhoId).clcommon__Type__r.name == OriginateConstantValues.COBORROWER){
                            appWC.Co_Borrower_WC_Status__c = tsk.Status;
                            appWC.Co_Borrower_WC_Completion_Date__c = tsk.CompletedDateTime;
                            
                         if (mapOfContactIdToPartyWC.get(tsk.WhoId).genesis__Application__r.Type_Of_Application_New__c == OriginateConstantValues.TYPE_OF_APPLICATION_LOAN){
                           
                            appWC.Co_Borrower_Loan_WC_Completion_Date_Time__c = tsk.CompletedDateTime;
                            
                        }
                         if ((mapOfContactIdToPartyWC.get(tsk.WhoId).genesis__Application__r.Type_Of_Application_New__c == OriginateConstantValues.TYPE_OF_APPLICATION_TPO || mapOfContactIdToPartyWC.get(tsk.WhoId).genesis__Application__r.Type_Of_Application_New__c == OriginateConstantValues.TYPE_OF_APPLICATION_TPO_LEASE)){
                           
                            appWC.Co_Borrower_TPO_WC_Completion_Date_Time__c = tsk.CompletedDateTime;
                            
                        }                       
                        }
                        
                        
                    }
                }
                applicationListWC.add(appWC);
            }
            
            if(!applicationListWC.isEmpty()){
                Database.update(applicationListWC,false,AccessLevel.SYSTEM_MODE);
            }
            
        } catch (Exception objException) {
            new GenericUtility().insertLog('Enfin_TaskHandler', 'onAfterUpdate', objException);
        }
    }


    /**
    * @description method to fetch map of recordType name and Id
    * @author Nishant Kumar | 07-25-2024 
    * @return Map<String, Id> 
    **/
    public static Map <String, Id> getTaskRecordTypeIds() {

        List < RecordType > recordTypeList = [SELECT Id, 
                                                    Name 
                                                    FROM RecordType 
                                                    WHERE SObjectType = 'Task'
                                                    AND NAME IN (:OriginateConstantValues.LOAN_CONFIRMATION, :OriginateConstantValues.ENHANCED_MTWO, :OriginateConstantValues.TPO_ENHANCED_MTWO, :OriginateConstantValues.NEW_PI, :OriginateConstantValues.HIGH_RISK_LOAN_CONFIRMATION, :OriginateConstantValues.AUTOMATED_LOAN_CONFIRMATION, :OriginateConstantValues.TPO_CONFIRMATION)
                                                    WITH SYSTEM_MODE
        ];

        Map <String, Id> recordTypeNameVsIdMap = new Map <String, Id>();

        for (RecordType recType: recordTypeList) {
            recordTypeNameVsIdMap.put(recType.Name, recType.Id);
        }
        return recordTypeNameVsIdMap;
    }


    /**
    * @description 
    * @author Archisman Saha | 02-27-2025 
    * @param contractType 
    * @param status 
    * @param templateMap 
    * @return String 
    **/
    public static String getTemplateNameTpo(String contractType, String status,Map<String, Map<String, String>> templateMap){
        if (templateMap.containsKey(contractType) && templateMap.get(contractType).containsKey(status)) {
           return templateMap.get(contractType).get(status);
        }
        return null;
    }

    /**
    * @description 
    * @author Archisman Saha | 02-27-2025 
    * @param  partyMap 
    * @param  contractType 
    * @param  subject 
    * @return  String
    **/
    public static String sendEnhancedNotificationMTWO(Map<Id,clcommon__Party__c> partyMap, String contractType, String subject) {

        if (contractType == OriginateConstantValues.SPANISH && subject.equalsIgnoreCase(OriginateConstantValues.TPO_ENHANCED_MTWO)) {
            return OriginateConstantValues.SPANISH_ENHANCED_MTWO_HO_CONFIRMATION_EMAIL;
        } else {
            return OriginateConstantValues.ENHANCED_MTWO_HO_CONFIRMATION_EMAIL;
        }
        
    }
 
     public static void updateComplainMappings(List<Task> lstOfTasks) {  
          
       Id complaintCaseId;
       Id complaintTaskId;
       set<id> setOfParentCaseIds = new set<id>();
       set<id> setOfApplicationIds = new set<id>();
       set<id> setOfTaskIds = new set<id>();
       Map<id, Case> mapOfCaseIdToCase = new Map<id, Case>();
       Map<id, id> mapOfApplicationIdToContactId = new Map<id, id>();
       List<Task> lstTasks = new List<Task>();
       string CASE_PREFIX = '500';
       string CASE_TYPE = 'Case';
       string TASK_TYPE = 'Task';
       
            for (RecordType  recordType : [SELECT Id,SObjectType FROM RecordType where SObjectType IN (:CASE_TYPE, :TASK_TYPE)
                                                    AND Name =:OriginateConstantValues.COMPLAINT  limit 2]){
                                                    
                    if(recordType.SObjectType ==CASE_TYPE) 
                      complaintCaseId = recordType.Id;
                    else if (recordType.SObjectType ==TASK_TYPE) 
                       complaintTaskId = recordType.Id;                             
                                                    
            } 
                                                                                                
              
              for(Task tsk : lstOfTasks) {
                  if(complaintTaskId !=null && tsk.RecordTypeId !=null  && tsk.RecordTypeId ==complaintTaskId
                  && tsk.WhatId !=null) {
                    string whatId= tsk.WhatId;
                    if(whatId.startsWith(CASE_PREFIX)) {
                        setOfParentCaseIds.add(tsk.whatId);
                        lstTasks.add(tsk);
                    }
                 }
            }
            
            if(!setOfParentCaseIds.isEmpty()) {
                for(Case cse : [Select id,  Application_Number__c,
                                Borrower_Email_Address__c,Borrower_Name__r.Name,Complaint_Type__c,Source_of_Complaints__c,
                                Application_Number__r.Partner_Installer_Account__c,Application_Number__r.Type_Of_Application_New__c,Borrower_Name__c, 
                                Application_Number__r.genesis__Contact__c,Severity__c,Complaint_Issue__c
                                FROM Case where Id =:setOfParentCaseIds AND RecordTypeId=:complaintCaseId ]) {
                                
                          setOfApplicationIds.add(cse.Application_Number__c);
                          mapOfCaseIdToCase.put(cse.Id, cse);      
                        
                }
               
               if(!setOfApplicationIds.isEmpty()) { 
                   for(clcommon__Party__c party : [Select Id,genesis__Application__c,clcommon__Contact__c 
                                                   from clcommon__Party__c where genesis__Application__c =:setOfApplicationIds
                                                   AND clcommon__Type__r.Name =:OriginateConstantValues.PARTNER_INSTALLER ]){
                           mapOfApplicationIdToContactId.put(party.genesis__Application__c,party.clcommon__Contact__c);
                   }
                   
                   for(Task tsk :lstTasks) {
                       if(mapOfCaseIdToCase.containsKey(tsk.whatId)) {
                       
                       tsk.Borrower_Email__c =  mapOfCaseIdToCase.get(tsk.whatId).Borrower_Email_Address__c;
                       tsk.Borrower_Name__c= mapOfCaseIdToCase.get(tsk.whatId).Borrower_Name__r.Name;
                       tsk.Category__c= mapOfCaseIdToCase.get(tsk.whatId).Complaint_Type__c;
                       tsk.Complaint_Source_Received__c= mapOfCaseIdToCase.get(tsk.whatId).Source_of_Complaints__c;
                       tsk.Partner_Installer_Account__c= mapOfCaseIdToCase.get(tsk.whatId).Application_Number__c !=null && mapOfCaseIdToCase.get(tsk.whatId).Application_Number__r.Partner_Installer_Account__c!=null ? mapOfCaseIdToCase.get(tsk.whatId).Application_Number__r.Partner_Installer_Account__c:'';
                       tsk.Partner_Installer__c= mapOfCaseIdToCase.get(tsk.whatId).Application_Number__c !=null && mapOfApplicationIdToContactId.containsKey(mapOfCaseIdToCase.get(tsk.whatId).Application_Number__c) ? mapOfApplicationIdToContactId.get(mapOfCaseIdToCase.get(tsk.whatId).Application_Number__c):'';
                       tsk.Product_Type__c= mapOfCaseIdToCase.get(tsk.whatId).Application_Number__r.Type_Of_Application_New__c;
                       tsk.genesis__Application__c = mapOfCaseIdToCase.get(tsk.whatId).Application_Number__c !=null ?mapOfCaseIdToCase.get(tsk.whatId).Application_Number__c:'';
                       tsk.whoId = mapOfCaseIdToCase.containsKey(tsk.whatId)?mapOfCaseIdToCase.get(tsk.whatId).Application_Number__r.genesis__Contact__c:null ;
                       tsk.Tier__c=  mapOfCaseIdToCase.get(tsk.whatId).Severity__c;
                       tsk.Sub_category__c =  mapOfCaseIdToCase.get(tsk.whatId).Complaint_Issue__c;
                       tsk.Application_Product_Type__c = tsk.Product_Type__c;
                      }
                   }
                 }
             }
     
        }
   
}
