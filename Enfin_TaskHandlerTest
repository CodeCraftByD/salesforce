/*
* Date : 05/11/2023
* Author : Md Obaid Ansar
* Description : Test class for Enfin_TaskHandler
* @last modified on  : 03-16-2025
* @last modified by  : Archisman Saha
*/

@isTest
public with sharing class Enfin_TaskHandlerTest{
    public static final String COMPLAINT_TYPE = 'Complaint';
    public static final String TESTING_PURPOSE = 'Testing Purpose';
    public static final String DESCRIPTION = 'Description';
    public static final String IN_PROGRESS = 'In Progress';
    public static final String LOAN = 'Loan';
    public static final String NEEDS_INSTALLER_ACTION = 'Needs Installer Action';
    public static final String PRODUCT_TYPE = 'productType';
    public static final String APP_STATUS = 'filterAppStatus';
    public static final String COMPLAINT_STATUS = 'filterComplaintStatus';
    public static final String SUCCESS_RESPONSE =  'Response should be Success for app status filter only';
    public static final String TASK_ID = 'taskId';
    public static final String ERROR_RESPONSE = 'Response should be Error'; 
    public static final String PAST_DUE_DATE_DETECT = 'Past due date should be detected';
    public static final String YES = 'Yes';
    public static final String NO = 'No';
    
    @TestSetup
    static void makeData(){
        

        List<Task> taskList = new List<Task>();
        // generate accounts and contacts
    
        List<Account> accounts = GenericTestUtility.createAccount(3);
        List<Contact> contacts = GenericTestUtility.createContact(accounts);
        Id complaintCaseId =  Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName().get(COMPLAINT_TYPE).getRecordTypeId(); //create Task record
        // assign test data for borrower
        Account borrowerAccount = accounts[0];
        Contact borrowerContact = contacts[0];
        genesis__Applications__c applicationObj = new genesis__Applications__c();
        
        genesis__Applications__c objApplication = GenericTestUtility.createApplication(borrowerContact.id, borrowerAccount.id);
        GenericTestUtility.addParty(objApplication.Id,
                                        borrowerAccount.Id,
                                        borrowerContact.Id,
                                        OriginateConstantValues.BORROWER);
        
        Task tsk = new Task(genesis__Application__c =objApplication.Id, Subject = OriginateConstantValues.TASK_SUBJECT_INBOUND, WhoId=borrowerContact.Id, ActivityDate=Date.Today(), Status=OriginateConstantValues.TASK_STATUS_OPEN);
        insert tsk;
        
        // create application
        applicationObj = GenericTestHelper.createTestApplication(accounts[0].Id);
        applicationObj.Type_Of_Application_New__c = 'Loan';
        Database.insert(applicationObj);
        GenericTestUtility.addParty(applicationObj.id,accounts[0].Id,contacts[0].id,OriginateConstantValues.PARTNER_INSTALLER);
        Case complaintCase = new Case();

        // Set required fields
        complaintCase.RecordTypeId = complaintCaseId;
        complaintCase.Subject = 'Customer Complaint';
        complaintCase.Status = 'New'; 
        complaintCase.Origin = 'Phone'; 
        complaintCase.Priority = 'High';
        complaintCase.Application_Number__c = applicationObj.Id;
        complaintCase.Severity__c = 'Tier 1';
        complaintCase.Complaint_Type__c = 'Workmanship';
        complaintCase.Source_of_Complaints__c ='HO';
        complaintCase.Complaint_Type__c = 'Warranty/Product/Equipment Issue';
        complaintCase.Complaint_Issue__c = 'Battery issue';
        
        insert complaintCase;

        
    
        //Getting the id of complaint record type
        Id complaintRecordTypeId =  Schema.SObjectType.Task.getRecordTypeInfosByDeveloperName().get(COMPLAINT_TYPE).getRecordTypeId(); //create Task record
        
        Task objTask = new Task();
        objTask.Subject = TESTING_PURPOSE;
        objTask.WhatId = complaintCase.id;
        objTask.Description = DESCRIPTION;
        objTask.whoId = applicationObj.genesis__Contact__c;
        objTask.Status = IN_PROGRESS;
        objTask.Product_Type__c = LOAN;
        objTask.recordTypeId = complaintRecordTypeId;
        Database.insert(objTask);
        
        
    }
    
    // Test unable to contact notification on task update
    @isTest
    public static void unableToContactTest() {
        List<Task> taskList = [SELECT Id,genesis__Application__c,
                                                        WhoId
                                                        FROM Task
                                                        LIMIT 1];
                                                        
        List<Account> lstAccount = [Select Id from Account limit 1];
        lstAccount[0].SMS_Opt_in__c=true;
        update lstAccount;
        // set Task status
        taskList[0].Status = OriginateConstantValues.TASK_UNABLE_TO_CONTACT;
        

        Test.startTest();
        update taskList;
        User userObj = GenericTestUtility.createUser(taskList [0].WhoId);
        System.runAs(userObj) {
            GenericTestUtility.createEmailTemplate(OriginateConstantValues.WELCOME_CALL_EMAIL); 
        }
        Test.stopTest(); 
        taskList = [SELECT Id
                        FROM Task
                        WHERE Status =:OriginateConstantValues.TASK_UNABLE_TO_CONTACT];
        System.assertEquals(1, taskList.size(), 'Task not updated'); 
    }
    
     // Test recap email notification on task update
    
    @isTest
    public static void recapEmailTest() {
        List<Task> taskList = [SELECT Id,genesis__Application__c,
                                                        WhoId
                                                        FROM Task
                                                        LIMIT 1];
                                                        
        List<Account> borrowerAccountList = [SELECT Id,
                                                        SMS_Opt_in__c
                                                        FROM Account
                                                        LIMIT 1];                                        
        // set Task status
        taskList[0].Status = OriginateConstantValues.TASK_LOAN_CONFIRMATION;
        borrowerAccountList [0].SMS_Opt_in__c = true;

        Test.startTest();
        update borrowerAccountList;
        update taskList;
        
        User userObj = GenericTestUtility.createUser(taskList [0].WhoId);
        System.runAs(userObj) {
            GenericTestUtility.createEmailTemplate(OriginateConstantValues.WELCOME_CALL_RECAP_EMAIL); 
        }
        Test.stopTest(); 
        taskList = [SELECT Id
                        FROM Task
                        WHERE Status =:OriginateConstantValues.TASK_LOAN_CONFIRMATION];
        System.assertEquals(1, taskList.size(), 'Task not updated'); 
    }
    
    
     @isTest
    public static void loanConfirmationTest() {
        List<Task> taskList = [SELECT Id,genesis__Application__c,
                                                        WhoId
                                                        FROM Task
                                                        LIMIT 1];
                                                        
        List<Account> borrowerAccountList = [SELECT Id,
                                                        SMS_Opt_in__c
                                                        FROM Account
                                                        LIMIT 1];  
        
        //
        taskList[0].Subject = OriginateConstantValues.LOAN_CONFIRMATION_CALL;
        // set Task status
        taskList[0].Status = OriginateConstantValues.TASK_LOAN_CONFIRMATION;
        borrowerAccountList [0].SMS_Opt_in__c = true;

        Test.startTest();
        update borrowerAccountList;
        update taskList;
        
        Test.stopTest(); 
        taskList = [SELECT Id
                        FROM Task
                        WHERE Status =:OriginateConstantValues.TASK_LOAN_CONFIRMATION];
        System.assertEquals(1, taskList.size(), 'Task not updated'); 
    }
    @isTest
    public static void tpoConfirmationTest() {
        List<Task> taskList = [SELECT Id,genesis__Application__c,
                                                        WhoId
                                                        FROM Task
                                                        LIMIT 1];
                                                        
        List<Account> borrowerAccountList = [SELECT Id,
                                                        SMS_Opt_in__c
                                                        FROM Account
                                                        LIMIT 1];  
        
        //
        taskList[0].Subject = OriginateConstantValues.TPO_CONFIRMATION_CALL;
        // set Task status
        taskList[0].Status = OriginateConstantValues.READY_FOR_SECOND_ATTEMPT;
        borrowerAccountList [0].SMS_Opt_in__c = true;

        Test.startTest();
        update borrowerAccountList;
        update taskList;
        
        Test.stopTest(); 
        taskList = [SELECT Id
                        FROM Task
                        WHERE Status =:OriginateConstantValues.READY_FOR_SECOND_ATTEMPT];
        System.assertEquals(1, taskList.size(), 'Task not updated'); 
    }
    @isTest
    public static void tpoConfirmationTwoTest() {
        List<genesis__Applications__c> appList = [SELECT Id,
                                                    genesis__Status__c
                                                    FROM genesis__Applications__c
                                                    LIMIT 1];
        List<Task> taskList = [SELECT Id,genesis__Application__c,
                                                        WhoId
                                                        FROM Task
                                                        LIMIT 1];
                                                        
        List<Account> borrowerAccountList = [SELECT Id,
                                                        SMS_Opt_in__c
                                                        FROM Account
                                                        LIMIT 1];  
        
        //
        taskList[0].Subject = OriginateConstantValues.TPO_CONFIRMATION_CALL;
        appList[0].genesis__Status__c = 'PENDIN TPO CONFIRMATION CALL';
        // set Task status
        taskList[0].Status = OriginateConstantValues.TASK_LOAN_CONFIRMATION;
        borrowerAccountList [0].SMS_Opt_in__c = true;

        Test.startTest();
        update borrowerAccountList;
        update taskList;
        
        Test.stopTest(); 
        taskList = [SELECT Id
                        FROM Task
                        WHERE Status =:OriginateConstantValues.TASK_LOAN_CONFIRMATION];
        System.assertEquals(1, taskList.size(), 'Task not updated'); 
    }
    
    @isTest
    public static void partyTest() {
        List<Task> taskList = [SELECT Id,genesis__Application__c,
                                                        WhoId
                                                        FROM Task
                                                        LIMIT 1];
                                                        
        List<Account> borrowerAccountList = [SELECT Id,
                                                        SMS_Opt_in__c
                                                        FROM Account
                                                        LIMIT 1];  
        
        //
        taskList[0].Subject = OriginateConstantValues.LOAN_CONFIRMATION_CALL;
        // set Task status
        taskList[0].Status = OriginateConstantValues.READY_FOR_SECOND_ATTEMPT;
        borrowerAccountList [0].SMS_Opt_in__c = true;

        Test.startTest();
        update borrowerAccountList;
        update taskList;
        
        taskList[0].Status = OriginateConstantValues.TASK_UNABLE_TO_CONTACT;
        update taskList;
        Test.stopTest(); 
        taskList = [SELECT Id
                        FROM Task
                        WHERE Status =:OriginateConstantValues.TASK_LOAN_CONFIRMATION];
        System.assertEquals(0, taskList.size(), 'Task not updated'); 
    }
    @isTest
    public static void partyTestTwo() {
        List<Task> taskList = [SELECT Id,genesis__Application__c,
                                        WhoId
                                        FROM Task
                                        LIMIT 1];
                                                        
        List<Account> borrowerAccountList = [SELECT Id,
                                                        SMS_Opt_in__c
                                                        FROM Account
                                                        LIMIT 1];  
        
        //
        taskList[0].Subject = OriginateConstantValues.ENHANCED_MTWO;
        // set Task status
        taskList[0].Status = OriginateConstantValues.PENDING_HO_CONFIRMATION;
        borrowerAccountList [0].SMS_Opt_in__c = true;

        Test.startTest();
        update borrowerAccountList;
        update taskList;
        
        taskList[0].Status = OriginateConstantValues.READY_FOR_SECOND_ATTEMPT;
        update taskList;
        Test.stopTest(); 
        taskList = [SELECT Id
                        FROM Task
                        WHERE Status =:OriginateConstantValues.TASK_LOAN_CONFIRMATION];
        System.assertEquals(0, taskList.size(), 'Task not updated'); 
    }
    
    /**
    * @description test for task status TASK_UNABLE_TO_CONTACT
    * @author Archisman Saha | 03-14-2025 
    **/
    @isTest
    public static void tpoUnableToContactTest() {
        List<Task> taskList = [SELECT Id,
                                        genesis__Application__c,
                                        WhoId
                                        FROM Task
                                        LIMIT 1];
                                                        
        List<Account> listAccount = [Select Id 
                                            from Account 
                                            limit 1];
        listAccount[0].SMS_Opt_in__c=true;
        update listAccount;
        // set Task status
        taskList[0].Status = OriginateConstantValues.TASK_UNABLE_TO_CONTACT;
        taskList[0].Subject = OriginateConstantValues.TPO_CONFIRMATION_CALL;

        Test.startTest();
        update taskList;
        List<User> userObj = [SELECT Id
                                FROM User
                                WHERE Id = :UserInfo.getUserId()
                                WITH SYSTEM_MODE ];
        System.runAs(userObj[0]) {
            GenericTestUtility.createEmailTemplate(OriginateConstantValues.TPO_WELCOME_REACAP_EMAIL); 
        }
        Test.stopTest(); 
        taskList = [SELECT Id
                        FROM Task
                        WHERE Status =:OriginateConstantValues.TASK_UNABLE_TO_CONTACT];
        System.assertEquals(1, taskList.size(), 'Task not updated'); 
    }

    /**
    * @description test for task status TPO_ENHANCED_MTWO
    * @author Archisman Saha | 03-14-2025 
    **/
    @isTest
    public static void spanishPartyTestTwo() {
        List<Task> taskList = [SELECT Id,
                                        genesis__Application__c,
                                        WhoId
                                        FROM Task
                                        LIMIT 1];

        List<genesis__Applications__c> appList = [SELECT Id,
                                                    genesis__Status__c,
                                                    Contract_Type__c
                                                    FROM genesis__Applications__c
                                                    LIMIT 1];
                                                        
        List<Account> borrowerAccountList = [SELECT Id,
                                                    SMS_Opt_in__c
                                                    FROM Account
                                                    LIMIT 1];  
        
        //
        taskList[0].Subject = OriginateConstantValues.TPO_ENHANCED_MTWO;
        // set Task status
        taskList[0].Status = OriginateConstantValues.PENDING_HO_CONFIRMATION;
        appList[0].Contract_Type__c=OriginateConstantValues.SPANISH;
        borrowerAccountList [0].SMS_Opt_in__c = true;
        Map<Id,clcommon__Party__c>partyMap=new Map<Id,clcommon__Party__c>();
        Test.startTest();
        List<User> userObj = [SELECT Id
                                FROM User
                                WHERE Id = :UserInfo.getUserId()
                                WITH SYSTEM_MODE ];
        System.runAs(userObj[0]) {
        update borrowerAccountList;
        update taskList;
        taskList[0].Status = OriginateConstantValues.READY_FOR_SECOND_ATTEMPT;    
        String template=Enfin_TaskHandler.sendEnhancedNotificationMTWO(partyMap,OriginateConstantValues.SPANISH,OriginateConstantValues.TPO_ENHANCED_MTWO);
        System.assertEquals(OriginateConstantValues.SPANISH_ENHANCED_MTWO_HO_CONFIRMATION_EMAIL, template,'Should return Correct Template'); 
        update taskList;
        }
        Test.stopTest(); 

        taskList = [SELECT Id
                        FROM Task
                        WHERE Status =:OriginateConstantValues.TASK_LOAN_CONFIRMATION];
        System.assertEquals(0, taskList.size(), 'Task not updated'); 
    }
}
