public without sharing class SUBS_PopulateATR_ACVOnOLIBatchService {
    public static Map<Id, String> oliErrorMessageMap = new Map<Id, String>();
    public static Map<String, OpportunityLineItem> updateOLIMap = new Map<String, OpportunityLineItem>();
    public static List<OpportunityLineItem> updateOLI = new List<OpportunityLineItem>();

    public static void getOrderDatailsUsingOrderNo(List<OpportunityLineItem> lsOpptyLineItem) {
        Map<string, List<OpportunityLineItem>> storeOrderNoWithOLI = new Map<string, List<OpportunityLineItem>>();
        Map<String, Decimal> storeSubIdWithATRvalue = new Map<String, Decimal>();
        //List<OpportunityLineItem> updateOLI = new List<OpportunityLineItem>();
        Set<String> cliSubsIdSet = new Set<String>();

        // Grouping Olis by Order MAP
        for (OpportunityLineItem oli : lsOpptyLineItem) {
            if (!storeOrderNoWithOLI.containsKey(String.valueOf(oli.Contract_Line_Item__r.Pelican_Order__c))) {
                storeOrderNoWithOLI.put(String.valueOf(oli.Contract_Line_Item__r.Pelican_Order__c), new List<OpportunityLineItem>{ oli });
            } else {
                storeOrderNoWithOLI.get(String.valueOf(oli.Contract_Line_Item__r.Pelican_Order__c)).add(oli);
            }
            cliSubsIdSet.add(oli.Contract_Line_Item__r.Pelican_Subscription_Id__c);
        }

        for (string orderNumber : storeOrderNoWithOLI.keyset()) {
            List<TransactionEventTriggerHelperExtension.Order> storeResponse = new List<TransactionEventTriggerHelperExtension.Order>();
            try {
                // Get order call to get details
                storeResponse = SUBS_GetOrderDetailsController.getOrderDetailViaAtrBatch(orderNumber);
                if (storeResponse != null) {
                    // Getting Calculated ATR values from Order response
                    for (TransactionEventTriggerHelperExtension.Order order : storeResponse) {
                        if (storeOrderNoWithOLI.containsKey(order.id)) {
                            for (TransactionEventTriggerHelperExtension.LineItem lineItem : order.lineItems) {
                                String subscriptionId = String.valueOf(lineItem.subscriptionInfo.subscriptionId);
                                if(cliSubsIdSet.contains(subscriptionId)){
                                    Date subStartDate = Date.ValueOf(lineItem.subscriptionInfo.subscriptionPeriodStartDate);
                                    Date subEndDate = Date.ValueOf(lineItem.subscriptionInfo.subscriptionPeriodEndDate);
                                    Integer differenceInDays = subStartDate.daysBetween(subEndDate) + 1;
                                    Decimal atrValue = (lineItem.Price.endUserPrice * 365) / differenceInDays;
                                    storeSubIdWithATRvalue.put(subscriptionId, atrValue);
                                }
                            }
                        }
                    }
                }
            } catch (Exception ex) {
                for(OpportunityLineItem oli : storeOrderNoWithOLI.get(orderNumber)){
                    oliErrorMessageMap.put(oli.Id, 'Error Message : <br/>' + ex.getMessage() + ', Order Number: ' + orderNumber + ' - Line Number : ' + ex.getLineNumber() + '<br/>' + 'Stack Trace : <br/>' + ex.getStackTraceString());
                }
            }
        }

        for (string orderNumber : storeOrderNoWithOLI.keyset()) {        
            // Populating OLI details
            List<OpportunityLineItem> oliList = storeOrderNoWithOLI.get(orderNumber);
            for (OpportunityLineItem oli : oliList) {
                if (oli.Contract_Line_Item__r != null && oli.Contract_Line_Item__r.Pelican_Subscription_Id__c != null) {
                    String pelicanSubscriptionId = oli.Contract_Line_Item__r.Pelican_Subscription_Id__c;
                    // OLI Subs has an Order Line with Value for ATR
                    if (storeSubIdWithATRvalue.containsKey(oli.Contract_Line_Item__r.Pelican_Subscription_Id__c)) {
                        oli.Line_Item_ATR__c = storeSubIdWithATRvalue.get(pelicanSubscriptionId);
                        SUBS_OpportunityPriceService.calculateAtrValues(oli, null);
                        updateOLI.add(oli);
                        updateOLIMap.put(String.valueOf(oli.Id), oli);
                    } else if(!oliErrorMessageMap.containsKey(oli.Id)) {
                        // OLI Subs does not has an Order Line with Value for ATR, excluding failed records, as they will re-process
                        oli.Line_Item_ATR__c = 0;
                        updateOLI.add(oli);
                        updateOLIMap.put(String.valueOf(oli.Id), oli);
                    }
                }
            }
        }

        populateRampDealforOpenOLIs(lsOpptyLineItem); //calling this method to populate Ramp deal
    }

    public static void populateRampDealforOpenOLIs(List<OpportunityLineItem> lsOpptyLineItem){
        Set<String> storeOrderNoSet = new Set<String>(); //Set for storing pelican order number of open OLIs
        Set<String> cliSubsIdSet = new Set<String>(); //Set for storing pelican subscription id of open OLIs
        Map<String, OpportunityLineItem> cliIdToSubsOLIMap = new Map<String, OpportunityLineItem>(); //Mapping CLIs with their respective previous OLIs
        Map<String, OpportunityLineItem> remainingOLIMap = new Map<String, OpportunityLineItem>(); //for remaining oli to be processed if we find sales OLI
        Set<String> orderNoToOppLineItemSet = new Set<String>(); //for storing pelican order number of remaining OLIs
        List<OpportunityLineItem> oliLinesLst = new List<OpportunityLineItem>();// for storing open OLIs whose CLI is not present

        // Grouping Open Olis by Order Map
        for (OpportunityLineItem oli : lsOpptyLineItem) {
            storeOrderNoSet.add(oli.Contract_Line_Item__r.Pelican_Order__c);
            cliSubsIdSet.add(oli.Contract_Line_Item__r.Pelican_Subscription_Id__c);
        }
        
        //Quering all the renewed OLI associated with Open OLIs
        //AND Contract_Line_Item__r.Pelican_Subscription_Id__c IN :cliSubsIdSet
        //AND Opportunity.Pelican_Order_Number__c IN :storeOrderNoSet
        for (OpportunityLineItem oli : [SELECT Id, OpportunityId, Asset_Serial_Num__c, Additional_Info__c, Ramp_Deal__c, Order_Number__c, Contract_Line_Item__r.Pelican_Subscription_Id__c 
            FROM OpportunityLineItem WHERE Opportunity.RecordType.Name = 'Subscription Opportunity' 
            AND Renewal_Status__c IN ('Renewed', 'Completed') AND Order_Number__c IN :storeOrderNoSet ORDER BY CreatedDate ASC
        ]) {
            if(oli.Contract_Line_Item__c!=null){
                cliIdToSubsOLIMap.put(String.valueOf(oli.Contract_Line_Item__r.Pelican_Subscription_Id__c), oli); //Maping Renewed OpportunityLineItems for Renewed line item action by Pelican_Subscription_ID__c
            }
           else{
            oliLinesLst.add(oli);//storing oli when cli is NULL
            }
        }

        if(oliLinesLst.size()>0){
            for (OpportunityLineItem oliLine : oliLinesLst){
                if(cliSubsIdSet.contains(oliLine.Asset_Serial_Num__c)){
                    cliIdToSubsOLIMap.put(oliLine.Asset_Serial_Num__c, oliLine); // Mapping OLIs if we find Asset Serial Number for completed OLIs
                }
            }
        }

        for(OpportunityLineItem oli: lsOpptyLineItem){//Iterating over all the open Value based OLIs
            OpportunityLineItem renewedOLI = cliIdToSubsOLIMap.get(String.valueOf(oli.Contract_Line_Item__r.Pelican_Subscription_Id__c)); //Fetching the renewed OLI

            if(renewedOLI == null) { //if there is no renewed OLI found, store them for further processing
                remainingOLIMap.put(String.valueOf(oli.Contract_Line_Item__r.Pelican_Subscription_Id__c), oli);
                orderNoToOppLineItemSet.add(oli.Contract_Line_Item__r.Pelican_Order__c);
            }
            //Check if Ramp deal is marked true either for renewed OLI or sales oppty only if there exists no renewed OLI
            if((renewedOLI != null && renewedOLI.Ramp_Deal__c)){
                oli.Ramp_Deal__c = true;
                if(!updateOLIMap.containsKey(String.valueOf(oli.Id))){
                    updateOLI.add(oli);
                    updateOLIMap.put(String.valueOf(oli.Id), oli);
                }
            }
        }

        //If remainingOLIMap is populated, then process those OLIs with their corresponding previous Sales OLI
        for(OpportunityLineItem salesOLI: [SELECT Id, OpportunityId, Subscription_Id__c, Opportunity.Pelican_Order_Number__c, Renewal_Status__c, Ramp_Deal__c 
            FROM OpportunityLineItem WHERE Opportunity.RecordType.Name = 'Autodesk Opportunity' AND Renewal_Status__c IN ('Closed', 'Completed') 
            AND Opportunity.Pelican_Order_Number__c IN :orderNoToOppLineItemSet AND Subscription_Id__c IN :remainingOLIMap.keySet()]){
                OpportunityLineItem oli = remainingOLIMap.get(String.valueOf(salesOLI.Subscription_Id__c));
                if(oli!=null && salesOLI.Ramp_Deal__c){
                    oli.Ramp_Deal__c = true;
                    if(!updateOLIMap.containsKey(String.valueOf(oli.Id))){
                        updateOLI.add(oli);
                        updateOLIMap.put(String.valueOf(oli.Id), oli);
                    }
                }
        }

        if (updateOLI.size() > 0) {
            MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
            MJA_OpportunityUtility.SKIP_OPPORTUNITYLINEITEM_TRIGGER = true;
            update updateOLI;
        }
    }
}
