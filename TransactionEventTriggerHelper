/********************************************************************
* Copyright by Autodesk, Inc
* The information contained herein is confidential, proprietary to Autodesk, Inc., and considered a trade secret as defined in section
* 499C of the penal code of the State of California. Use of this information by anyone other than authorized employees of
* Autodesk, Inc. is granted only under a written non-disclosure agreement, expressly prescribing the scope and manner of such use. *
* $Id$: TransactionTrigger
* $Created Date$: 25-July-2023
* $Author$: Aparna Anisetti
***********************************************************************************************************************/
public without sharing class TransactionEventTriggerHelper {
public static Map<Id, Integer> oppCLIsUpdatedMap = new Map<Id, Integer>();
public static Map<Id, ContractLineItem> cliIdRecMap = new Map<Id, ContractLineItem>();
public static Map<Id, ContractLineItem> cliIdCliRec = new Map<Id, ContractLineItem>();
public static List<OpportunityLineItem> oliLstToBeUpdated = new List<OpportunityLineItem>();
public static List<OpportunityLineItem> oppLineItemLst = new List<OpportunityLineItem>();
public static Set<Id> oppIds = new Set<Id>();
public static Set<Id> previousOppIds = new Set<Id>();
public static Set<String> uniqueKeyCliOppId = new Set<String>();
public static Map<Id, String> cliRecPaymentOldMap = new Map<Id, String>();
public static Map<Id, String> cliRecAssetSeatOldMap = new Map<Id, String>();
public static Map<Id, String> cliRecAssetMoveOldMap = new Map<Id, String>();
public static Map<Id, String> cliRecContractMergeOldMap = new Map<Id, String>();
public static Map<Id, String> cliRecCMChangeOldMap = new Map<Id, String>();
public static Map<Id, String> cliRecAccountMergeOldMap = new Map<Id, String>();
public static Map<Id, String> cliRecContractTransferOldMap = new Map<Id, String>();
public static Set<Id> newCliIdList = new Set<Id>();
public static Set<Id> survivorAccountIdSet = new Set<Id>();
public static Map<Id, Transaction__c> transLstTobeUpdatedWithSuccesFailure = new Map<Id, Transaction__c>();
public static Map<Id, Id> transLstTobeUpdated = new Map<Id, Id>();
public static List<Id> opportunityIds = new List<Id>();
public static Map<Id, Boolean> oppIdPendingUpdateMap = new Map<Id, Boolean>();
public static List<ContractLineItem> newcliAssetSplitLst = new List<ContractLineItem>();
private static Map<String, Opportunity> renewalKeyOpportunityMap = new Map<String, Opportunity>();
private static Map<Id, String> victimCliWithNewKeyMap = new Map<Id, String>();
private static Set<Id> failedVictimOppIds = new Set<Id>(); //DAASN-22772
private static String currentChangeType = '';

public static void processSolutionProviderChangesCLI(List<Transactions__e> txnEvntsSPLst, String changeFlag) {
    for (Transactions__e transac : txnEvntsSPLst) {
        processSolutionProviderChanges(new List<Transactions__e>{ transac }, changeFlag);
    }
}
 
    public static void processDistributorChangesCLI(List<Transactions__e> txnEvntsSPLst, String changeFlag) {
        for (Transactions__e transac : txnEvntsSPLst) {
            processDistributorChanges(new List<Transactions__e>{ transac }, changeFlag);
        }
    }

    // Change Distributor Logic: -- > CRMEAGLE-3389
    private static void processDistributorChanges(List<Transactions__e> txnEvntsSPLst, String changeFlag){
        List<Id> lstOppIdsToBeCancelled = new List<Id>();
        Set<Id> oliSet = new Set<Id>();
        Map<Id, Integer> oppIdTotalCliCount = new Map<Id, Integer>();
        List<OpportunityLineItem> oliLst = new List<OpportunityLineItem>();
        Map<Id, OpportunityLineItem> cliIdOliRecMap = new Map<Id, OpportunityLineItem>();
        Map<Id, List<ContractLineItem>> oppClisMap = new Map<Id, List<ContractLineItem>>();
        Map<Id, Opportunity> oppMap = new Map<Id, Opportunity>();

        Set<Id> oppIdsLst = new Set<Id>();
        List<Opportunity> oppLst = new List<Opportunity>();
        Set<Id> cliIdsSet = new Set<Id>();
        Set<String> opptyKeys = new Set<String>();
        Set<Id> OpptyIds = new Set<Id>();
        Set<Id> parentOpptyId = new Set<Id>();
        List<Opportunity> victimOpptyId = new List<Opportunity>();
        String recordtypeName;
        List<Transaction__c> txnToUpdate = new List<Transaction__c>();
        Boolean processOCRDeletionCreation = false;
        List<ContractLineItem> cliUpdatedLst = new List<ContractLineItem>();
        List<OpportunityLineItem> oliLstToBeUpdatedToCancelled = new List<OpportunityLineItem>();
        Set<Id> oliIdsTobeDeleted = new Set<Id>();


        try {
            cliIdRecMap = genericProcessCliIds(txnEvntsSPLst); 
            
            for (OpportunityLineItem oli : [SELECT Id, Quantity, Quantity_To_Reduce__c, Contract_Line_Item__c, Payment_Method__c,
                                            OpportunityId, Name, Renewal_Status__c, Estimated_Subscriptions__c, Contract_Line_Item__r.ServiceContractId, 
                                            Opportunity.Name, Opportunity.Partner_Account__c, Opportunity.CurrencyIsoCode, Opportunity.Opportunity_Tags__c,
                                            Opportunity.Description, Opportunity.StageName, Opportunity.ownerId, Opportunity.Opportunity_Key__c, CurrencyIsoCode,
                                            Opportunity.CloseDate, Opportunity.Pending_Update__c, Opportunity.Expiration_Date__c, Opportunity.Expiry_Date__c,  
                                            Opportunity.Discount_Approval_Status__c,Opportunity.Partner_Type__c,Opportunity.Fulfillment_Category__c,Opportunity.Opportunity_Classification__c FROM OpportunityLineItem WHERE Contract_Line_Item__c IN :cliIdRecMap.keySet() AND OpportunityId IN :oppIds]) {
                
                oppMap.put(oli.OpportunityId, new Opportunity(Id = oli.OpportunityId, CurrencyIsoCode = oli.CurrencyIsoCode, CloseDate = oli.Opportunity.CloseDate,Partner_Type__c=oli.Opportunity.Partner_Type__c,Fulfillment_Category__c = oli.Opportunity.Fulfillment_Category__c,Opportunity_Classification__c = oli.Opportunity.Opportunity_Classification__c));
                String tempKey = oli.Contract_Line_Item__c + ':' + oli.OpportunityId;
                if (uniqueKeyCliOppId.contains(tempKey)) {
                    oliLst.add(oli);
                }
            }
            
            system.debug('oliLst##' + oliLst);
            AggregateResult[] cliCount = [SELECT count(Id), Opportunity__c  FROM contractLineItem WHERE Opportunity__c IN :opportunityIds GROUP BY Opportunity__c];
            for (AggregateResult agr : cliCount) {
                oppIdTotalCliCount.put((Id) agr.get('Opportunity__c'), (Integer) agr.get('expr0'));
            }
            recordtypeName = cliIdRecMap.values().get(0).recordtype.Name;
            System.debug('recordtypeName = '+recordtypeName);
            if (oliLst.size() > 0) {
                for (OpportunityLineItem oli : oliLst) {
                    oliSet.add(oli.id);
                    lstOppIdsToBeCancelled.add(oli.OpportunityId);
                }
            }

            if (recordtypeName == 'ODM') {
                oppClisMap = generateOppClisMapForDistributor(cliIdRecMap.values());
            } 
            system.debug(oppClisMap + 'oppClisMap>>>');
            if (oppIds.size() > 0) {
                if (oliLst.isEmpty()) {
                    oppIdsLst.addAll(oppIds);
                } else {
                    for (OpportunityLineItem oli : oliLst) {
                        oppIdsLst.add(oli.OpportunityId);
                        cliIdOliRecMap.put(oli.Contract_Line_Item__c, oli);
                    }
                }
            }

            if (recordtypeName == 'ODM') {
                SUBS_OpportunityCreationUtility.distributorAccountMap = SUBS_OpportunityCreationUtility.getDistributorAccountMap(cliIdRecMap.values(), 'ODM');
            } 
            getCliWithNewKeyForDistributor(cliIdRecMap.values());

            for (Id oppId : oppCLIsUpdatedMap.keySet()) {
                if (oppCLIsUpdatedMap.get(oppId) != oppIdTotalCliCount.get(oppId)) {
                    cliUpdatedLst.addAll(oppClisMap.get(oppId));
                } else {
                    OpptyIds.add(OppId);
                    opptyKeys.add(victimCliWithNewKeyMap.get(oppClisMap?.get(oppId)[0]?.Id));
                }
            }
            returnExistingOppty(opptyKeys, OpptyIds);
            for (Id oppId : OpptyIds) {
                Opportunity opty = oppMap.get(oppId);
                if (recordtypeName == 'ODM') {  
                    opty.Opportunity_Key__c = SUBS_OpportunityCreationUtility.getRenewalKey(oppClisMap.get(oppId)[0]);
                    opty.Name = getSubscriptionOppNameForDistributor(oppClisMap.get(oppId)[0], opty);
                    //opty.Primary_Contact__c = oppClisMap.get(oppId)[0]?.Purchaser__c;
                    opty.SoldToAccount__c = oppClisMap.get(oppId)[0]?.Distributor__c;
                    oppLst.add(opty);
                    oppIdsLst.add(opty.Id);
                }

            }
            /*if (parentOpptyId.isEmpty() == false) {
                //handleSubsOpptyMergeForDistributor(cliIdRecMap, changeFlag, victimOpptyId, renewalKeyOpportunityMap, txnToUpdate, victimCliWithNewKeyMap);
            }  */      
            if (oppLst.size() > 0) {
                MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
                update oppLst;
                MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = false;
            }
            if (cliUpdatedLst.size() > 0) {
                for (ContractLineItem cli : cliUpdatedLst) {
                    if (cliIdOliRecMap.get(cli.Id) != null) {
                        oliLstToBeUpdatedToCancelled.add(cliIdOliRecMap.get(cli.Id));
                        oliIdsTobeDeleted.add(cliIdOliRecMap.get(cli.Id)?.Id);
                    }
                }
                if (oliIdsTobeDeleted.size() > 0 && recordtypeName == 'ODM') {
                    updateOliAndCreateNewOpptyOli(oliLstToBeUpdatedToCancelled, oliIdsTobeDeleted, cliUpdatedLst, null);
                }
            }
            for (Id oppId : oppIdsLst) {
                if (transLstTobeUpdatedWithSuccesFailure.containsKey(oppId)) {
                    Transaction__c t = transLstTobeUpdatedWithSuccesFailure.get(oppId);
                    t.Status__c = failedVictimOppIds.contains(oppId) ? 'Failed' : 'Success'; //DAASN-22772
                    txnToUpdate.add(t);
                    oppIdPendingUpdateMap.put(oppId, false);
                }
            }
            update txnToUpdate;
        }
        catch (Exception e) {
            for (Transaction__c t : transLstTobeUpdatedWithSuccesFailure.values()) {
                oppIdPendingUpdateMap.put(t.Opportunity__c, true);
                t.Status__c = 'Failed';
                t.Error__c = e.getMessage() + 'Line No:' + e.getLineNumber()  + ' Stack trace:' + e.getStackTraceString();
                txnToUpdate.add(t);
            }
            update txnToUpdate;
            updatePendingUpdateOnOpp(oppIdPendingUpdateMap);
        }
    }

    // Change Distributor Logic: -- > CRMEAGLE-3389
    private static Map<Id, List<ContractLineItem>> generateOppClisMapForDistributor(List<ContractLineItem> cliFieldsLst) {
        Map<Id, List<ContractLineItem>> oppCLIsMap = new Map<Id, List<ContractLineItem>>();
        List<ContractLineItem> cliTempLst;
        for (ContractLineItem cli : cliFieldsLst) {
            if (cli.Opportunity__r.isClosed == false && cli.Opportunity__r.Product_Count__c > 0) {
                //Added this if block for DAASN-21958
                if (!oppCLIsMap.containsKey(cli.Opportunity__c)) {
                    cliTempLst = new List<ContractLineItem>();
                    cliTempLst.add(cli);
                    oppCLIsMap.put(cli.Opportunity__c, cliTempLst);
                } else {
                    cliTempLst = oppCLIsMap.get(cli.Opportunity__c);
                    cliTempLst.add(cli);
                    oppCLIsMap.put(cli.Opportunity__c, cliTempLst);
                }
            }
        }
        return oppCLIsMap;
    }
    // Change Distributor Logic: -- > CRMEAGLE-3389
    private static void getCliWithNewKeyForDistributor(List<ContractLineItem> cliFieldsLst) {
        String newkeyForVictim;
        for (ContractLineItem cli : cliFieldsLst) {
            if (cli.RecordType.Name == 'ODM') {
                newkeyForVictim = SUBS_OpportunityCreationUtility.getRenewalKey(cli);
            } 
            victimCliWithNewKeyMap.put(cli.Id, newkeyForVictim);
        }
    }

    // Change Distributor Logic: -- > CRMEAGLE-3389
    private static String getSubscriptionOppNameForDistributor(ContractLineItem cli, Opportunity opp) {
            String accountName = cli.ServiceContract.Account.Name;
            String subsOppName = '';
            if (SUBS_OpportunityCreationUtility.distributorAccountMap.size() == 0) {
                SUBS_OpportunityCreationUtility.getDistributorAccountMap(new List<ContractLineItem>{ cli }, 'ODM');
            }
            if (accountName != null && accountName.length() > 80) {
                accountName = accountName.substring(0, 80);
            }
            if (cli.Distributor__c != null && SUBS_OpportunityCreationUtility.distributorAccountMap.containsKey(cli.Distributor__r.Account_CSN__c)) {
                SubsOppName = accountName + ' - Renewal - ' + Opp.CloseDate.month() + '/' + Opp.CloseDate.day() + '/' + Opp.CloseDate.year() + ' - ' + cli.Distributor__r.Account_CSN__c;
            } else {
                SubsOppName = accountName + ' - Renewal - ' + Opp.CloseDate.month() + '/' + Opp.CloseDate.day() + '/' + Opp.CloseDate.year() + ' - Direct';
            }
            //Account Name + Agreement Number + Renewal CLI End date - Renewal
            return SubsOppName;
        }

   /* private static void handleSubsOpptyMergeForDistributor(Map<Id, ContractLineItem> cliIdRecMap, String transactionType, List<Opportunity> victimOppList,
                                                         Map<String, Opportunity> survivorOppKeyMap, List<Transaction__c> txnList, Map<Id, String> victimCliWithNewKeyMap) {
        Map<Id, OpportunityLineItem> oliToDelete = new Map<Id, OpportunityLineItem>();
        Map<Id, Id> victimOppIdWithSurvivorIdMap = new Map<Id, Id>();
        Map<Id, Set<Id>> victimWithSurvivorMap = new Map<Id, Set<Id>>(); //DAASN-22133
        Map<Id, Opportunity> updateSubOppMap = new Map<Id, Opportunity>();
        Map<Id, OpportunityLineItem> cotermOliMap = new Map<Id, OpportunityLineItem>(); //DAASN-22983
        List<OpportunityLineItem> oliToInsert = new List<OpportunityLineItem>();
        Map<Id, ContractLineItem> cliToUpdate = new Map<Id, ContractLineItem>();
        List<String> allowedDDAStatus = new List<String>{ 'Rejected', 'Expired', 'Not Submitted' };
        Set<Id> successOpptySet = new Set<Id>();
        Set<Id> genericUserIds = new Set<Id>(); //DAASN-22133
        Id oppOwnerId; //DAASN-22133
        Boolean updateSurvivorOppty; //DAASN-22133
        SUBS_MigrateRelatedRecordsUtility.subsOpptyMerge = true; //DAASN-22133
        SavePoint sp;
        if (!Test.isRunningTest()) {
            sp = Database.setSavePoint();
        }
        try {
            Map<Id, Opportunity> victimOppMap = new Map<Id, Opportunity>(victimOppList);
            genericUserIds = TransactionEventTriggerHelperUtility.genericUserIds(); //DAASN-22133

            //Query the victim CLI to generate a key
            Map<Id, ContractLineItem> victimCliMap = new Map<Id, ContractLineItem>();
        
            for(ContractLineItem cli : cliIdRecMap.values()){
                if(!victimCliMap.containsKey(cli.Opportunity__c) && victimOppMap.containsKey(cli.Opportunity__c) ){
                    victimCliMap.put(cli.Id, cli);
                }
            }

            //Check if the new exist in the survivor oppty. If yes, move all victim line items to survivor oppty else update the victim oppty key with survivor CSN
            String whereClause = 'OpportunityId IN : victimOppList';
            for (OpportunityLineItem vOli : database.query(DROM_OpportunityPriceService.getOliQueryForClone(whereClause))) {
                String newKey = victimCliWithNewKeyMap.containsKey(vOli.Contract_Line_Item__c) ? victimCliWithNewKeyMap.get(vOli.Contract_Line_Item__c) : null;
                if (vOli.Line_Item_Action__c == 'Co-term' && vOli.Contract_Line_Item__c == null && vOli.Reference_Subscription__c != null) {
                    //DAASN-22983
                    cotermOliMap.put(vOli.Id, vOli);
                } else if (newKey != null && survivorOppKeyMap.containsKey(newKey) && survivorOppKeyMap.get(newKey).currencyIsoCode == victimOppMap.get(vOli.OpportunityId).CurrencyISOCode && 
                            (String.isBlank(victimOppMap.get(vOli.OpportunityId).Discount_Approval_Status__c) || allowedDDAStatus.contains(victimOppMap.get(vOli.OpportunityId).Discount_Approval_Status__c))) {
                    //Added CurrencyIsoCode Condition for DAASN-22772 EMEA Multi-currency
                    OpportunityLineItem oliNew = new OpportunityLineItem();
                    oliNew = vOli.clone(false, true, true, true);
                    oliNew.opportunityId = survivorOppKeyMap.get(newKey).Id;
                    oliToInsert.add(oliNew);
                    oliToDelete.put(vOli.Id, vOli);
                    if (vOli.Contract_Line_Item__c != null) {
                        //Added this condition for DAASN-22983
                        ContractLineItem cli = new ContractLineItem();
                        cli.Opportunity__c = survivorOppKeyMap.get(newKey).Id;
                        cli.Previous_Opportunity__c = vOli.OpportunityId;
                        cli.Id = vOli.Contract_Line_Item__c;
                        cliToUpdate.put(cli.Id, cli);
                    }
                    victimWithSurvivorMap.put(vOli.OpportunityId, new Set<Id>{ survivorOppKeyMap.get(newKey).Id }); //DAASN-22133
                    victimOppIdWithSurvivorIdMap.put(vOli.OpportunityId, survivorOppKeyMap.get(newKey).Id);
                    updateSurvivorOppty = false; //DAASN-22133
                    //DAASN-22133 Starts
                    String survivorOppTags = survivorOppKeyMap.get(newKey).Opportunity_Tags__c == null ? '' : survivorOppKeyMap.get(newKey).Opportunity_Tags__c;
                    String survivorOppDesc = survivorOppKeyMap.get(newKey).Description == null ? '' : survivorOppKeyMap.get(newKey).Description + '\n';
                    String concatOppTags = survivorOppTags;
                    String concatDesc = survivorOppDesc;

                    String victimOppTags = victimOppMap.get(vOli.OpportunityId).Opportunity_Tags__c == null ? '' : victimOppMap.get(vOli.OpportunityId).Opportunity_Tags__c;
                    String victimOppDesc = victimOppMap.get(vOli.OpportunityId).Description == null ? '' : victimOppMap.get(vOli.OpportunityId).Description;
                    Integer victimOppStageRank = SUBS_MigrateRelatedRecordsUtility.getPartnerFieldScore(victimOppMap.get(vOli.OpportunityId).StageName, 'StageName');
                    Integer survivorOppStageRank = SUBS_MigrateRelatedRecordsUtility.getPartnerFieldScore(survivorOppKeyMap.get(newKey).StageName, 'StageName');
                    String oppStageName = victimOppStageRank > survivorOppStageRank ? victimOppMap.get(vOli.OpportunityId).stageName : survivorOppKeyMap.get(newKey).StageName;

                    if (String.isNotBlank(victimOppTags) && !concatOppTags.contains(victimOppTags)) {
                        concatOppTags += ';' + victimOppTags;
                        updateSurvivorOppty = true;
                    }
                    if (String.isNotBlank(victimOppDesc) && !survivorOppDesc.contains(victimOppDesc)) {
                        concatDesc += victimOppDesc + '\n';
                        updateSurvivorOppty = true;
                    }

                    if (genericUserIds.contains(survivorOppKeyMap.get(newKey).ownerId) && !genericUserIds.contains(victimOppMap.get(vOli.OpportunityId).ownerId)) {
                        oppOwnerId = victimOppMap.get(vOli.OpportunityId).ownerId;
                        updateSurvivorOppty = true;
                    } else {
                        oppOwnerId = survivorOppKeyMap.get(newKey).ownerId;
                        updateSurvivorOppty = true;
                    }

                    if (updateSurvivorOppty == true) {
                        Opportunity opp = new Opportunity(Id = survivorOppKeyMap.get(newKey).Id, Description = concatDesc, Opportunity_Tags__c = concatOppTags, ownerId = oppOwnerId, StageName = oppStageName);
                        //DAASN-22502 - Updated LC flag on oppty
                        if (survivorOppKeyMap.get(newKey).Originated_from_LC__c == false && vOli.LC_In_Effect_Period__c > system.today()) {
                            opp.Originated_from_LC__c = true;
                        }
                        System.debug('** Update survivor Oppty ***' + opp);
                        updateSubOppMap.put(opp.Id, opp);
                    }
                    //DAASN-22133 Ends

                    //Update the victim oppty with parent oppty as survivor oppty and closed the victim oppty
                    if (transactionType == 'Account Merge' && vOli.Contract_Line_Item__c != null) {
                        //Added cli condition for DAASN-22983
                        Opportunity opp = new Opportunity(Parent_Opportunity_ID__c = survivorOppKeyMap.get(newKey).Id, Id = vOli.OpportunityId, StageName = 'Closed/Lost', Actual_Close_Date__c = system.today(), Originated_from_LC__c = false, Reason__c = 'Auto-Close', Sub_Reason__c = 'Account Merge', Name = SUBS_OpportunityCreationUtility.getSubscriptionOppName(victimCliMap.get(vOli.Contract_Line_Item__c), survivorOppKeyMap.get(newKey)));
                        updateSubOppMap.put(opp.Id, opp);
                    } else {
                        Opportunity opp = new Opportunity(Parent_Opportunity_ID__c = survivorOppKeyMap.get(newKey).Id, Id = vOli.OpportunityId, StageName = 'Closed/Lost', Actual_Close_Date__c = system.today(), Originated_from_LC__c = false, Reason__c = 'Auto-Close', Sub_Reason__c = transactionType, Forecast_Category__c = 'Omitted'); //DAASN-22502 added LC flag reset
                        updateSubOppMap.put(opp.Id, opp);
                    }
                } else {
                    if (vOli.Contract_Line_Item__c != null) {
                        //Added cli condition for DAASN-22983
                        Opportunity opp = new Opportunity(Opportunity_Key__c = newKey, Id = vOli.OpportunityId, Name = SUBS_OpportunityCreationUtility.getSubscriptionOppName(victimCliMap.get(vOli.Contract_Line_Item__c), victimOppMap.get(vOli.OpportunityId)));
                        updateSubOppMap.put(opp.Id, opp);
                    }
                }
            }
            //Added logic for co-term DAASN-22983 Starts
            if (transactionType == 'Account Merge') {
                for (OpportunityLineItem oli : cotermOliMap.values()) {
                    if (updateSubOppMap.containsKey(oli.OpportunityId) && updateSubOppMap.get(oli.OpportunityId).Parent_Opportunity_ID__c != null) {
                        System.debug('***Inside co-term oli ***');
                        OpportunityLineItem oliNew = new OpportunityLineItem();
                        oliNew = oli.clone(false, true, true, true);
                        oliNew.opportunityId = updateSubOppMap.get(oli.OpportunityId).Parent_Opportunity_ID__c;
                        oliToInsert.add(oliNew);
                        oliToDelete.put(oli.Id, oli);
                    }
                }
            }
            //DAASN-22983 Ends
            //As we can't reparent the OLI with survivor oppty id, deleting the victim oppty line items
            if (oliToDelete.size() > 0) {
                delete oliToDelete.values();
            }
            //Clone and re-insert the victim oppty OLIs under survivor oppty
            if (oliToInsert.size() > 0) {
                insert oliToInsert;
            }
            //update cli with new Oppty
            if (cliToUpdate.size() > 0) {
                ADSK_ContractLineItemTriggerHandler.skipADSKContractLineItemTrigger = true;
                update cliToUpdate.values();
                ADSK_ContractLineItemTriggerHandler.skipADSKContractLineItemTrigger = false;
            }
            //Close the victim oppty or update the key
            if (updateSubOppMap.size() > 0) {
                MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
                List<Database.SaveResult> updateResults = Database.update(updateSubOppMap.values(), true);
                MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = false;

                for (Database.SaveResult sr : updateResults) {
                    if (sr.isSuccess()) {
                        successOpptySet.add(sr.getId());
                    }
                }
            }
            //DAASN-22133 Starts - Faced too many SOQL issue so moved this to queueable job
            if (!victimWithSurvivorMap.isEmpty() || !victimOppIdWithSurvivorIdMap.isEmpty()) {
                System.enqueueJob(new SUBS_MigrateRelatedRecordsQueueable(victimWithSurvivorMap, victimOppIdWithSurvivorIdMap, successOpptySet));
            }
            //DAASN-22133 Ends
            if (!txnList.isEmpty()) {
                TransactionEventTriggerHelper.updateTransactionStatus(txnList, 'Success', '');
            }
        } catch (Exception e) {
            if (!Test.isRunningTest() && sp != null) {
                Database.rollBack(sp);
            }
            if (!txnList.isEmpty()) {
                for (Transaction__c txn : txnList) {
                    txn.Status__c = 'Failed';
                    txn.Error__c = 'Message:' + e.getMessage() + ' Line No:' + e.getLineNumber() + ' Stack trace:' + e.getStackTraceString() + ' Cause:' + e.getCause();
                }
                update txnList;
            } else {
                for (Opportunity victimOpp : victimOppList) {
                    //DAASN-22772
                    failedVictimOppIds.add(victimOpp.Id);
                }
            }
        }
    }
    */
public static void processSolutionProviderChanges(List<Transactions__e> txnEvntsSPLst, String changeFlag) {
    Map<Id, Integer> oppIdTotalCliCount = new Map<Id, Integer>();
    Boolean processOCRDeletionCreation = false;
    List<OpportunityLineItem> oliLst = new List<OpportunityLineItem>();
    Map<Id, OpportunityLineItem> cliIdOliRecMap = new Map<Id, OpportunityLineItem>();
    List<OpportunityLineItem> oliLstToBeUpdatedToCancelled = new List<OpportunityLineItem>();
    Set<Id> oliIdsTobeDeleted = new Set<Id>();
    List<ContractLineItem> cliUpdatedLst = new List<ContractLineItem>();
    String recordtypeName;
    List<Id> lstOppIdsToBeCancelled = new List<Id>();
    Set<Id> oliSet = new Set<Id>();
    List<Transaction__c> txnToUpdate = new List<Transaction__c>();
    try {
        cliIdRecMap = genericProcessCliIds(txnEvntsSPLst);
        oliLst = returnOpptyLineItems(cliIdRecMap, oppIds);
        system.debug('oliLst##' + oliLst);
        AggregateResult[] cliCount = [SELECT count(Id), Opportunity__c FROM contractLineItem WHERE Opportunity__c IN :opportunityIds GROUP BY Opportunity__c];
        for (AggregateResult agr : cliCount) {
            oppIdTotalCliCount.put((Id) agr.get('Opportunity__c'), (Integer) agr.get('expr0'));
        }

        if (oliLst.size() > 0) {
            for (OpportunityLineItem oli : oliLst) {
                oliSet.add(oli.id);
                lstOppIdsToBeCancelled.add(oli.OpportunityId);
            }
        }

        Map<Id, List<ContractLineItem>> oppClisMap = new Map<Id, List<ContractLineItem>>();
        Map<Id, Opportunity> oppMap = new Map<Id, Opportunity>();

        Set<Id> oppIdsLst = new Set<Id>();
        List<Opportunity> oppLst = new List<Opportunity>();
        Set<Id> cliIdsSet = new Set<Id>();

        cliIdsSet.addAll(cliIdRecMap.keySet());
        system.debug(cliIdsSet + 'cliIdsSet>>>>');
        recordtypeName = [SELECT id, recordtype.Name FROM contractLineItem WHERE Id IN :cliIdsSet][0].recordtype.Name;

        if (recordtypeName == 'ODM') {
            oppClisMap = SUBS_ContractLineItemAgentChangeService.generateOppClisMap(cliIdsSet);
        } else {
            oppClisMap = SUBS_ContractLineItemAgentChangeService.generateOppClisMapIndirect(cliIdsSet);
        }
        system.debug(oppClisMap + 'oppClisMap>>>');
        if (oppIds.size() > 0) {
            //Added currencyIsoCode in the query for DAASN-22772
            oppMap = new Map<Id, Opportunity>([SELECT Id, Name, Partner_Account__c, CurrencyIsoCode, Opportunity_Tags__c, Description, StageName, ownerId, Opportunity_Key__c, CloseDate, Pending_Update__c, Expiration_Date__c, Expiry_Date__c, Discount_Approval_Status__c,Fulfillment_Category__c,Partner_Type__c,Opportunity_Classification__c,SoldToAccount__c FROM Opportunity WHERE Id IN :oppIds]); //Added fields Opportunity_Tags__c, Description, StageName, ownerId for DAASN-22133
            if (oliLst.isEmpty()) {
                oppIdsLst.addAll(oppIds);
            } else {
                for (OpportunityLineItem oli : oliLst) {
                    oppIdsLst.add(oli.OpportunityId);
                    cliIdOliRecMap.put(oli.Contract_Line_Item__c, oli);
                }
            }
        }
        system.debug(oppCLIsUpdatedMap + 'oppCLIsUpdatedMap>>>>>');
        system.debug(oppIdTotalCliCount + 'oppIdTotalCliCount>>>>');
        //CRMEAGLE-1224 -Aryan Saini
        if (recordtypeName == 'ODM') {
            SUBS_OpportunityCreationUtility.resellerAccountMap = SUBS_OpportunityCreationUtility.getResellerAccountMap(cliIdRecMap.values(), 'ODM');
        } else {
            SUBS_TransitionSubscriptionOpptyUtility.resellerAccountMap = SUBS_OpportunityCreationUtility.getResellerAccountMap(cliIdRecMap.values(), 'Indirect');
        }
        //  Modification as part of // CRMEAGLE-1075
        getCliWithNewKey();
        Set<String> opptyKeys = new Set<String>();
        Set<Id> OpptyIds = new Set<Id>();
        Set<Id> parentOpptyId = new Set<Id>();
        List<Opportunity> victimOpptyId = new List<Opportunity>();
        for (Id oppId : oppCLIsUpdatedMap.keySet()) {
            if (oppCLIsUpdatedMap.get(oppId) != oppIdTotalCliCount.get(oppId)) {
                cliUpdatedLst.addAll(oppClisMap.get(oppId));
            } else {
                //  Modification as part of // CRMEAGLE-1075
                OpptyIds.add(OppId);
                opptyKeys.add(victimCliWithNewKeyMap.get(oppClisMap?.get(oppId)[0]?.Id));
                processOCRDeletionCreation = true;
            }
        }

        // START -- CRMEAGLE-1075
        returnExistingOppty(opptyKeys, OpptyIds);

        for (Id oppId : OpptyIds) {
            if (renewalKeyOpportunityMap.get(victimCliWithNewKeyMap.get(oppClisMap?.get(oppId)[0]?.Id)) != null && renewalKeyOpportunityMap.get(victimCliWithNewKeyMap.get(oppClisMap.get(oppId)[0].Id)).CurrencyIsoCode == oppMap.get(oppId).CurrencyIsoCode) {
                //Added currency condition for EMEA mult-currency DAASN-22772
                parentOpptyId.add(renewalKeyOpportunityMap.get(victimCliWithNewKeyMap.get(oppClisMap.get(oppId)[0].Id)).Id);
                victimOpptyId.add(oppMap.get(oppId));
            } else {
                Opportunity opty = oppMap.get(oppId);
                if (changeFlag != 'Purchaser Change' && recordtypeName == 'ODM') {
                    if (
                        !oppClisMap.isEmpty() && !oppClisMap.get(oppId).isEmpty() //CRMEAGLE-1224 -Aryan Saini
                    ) {
                        ContractLineItem cli = oppClisMap.get(oppId)[0];
                        opty.Fulfillment_Category__c = cli.Reseller_Account__c != null && SUBS_OpportunityCreationUtility.resellerAccountMap.containsKey(cli.Reseller_Account__r.Account_CSN__c)  && cli.Sales_Channel__c !='Resale' ? 'Agency' : cli.Sales_Channel__c !='Resale'? 'Direct' : opty.Fulfillment_Category__c;
                        opty.Opportunity_Classification__c = opty.Fulfillment_Category__c == 'Agency' && cli.Sales_Channel__c !='Resale'  ? 'Partner' :  cli.Sales_Channel__c !='Resale' ?'Autodesk' : opty.Opportunity_Classification__c  ;
                        opty.Partner_Account__c = opty.Fulfillment_Category__c == 'Agency'&& cli.Sales_Channel__c !='Resale' ? SUBS_OpportunityCreationUtility.resellerAccountMap.get(cli.Reseller_Account__r.Account_CSN__c).Id :  cli.Sales_Channel__c !='Resale'? null : cli.Reseller_Account__c;
                        if(cli.ServiceContract.Account.Country_Lookup__r.Primary_Partner_Motion__c =='Resale' && cli.Distributor__c==null){
                            opty.SoldToAccount__c = opty.Partner_Account__c ;
                        }
                        opty.Partner_Type__c = opty.Fulfillment_Category__c == 'Agency' && cli.Sales_Channel__c !='Resale' ? SUBS_OpportunityCreationUtility.resellerAccountMap.get(cli.Reseller_Account__r.Account_CSN__c).Partner_Type__c :  cli.Sales_Channel__c !='Resale'? null : opty.Partner_Type__c ;
                    }
                }

                if (recordtypeName == 'ODM') {
                    opty.Opportunity_Key__c = SUBS_OpportunityCreationUtility.getRenewalKey(oppClisMap.get(oppId)[0]);
                    opty.Name = SUBS_OpportunityCreationUtility.getSubscriptionOppName(oppClisMap.get(oppId)[0], opty);
                    opty.Primary_Contact__c = oppClisMap.get(oppId)[0]?.Purchaser__c;
                } else {
                    if (
                        !oppClisMap.isEmpty() && !oppClisMap.get(oppId).isEmpty() //CRMEAGLE-1224 -Aryan Saini
                    ) {
                        ContractLineItem cli = oppClisMap.get(oppId)[0];
                        opty.Fulfillment_Category__c = cli.Asset__r.Reseller_Account__c != null && SUBS_TransitionSubscriptionOpptyUtility.resellerAccountMap.containsKey(cli.Asset__r.Reseller_Account__r.Account_CSN__c) ? 'Agency' : 'Direct';
                        opty.Opportunity_Classification__c = opty.Fulfillment_Category__c == 'Agency' ? 'Partner' : 'Autodesk';
                        opty.Partner_Account__c = opty.Fulfillment_Category__c == 'Agency' ? SUBS_TransitionSubscriptionOpptyUtility.resellerAccountMap.get(cli.Asset__r.Reseller_Account__r.Account_CSN__c).Id : null;
                        opty.Partner_Type__c = opty.Fulfillment_Category__c == 'Agency' ? SUBS_TransitionSubscriptionOpptyUtility.resellerAccountMap.get(cli.Asset__r.Reseller_Account__r.Account_CSN__c).Partner_Type__c : null;
                    }
                    opty.Opportunity_Key__c = SUBS_TransitionSubscriptionOpptyUtility.getRenewalKey(oppClisMap.get(oppId)[0]);
                    opty.Name = SUBS_TransitionSubscriptionOpptyUtility.getSubscriptionOppName(oppClisMap.get(oppId)[0], opty);
                }

                oppLst.add(opty);
                oppIdsLst.add(opty.Id);
            }
        }
        //  String VictimFilter = ' AND Id IN:victimOpptyId';
        if (parentOpptyId.isEmpty() == false) {
            handleSubsOpptyMerge(changeFlag, victimOpptyId, renewalKeyOpportunityMap, txnToUpdate, victimCliWithNewKeyMap);
        }
        // END -- CRMEAGLE-1075

        if (oppLst.size() > 0) {
            MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
            update oppLst;
            MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = false;
        }
        system.debug(cliUpdatedLst + 'cliUpdatedLst>>>>>');
        if (cliUpdatedLst.size() > 0) {
            system.debug('in line 83');
            for (ContractLineItem cli : cliUpdatedLst) {
                if (cliIdOliRecMap.get(cli.Id) != null) {
                    oliLstToBeUpdatedToCancelled.add(cliIdOliRecMap.get(cli.Id));
                    oliIdsTobeDeleted.add(cliIdOliRecMap.get(cli.Id)?.Id);
                }
            }
            if (oliIdsTobeDeleted.size() > 0 && recordtypeName == 'ODM') {
                updateOliAndCreateNewOpptyOli(oliLstToBeUpdatedToCancelled, oliIdsTobeDeleted, cliUpdatedLst, null);
            }
            if (cliIdsSet.size() > 0 && recordtypeName != 'ODM') {
                TransactionEventTriggerHelperUtility.createIndirectSubsOpptyandOLI(cliIdsSet, null, transLstTobeUpdated, oliSet, lstOppIdsToBeCancelled, 'Solution Provider Change');
            }
        }

        if (changeFlag == 'Purchaser Change' && processOCRDeletionCreation) {
            List<OpportunityContactRole> ocrLst = [SELECT Id, ContactId, OpportunityId, Role, IsPrimary FROM OpportunityContactRole WHERE Role = 'Purchaser' AND OpportunityId IN :oppIdsLst];
            processOpportunityContactRole(ocrLst, oppClisMap);
        }
        for (Id oppId : oppIdsLst) {
            if (transLstTobeUpdatedWithSuccesFailure.containsKey(oppId)) {
                Transaction__c t = transLstTobeUpdatedWithSuccesFailure.get(oppId);
                t.Status__c = failedVictimOppIds.contains(oppId) ? 'Failed' : 'Success'; //DAASN-22772
                txnToUpdate.add(t);
                oppIdPendingUpdateMap.put(oppId, false);
            }
        }
        update txnToUpdate;
    } catch (Exception e) {
        for (Transaction__c t : transLstTobeUpdatedWithSuccesFailure.values()) {
            oppIdPendingUpdateMap.put(t.Opportunity__c, true);
            t.Status__c = 'Failed';
            t.Error__c = e.getMessage() + 'Line No:' + e.getLineNumber();
            txnToUpdate.add(t);
        }
        update txnToUpdate;
        updatePendingUpdateOnOpp(oppIdPendingUpdateMap);
    }
}
public static void processCMChange(List<Transactions__e> txnEvntsCMLst) {
    Set<id> cliid = new Set<Id>();
    String recordtypeName;
    String param = ' Where id IN : cliid';
    cliIdRecMap = genericProcessCliIds(txnEvntsCMLst);
    system.debug('cliIdRecMap##' + cliIdRecMap);
    cliid = cliIdRecMap.keyset();
    Map<Id, ContractLineItem> newcliMap;
    if (cliid.size() > 0) {
        newcliMap = new Map<Id, ContractLineItem>([SELECT id, Recordtype.Name, Opportunity__c, Opportunity__r.Opportunity_Key__c, ServiceContractId, ServiceContract.AccountId, Asset__r.End_User_Type__c FROM contractLineItem WHERE ID IN :cliid]);
        recordtypeName = newcliMap.values()[0].Recordtype.Name;
    }
    newcliMap.clear();
    newcliMap = getCLIMap(cliid, recordtypeName, param);
    if (newcliMap.size() > 0) {
        createSubsOpptyGenericMethodForLegacy(newcliMap.values(), cliid, 'Indirect CM Change', recordtypeName);
    }
}
public static Map<Id, Contractlineitem> getCLIMap(Set<Id> cliid, String recordtypeName, String param) {
    List<Contractlineitem> cliList = new List<Contractlineitem>();
    Map<Id, Contractlineitem> cliMap;
    string query = '';
    if (cliid.size() > 0) {
        if (recordtypeName != 'ODM') {
            query = SUBS_OpportunityCreationUtility.getIndirectCliQuery();
        } else if (recordtypeName == 'ODM') {
            query = SUBS_OpportunityCreationUtility.getOdmCliQuery();
        }
        query += param;
        cliList = database.query(query);
        cliMap = new Map<Id, Contractlineitem>(cliList);
    }
    return cliMap;
}
public static void createSubsOpptyGenericMethodForLegacy(List<Contractlineitem> newCLIList, Set<id> cliid, String changeType, String recordtypeName) {
    List<Transaction__c> txnToUpdate = new List<Transaction__c>();
    Map<Id, String> cliIdnewOpptyKeyMap = new Map<Id, String>();
    Map<Id, Opportunity> oldOppMap = new Map<Id, Opportunity>();
    Map<Id, Opportunity> oppMap = new Map<Id, Opportunity>();
    List<OpportunityLineItem> oliLst = new List<OpportunityLineItem>();
    Map<id, Contractlineitem> updateCLIMap = new Map<id, Contractlineitem>(); // to update subs oppty reference on CLI
    Map<id, OpportunityLineItem> updateOLIMap = new Map<id, OpportunityLineItem>(); // to update subs oppty reference on OLI
    Map<string, Integer> oppIdTotalCliCount = new Map<string, Integer>();
    Map<Id, Opportunity> updateOldOppMap = new Map<Id, Opportunity>();
    Set<Id> oliSet = new Set<Id>();
    Set<Id> oppIdsSet = new Set<Id>();
    Set<Id> contactidSet = new Set<Id>();
    List<Id> lstOppIdsToBeCancelled = new List<Id>();
    Map<Id, Id> cliandOpptyIdMap = new Map<Id, Id>();
    Map<Id, Id> oliandcliIdMap = new Map<Id, Id>();
    Set<Id> successOpptySet = new Set<Id>();
    Map<Id, List<ContractLineItem>> oppClisMap = new Map<Id, List<ContractLineItem>>();
    AggregateResult[] cliCount = [SELECT count(Id), Opportunity__c FROM contractLineItem WHERE Opportunity__c IN :opportunityIds GROUP BY Opportunity__c];
    for (AggregateResult agr : cliCount) {
        oppIdTotalCliCount.put((Id) agr.get('Opportunity__c'), (Integer) agr.get('expr0'));
    }
    if (recordtypeName == 'ODM') {
        oppClisMap = SUBS_ContractLineItemAgentChangeService.generateOppClisMap(cliid);
    } else {
        oppClisMap = SUBS_ContractLineItemAgentChangeService.generateOppClisMapIndirect(cliid);
    }
    system.debug(oppIdTotalCliCount + 'oppIdTotalCliCount>>>>');
    // get all OLIes from CLIes
    oliLst = returnOpptyLineItems(cliIdRecMap, oppIds);
    system.debug('oliLst##' + oliLst);
    if (oliLst.size() > 0) {
        for (OpportunityLineItem oli : oliLst) {
            oliSet.add(oli.id);
            lstOppIdsToBeCancelled.add(oli.OpportunityId);
            oppIdsSet.add(oli.OpportunityId);
            oliandcliIdMap.put(oli.id, oli.Contract_Line_Item__c);
        }
    }
    if (newCLIList.size() > 0) {
        for (Contractlineitem cli : newCLIList) {
            cliandOpptyIdMap.put(cli.id, cli.Opportunity__c);
            contactidSet.add(cli.ServiceContract.ContactId);
        }
    }
    getCliWithNewKey();
    if (oppIds.size() > 0) {
        //Added CurrencyIsoCode in the query for DAASN-22772
        oldOppMap = new Map<Id, Opportunity>([SELECT Id, Name, CurrencyIsoCode, Opportunity_Tags__c, Description, StageName, ownerId, AccountId, Partner_Account__c, Opportunity_Key__c, CloseDate, Pending_Update__c, Expiration_Date__c, Expiry_Date__c, Discount_Approval_Status__c FROM Opportunity WHERE Id IN :oppIds]); //Added fields Opportunity_Tags__c, Description, StageName, ownerId for DAASN-22133
    }
    Set<String> newOpptyKeys = new Set<String>();
    newOpptyKeys.addAll(victimCliWithNewKeyMap.values());
    //get all opportunities with obtained keys
    if (victimCliWithNewKeyMap.size() > 0) {
        returnExistingOppty(newOpptyKeys, oldOppMap.keySet());
    }
    boolean countMatch = false;
    for (Id oppid : opportunityIds) {
        if (oppIdTotalCliCount.containsKey(oppid) && oppClisMap.containsKey(oppid) && oppIdTotalCliCount.get(oppid) == oppClisMap.get(oppid).size()) {
            countMatch = true;
        }
    }
    Set<Id> parentOpptyId = new Set<Id>();
    List<Opportunity> victimOpptyId = new List<Opportunity>();

    if (countMatch) {
        if (renewalKeyOpportunityMap.size() > 0) {
            for (Id oppId : oppIds) {
                if (renewalKeyOpportunityMap.get(victimCliWithNewKeyMap.get(oppClisMap.get(oppId)[0].Id)) != null && renewalKeyOpportunityMap.get(victimCliWithNewKeyMap.get(oppClisMap.get(oppId)[0].Id)).CurrencyIsoCode == oldOppMap.get(oppId).currencyIsoCode) {
                    //Added currencyIsoCode Condition for DAASN-22772 EMEA multi-currency
                    parentOpptyId.add(renewalKeyOpportunityMap.get(victimCliWithNewKeyMap.get(oppClisMap.get(oppId)[0].Id)).Id);
                    victimOpptyId.add(oldOppMap.get(oppId));
                }
            }
        }
        if ((renewalKeyOpportunityMap.size() > 0 && parentOpptyId.isEmpty()) || (renewalKeyOpportunityMap.size() == 0)) {
            //Added condition for key match but different currency - DAASN-22772
            if (oldOppMap.size() > 0) {
                for (Opportunity opp : oldOppMap.values()) {
                    opp.Opportunity_Key__c = victimCliWithNewKeyMap.get(newCLIList[0]?.id);
                    opp.AccountId = ((changeType == 'Contract Transfer' || changeType == 'Transfer Of License') && newCLIList[0] != null) ? newCLIList[0].ServiceContract.AccountId : opp.AccountId; //DAASN-21689
                    if (recordtypeName != 'ODM') {
                        opp.Name = SUBS_TransitionSubscriptionOpptyUtility.getSubscriptionOppName(newCLIList[0], opp);
                    }
                    if (recordtypeName == 'ODM') {
                        opp.Name = SUBS_OpportunityCreationUtility.getSubscriptionOppName(newCLIList[0], opp);
                    }
                    updateOldOppMap.put(opp.id, opp);
                }
            }
        }
        if (parentOpptyId.isEmpty() == false) {
            handleSubsOpptyMerge(changeType, victimOpptyId, renewalKeyOpportunityMap, txnToUpdate, victimCliWithNewKeyMap);
        }
        if (changeType == 'Indirect CM Change') {
            updateOpportunityContactRole(oppIdsSet, newCLIList, cliandOpptyIdMap);
        }
        if (changeType == 'Indirect Asset Move') {
            updateSCOpptyJunction(oliLst, cliid);
        }
    } else {
        // if count of cli  not matching

        if (changeType == 'Indirect CM Change') {
            TransactionEventTriggerHelperUtility.createIndirectSubsOpptyandOLI(cliid, cliRecCMChangeOldMap, transLstTobeUpdated, oliSet, lstOppIdsToBeCancelled, changeType);
        }
        if (changeType == 'Contract Transfer' && recordtypeName != 'ODM') {
            TransactionEventTriggerHelperUtility.createIndirectSubsOpptyandOLI(cliid, cliRecContractTransferOldMap, transLstTobeUpdated, oliSet, lstOppIdsToBeCancelled, changeType);
        }
        if (recordtypeName == 'ODM' && (changeType == 'Contract Transfer' || changeType == 'Indirect Account Merge' || changeType == 'Transfer Of License')) {
            Map<Id, Opportunity> oppMapToBeCancelled = getOpportunityDetails(lstOppIdsToBeCancelled);
            updateOliAndCreateNewOpptyOli(oliLst, oliSet, newCliList, oppMapToBeCancelled);
        }
        if (changeType == 'Indirect Contract Merge') {
            TransactionEventTriggerHelperUtility.createIndirectSubsOpptyandOLI(cliid, cliRecContractMergeOldMap, transLstTobeUpdated, oliSet, lstOppIdsToBeCancelled, changeType);
        }
        if (changeType == 'Indirect Asset Move') {
            TransactionEventTriggerHelperUtility.createIndirectSubsOpptyandOLI(cliid, cliRecAssetMoveOldMap, transLstTobeUpdated, oliSet, lstOppIdsToBeCancelled, changeType);
        }
    }
    try {
        updateCLIandOLI(updateCLIMap, updateOLIMap);
        if (updateOldOppMap.size() > 0) {
            MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
            List<Database.SaveResult> updateResults = Database.update(updateOldOppMap.values(), true);
            //update updateOldOppMap.values();
            for (Database.SaveResult sr : updateResults) {
                if (sr.isSuccess()) {
                    successOpptySet.add(sr.getId());
                }
            }
            if (successOpptySet.size() > 0 && changeType == 'Contract Transfer') {
                //DAASN-22133 - Added condition to run the RHS logic for contract transfer logic
                system.debug('Success full Agreement Transfer-->' + successOpptySet);
                /*****************************DAASN-21952 RHS Evaluation Start*********************************/
                RHS_UpdateScoreBatchHandler.getOLIforOppty(successOpptySet);
                /*****************************DAASN-21952 RHS Evaluation End*********************************/
            }
            MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = false;
        }
        for (Id oppId : oppIdsSet) {
            if (transLstTobeUpdatedWithSuccesFailure.containsKey(oppId)) {
                Transaction__c t = transLstTobeUpdatedWithSuccesFailure.get(oppId);
                t.Status__c = failedVictimOppIds.contains(oppId) ? 'Failed' : 'Success'; //DAASN-22772
                txnToUpdate.add(t);
                oppIdPendingUpdateMap.put(oppId, false);
            }
        }
        update txnToUpdate;
    } catch (Exception e) {
        for (Transaction__c t : transLstTobeUpdatedWithSuccesFailure.values()) {
            oppIdPendingUpdateMap.put(t.Opportunity__c, true);
            t.Status__c = 'Failed';
            txnToUpdate.add(t);
        }
        update txnToUpdate;
        updatePendingUpdateOnOpp(oppIdPendingUpdateMap);
    }
}

public static void updateCLIandOLI(Map<id, Contractlineitem> updateCLIMap, Map<id, OpportunityLineItem> updateOLIMap) {
    if (updateCLIMap.size() > 0) {
        // check trigger for update
        ADSK_ContractLineItemTriggerHandler.skipADSKContractLineItemTrigger = true;
        update updateCLIMap.values();
        ADSK_ContractLineItemTriggerHandler.skipADSKContractLineItemTrigger = false;
    }
    if (updateOLIMap.size() > 0) {
        // check trigger for update
        //MJA_OpportunityUtility.SKIP_OPPORTUNITYLINEITEM_TRIGGER = true;
        update updateOLIMap.values();
        //MJA_OpportunityUtility.SKIP_OPPORTUNITYLINEITEM_TRIGGER = false;
    }
}
public static void updateOpportunityContactRole(Set<Id> oppIdsSet, List<Contractlineitem> newCLIList, Map<Id, Id> cliandOpptyIdMap) {
    List<Opportunity> oppListContactrole = new List<Opportunity>();
    Set<String> contactIds = new Set<String>();
    for (ContractLineItem cli : newCLIList) {
        if (cli.ServiceContract.ContactId != null && cliandOpptyIdMap.get(cli.Id) != null) {
            if (!contactIds.contains(cli.ServiceContract.ContactId)) {
                Opportunity oppContact = new opportunity(Id = cliandOpptyIdMap?.get(cli.Id), Primary_Contact__c = cli.ServiceContract.ContactId);
                oppListContactrole.add(oppContact);
                contactIds.add(cli.ServiceContract.ContactId);
            }
        }
    }

    if (oppListContactrole.isEmpty() == false) {
        MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
        update oppListContactrole;
        MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = false;
    }
}
public static void updateSCOpptyJunction(List<OpportunityLineItem> oliLst, Set<id> cliid) {
    Set<Id> associateopptyidSet = new Set<Id>();
    Set<Id> associateSCidSet = new Set<Id>();
    Set<String> soKey = new Set<String>();

    for (OpportunityLineItem oli : oliLst) {
        associateopptyidSet.add(oli.Opportunityid);
        associateSCidSet.add(oli.Contract_Line_Item__r.ServiceContractId);
        soKey.add((String) oli.Contract_Line_Item__r.ServiceContractId + (String) oli.Opportunityid);
    }

    Set<String> existingAssociations = new Set<String>();
    for (Service_Contract_Opportunity__c so : [SELECT Service_Contract__c, Opportunity__c FROM Service_Contract_Opportunity__c WHERE Service_Contract__c IN :associateSCidSet AND Opportunity__c IN :associateopptyidSet]) {
        existingAssociations.add((String) so.Service_Contract__c + (String) so.Opportunity__c);
    }
    List<Service_Contract_Opportunity__c> scInsertList = new List<Service_Contract_Opportunity__c>();
    List<Contractlineitem> cliforAssociationList = [SELECT Id, Opportunity__c, Opportunity__r.Opportunity_Key__c, ServiceContractId FROM Contractlineitem WHERE id IN :cliid];
    if (cliforAssociationList.size() > 0) {
        for (ContractLineItem cli : cliforAssociationList) {
            if (!existingAssociations.contains((String) cli.ServiceContractId + (String) cli.Opportunity__c)) {
                scInsertList.add(new Service_Contract_Opportunity__c(Service_Contract__c = cli.ServiceContractId, Opportunity__c = cli.Opportunity__c));
            }
        }
    }
    if (scInsertList != null && scInsertList.size() > 0) {
        insert scInsertList;
    }
}

public static void updatePendingUpdateOnOpp(Map<Id, Boolean> oppIdPendingFlagMap) {
    List<Id> opportunityIds = new List<Id>();
    opportunityIds.addAll(oppIdPendingFlagMap.keySet());
    List<Opportunity> opportunityPendingLstToUpdate = new List<Opportunity>();
    Map<Id, Opportunity> oppIdOppRecMap = getOpportunityDetails(opportunityIds);
    for (Id opportunityId : oppIdOppRecMap.keySet()) {
        Opportunity opp = oppIdOppRecMap.get(opportunityId);
        opp.Pending_Update__c = oppIdPendingFlagMap.get(opportunityId);
        opportunityPendingLstToUpdate.add(opp);
    }
    MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
    update opportunityPendingLstToUpdate;
    MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = false;
}

public static void processQuantityChange(List<Transactions__e> txnEventQntyLst) {
    cliIdRecMap = genericProcessCliIds(txnEventQntyLst);
    List<OpportunityLineItem> oliLst = returnOpptyLineItems(cliIdRecMap, oppIds);
    List<OpportunityLineItem> oliLstFinalUpdate = new List<OpportunityLineItem>();
    Map<Id, Id> oliIdOppIdMapQnty = new Map<Id, Id>();
    system.debug(oliLst + 'oliLst>>>>>');
    for (OpportunityLineItem oli : oliLst) {
        oliIdOppIdMapQnty.put(oli.Id, oli.OpportunityId);
        if (cliIdRecMap.get(oli.Contract_Line_Item__c).Quantity != null) {
            oli.Quantity = cliIdRecMap.get(oli.Contract_Line_Item__c)?.Quantity;
            oli.Seats_Ref__c = oli.Quantity;
        }
        oliLstFinalUpdate.add(oli);
    }
    try {
        Database.SaveResult[] srList;
        srList = Database.update(oliLstFinalUpdate, false);
        genericResultProcessor(srList, oliIdOppIdMapQnty, null);
    } catch (Exception e) {
        system.debug('exception' + e);
    }
}

//Added an extra param  'errMsg' for identifying type of error  occured CRMEAGLE-1820
public static void updateTransactionStatus(List<Transaction__c> transactionList, string status, String errMsg) {
    List<Transaction__c> transactionUpdateList = new List<Transaction__c>();
    if (transactionList.size() > 0) {
        for (Transaction__c t : transactionList) {
            t.status__c = status;
            if (String.isNotBlank(errMsg) && errMsg != '') {
                t.Error__c = errMsg;
            }
            transactionUpdateList.add(t);
        }
    }
    if (transactionUpdateList.size() > 0) {
        update transactionUpdateList;
    }
}

public static void processAssetSeatChange(List<Transactions__e> txnEventAssetSplitLst) {
    cliIdRecMap = genericProcessCliIds(txnEventAssetSplitLst);
    system.debug('cliIdRecMap##' + cliIdRecMap);
    Set<id> cliid = new Set<Id>();
    cliid = cliIdRecMap.keyset();
    List<Contractlineitem> masterClitoUpdate = [SELECT id, QuantityToReduce__c, Asset_Seats__c FROM Contractlineitem WHERE id IN :cliRecAssetSeatOldMap.keyset()];
    List<OpportunityLineItem> oliLst = [SELECT id, OpportunityId, Contract_Line_Item__c, Quantity, Estimated_Subscriptions__c FROM OpportunityLineItem WHERE Contract_Line_Item__c IN :cliRecAssetSeatOldMap.keyset() AND OpportunityId IN :opportunityIds AND Opportunity.isClosed = FALSE AND Renewal_Status__c IN ('Open', 'Ready for Order')]; //Added additional filter isClosed and Renewal Status for DAASN-21958
    List<OpportunityLineItem> oliLstFinalUpdate = new List<OpportunityLineItem>();
    Map<Id, Id> oliIdOppIdMapQnty = new Map<Id, Id>();
    system.debug(oliLst + 'oliLst>>>>>');
    system.debug(oliLst.size() + 'oliLst Size>>>>>');
    List<Transaction__c> transactionList = new List<Transaction__c>();
    if (masterClitoUpdate.size() > 0 && oliLst.size() > 0) {
        //for (integer i = 0; i < oliLst.size(); i++) { Commented for DAASN-21958
        for (OpportunityLineItem oli : oliLst) {
            oliIdOppIdMapQnty.put(oli.Id, oli.OpportunityId);
            if (cliRecAssetSeatOldMap.get(masterClitoUpdate[0].id).split(':')[0] != null) {
                oli.Estimated_Subscriptions__c = oli.Quantity;
                oli.Quantity = decimal.valueOf(cliRecAssetSeatOldMap.get(masterClitoUpdate[0].id).split(':')[0]);
                system.debug('spliti##' + decimal.valueOf(cliRecAssetSeatOldMap.get(masterClitoUpdate[0].id).split(':')[0]));
            }
            oliLstFinalUpdate.add(oli);
        }
        //}
    }
    try {
        Database.SaveResult[] srList;
        srList = Database.update(oliLstFinalUpdate, false);
        system.debug('before genericResultProcessor call');
        system.debug('srList' + srList);
        system.debug('transLstTobeUpdated##' + transLstTobeUpdated);
        if (transLstTobeUpdated.size() > 0) {
            transactionList = [SELECT id, Status__c, Opportunity__c FROM Transaction__c WHERE id IN :transLstTobeUpdated.values()];
        }
        updateTransactionStatus(transactionList, 'In Progress', '');
    } catch (Exception e) {
        System.debug('Exception' + e);
    }
    TransactionEventTriggerHelperUtility.createIndirectSubsOpptyandOLI(cliid, cliRecAssetSeatOldMap, transLstTobeUpdated, null, null, 'Indirect Asset Split');
}

/**
    * @description : CRMEAGLE-1075 - Returning Existing Opportunities based on Oppty Keys and DDA should not be approved
    * @author Shubham Agarwal | 28-03-2024
    **/

public static void returnExistingOppty(Set<String> opptyKeys, Set<Id> OpportunitIds) {
    List<String> allowedDDAStatus = new List<String>{ 'Rejected', 'Expired', 'Not Submitted' };
    for (Opportunity subOpp : [
        SELECT
            Name,
            Id,
            isClosed,
            Opportunity_Tags__c,
            Description,
            ownerId,
            currencyisocode,
            Discount_Approval_Status__c,
            Product_Count__c,
            StageName,
            Originated_from_LC__c,
            Opportunity_Number__c,
            CloseDate,
            Asset_End_Date__c,
            Partner_Account__c,
            Opportunity_Key__c,
            opportunity_classification__c,
            SoldToAccount__c,
            New_Reseller_Account__c,
            Account.Country_Picklist__c,
            SoldToAccount__r.Country_Picklist__c,
            Integration_Status__c,
            Error__c,
            Expiry_Date__c,
            Owner.UserName,
            Renewal_Type__c,
            Agreement_Numbers__c,
            Parent_Opportunity_Id__c,
            Lock_Opportunity__c,
            Expiration_Date__c,
            Sales_Opportunity__c
        FROM Opportunity
        WHERE Id NOT IN :OpportunitIds AND RecordType.Name = 'Subscription Opportunity' AND Opportunity_Key__c IN :opptyKeys AND isClosed = FALSE AND (Discount_Approval_Status__c = NULL OR Discount_Approval_Status__c IN :allowedDDAStatus)
        ORDER BY CreatedDate DESC
    ]) {
        if (!renewalKeyOpportunityMap.containsKey(subOpp.Opportunity_Key__c)) {
            renewalKeyOpportunityMap.put(subOpp.Opportunity_Key__c, subOpp);
        } else {
            //If multiple oppties has same key, then pick the opportunity which has product count > 0 and recently created
            if (renewalKeyOpportunityMap.get(subOpp.Opportunity_Key__c).Product_Count__c == 0 && subOpp.Product_Count__c > 0) {
                renewalKeyOpportunityMap.put(subOpp.Opportunity_Key__c, subOpp);
            }
        }
    }
}

public static void getCliWithNewKey() {
    //Query the victim CLI to generate a key
    Map<Id, ContractLineItem> victimCliMap = new Map<Id, ContractLineItem>(
        [
            SELECT
                Id,
                RecordType.Name,
                ServiceContract.Contact.Contact_Csn__c,
                ServiceContract.Contact.Email,
                ServiceContract.Term,
                ServiceContract.Contract_Term_UOM__c,
                ServiceContract.Billing_Behavior_Code__c,
                Next_Billing_Date__c,
                ServiceContract.Account.Country_Lookup__r.Country_Code__c,
                Reseller_Account__c,
                Reseller_Account__r.Account_CSN__c,
                Reseller_Account__r.Internal_Use__c,
                Asset__c,
                Asset__r.Reseller_Account__c,
                Asset__r.Contract_Term__c,
                Asset__r.Reseller_Account__r.Account_CSN__c,
                Asset__r.Reseller_Account__r.Internal_Use__c,
                Parent_Opportunity__c,
                Split_Opportunity__c,
                Split_Opportunity__r.isClosed,
                Split_Opportunity__r.Reason__c,
                Split_Opportunity__r.Parent_Opportunity_Id__r.isClosed,
                ServiceContract.Account.Account_Csn__c,
                Purchaser__r.Contact_CSN__c,
                Purchaser__r.Email,
                Term__c,
                Actual_End_Date__c,
                ServiceContract.Account.Name,
                Intended_Usage__c,
                Distributor__c,Distributor__r.Account_CSN__c,
                Reseller_Account__r.Country_Lookup__r.Primary_Partner_Motion__c,
                Merchant__c,Asset__r.Account__c ,Merchant__r.Account_CSN__c ,
                Asset__r.Account__r.Account_CSN__c,
                ServiceContract.Account.Country_Lookup__r.ODM_Flag__c, Asset__r.End_Customer_Account__c, Asset__r.Account__r.Internal_Use__c,
                ServiceContract.Account.Country_Lookup__r.Primary_Partner_Motion__c,Sales_Channel__c, Asset__r.End_User_Type__c
            FROM ContractLineItem
            WHERE Id IN :cliIdRecMap.keySet()
        ]
    );
    String newkeyForVictim;
    for (ContractLineItem cli : victimCliMap.values()) {
        if (cli.RecordType.Name == 'ODM') {
            newkeyForVictim = SUBS_OpportunityCreationUtility.getRenewalKey(cli);
        } else if (cli.RecordType.Name == 'Direct') {
            newkeyForVictim = SUBS_TransitionSubsOpptyforDirectService.getRenewalKey(cli);
        } else {
            newkeyForVictim = SUBS_TransitionSubscriptionOpptyUtility.getRenewalKey(cli);
        }
        victimCliWithNewKeyMap.put(cli.Id, newkeyForVictim);
    }
}

public static void processAssetMoveChange(List<Transactions__e> txnEventAssetMoveLst) {
    Set<id> cliid = new Set<Id>();
    String recordtypeName;
    String param = ' Where id IN : cliid';
    cliIdRecMap = genericProcessCliIds(txnEventAssetMoveLst);
    system.debug('cliIdRecMap##' + cliIdRecMap);
    cliid = cliIdRecMap.keyset();
    Map<Id, ContractLineItem> newcliMap;
    if (cliid.size() > 0) {
        newcliMap = new Map<Id, ContractLineItem>([SELECT id, Recordtype.Name, Opportunity__c, Opportunity__r.Opportunity_Key__c, ServiceContractId, ServiceContract.AccountId, Asset__r.Account__c, Asset__c, Asset__r.End_User_Type__c, ServiceContract.Account.Country_Lookup__r.Primary_Partner_Motion__c, Asset__r.Reseller_Account__c  FROM contractLineItem WHERE ID IN :cliid]);
        recordtypeName = newcliMap.values()[0].Recordtype.Name;
    }
    newcliMap.clear();
    newcliMap = getCLIMap(cliid, recordtypeName, param);

    if (newcliMap.size() > 0) {
        createSubsOpptyGenericMethodForLegacy(newcliMap.values(), cliid, 'Indirect Asset Move', recordtypeName);
    }
}

public static void processContractMergeChange(List<Transactions__e> txnEventContractMergeLst) {
    Set<id> cliid = new Set<Id>();
    String recordtypeName;
    String param = ' Where id IN : cliid';
    cliIdRecMap = genericProcessCliIds(txnEventContractMergeLst);
    system.debug('cliIdRecMap##' + cliIdRecMap);
    cliid = cliIdRecMap.keyset();
    Map<Id, ContractLineItem> newcliMap;
    if (cliid.size() > 0) {
        newcliMap = new Map<Id, ContractLineItem>([SELECT id, Recordtype.Name, Opportunity__c, Opportunity__r.Opportunity_Key__c, ServiceContractId, ServiceContract.AccountId, Asset__r.Account__c, Asset__c, Asset__r.End_User_Type__c, ServiceContract.Account.Country_Lookup__r.Primary_Partner_Motion__c, Asset__r.Reseller_Account__c FROM contractLineItem WHERE ID IN :cliid]);
        recordtypeName = newcliMap.values()[0].Recordtype.Name;
    }
    newcliMap.clear();
    newcliMap = getCLIMap(cliid, recordtypeName, param);

    if (newcliMap.size() > 0) {
        createSubsOpptyGenericMethodForLegacy(newcliMap.values(), cliid, 'Indirect Contract Merge', recordtypeName);
    }
}
public static void processContractTransferChange(List<Transactions__e> txnEventContractTransferLst, String changeFlag) {
    Set<id> cliid = new Set<Id>();
    String recordtypeName;
    String param = ' Where id IN : cliid';
    cliIdRecMap = genericProcessCliIds(txnEventContractTransferLst);
    system.debug('cliIdRecMap##' + cliIdRecMap);
    cliid = cliIdRecMap.keyset();
    Map<Id, ContractLineItem> newcliMap;
    if (cliid.size() > 0) {
        newcliMap = new Map<Id, ContractLineItem>([SELECT id, Recordtype.Name, Opportunity__c, Opportunity__r.Opportunity_Key__c, ServiceContractId, ServiceContract.AccountId, Asset__r.Account__c, Asset__c, Asset__r.End_User_Type__c, ServiceContract.Account.Country_Lookup__r.Primary_Partner_Motion__c, Asset__r.Reseller_Account__c FROM contractLineItem WHERE ID IN :cliid]);
        recordtypeName = newcliMap.values()[0].Recordtype.Name;
    }
    newcliMap.clear();
    newcliMap = getCLIMap(cliid, recordtypeName, param);
    if (newcliMap.size() > 0) {
        createSubsOpptyGenericMethodForLegacy(newcliMap.values(), cliid, changeFlag, recordtypeName);
    }
}
public static Map<Id, Opportunity> getOpportunityDetails(List<Id> oppIds) {
    Map<Id, Opportunity> returnOppMap = new Map<Id, Opportunity>([SELECT Id, Pending_Update__c, Renewal_status__c, StageName, Originated_from_LC__c, (SELECT Id, Renewal_Status__c, LC_In_Effect_Period__c FROM OpportunityLineItems) FROM Opportunity WHERE ID IN :oppIds]); //Added LC_In_Effect_Period__c and Originated_from_LC__c as part of DAASN-22502
    return returnOppMap;
}
public static void genericResultProcessor(Database.SaveResult[] saveResult, Map<Id, Id> oliIdOppIdMap, String status) {
    Map<Id, Transaction__c> tLstUpdateToSuccess = new Map<Id, Transaction__c>();
    List<Opportunity> oLstToBeUpdated = new List<Opportunity>();
    for (Database.SaveResult sr : saveResult) {
        if (sr.isSuccess()) {
            system.debug(sr.getId() + 'sr.getId()>>>>> in success');
            system.debug(transLstTobeUpdatedWithSuccesFailure + ' transLstTobeUpdatedWithSuccesFailure in success');
            system.debug('oliIdOppIdMap.get##' + oliIdOppIdMap.get(sr.getId()));
            if (transLstTobeUpdatedWithSuccesFailure.containsKey(oliIdOppIdMap.get(sr.getId()))) {
                Transaction__c t = transLstTobeUpdatedWithSuccesFailure.get(oliIdOppIdMap.get(sr.getId()));
                if (status == null) {
                    t.Status__c = 'Success';
                } else {
                    t.Status__c = status;
                }

                tLstUpdateToSuccess.put(t.Id, t);
            }
        } else {
            system.debug('in transaction failure');
            if (transLstTobeUpdatedWithSuccesFailure.containsKey(oliIdOppIdMap.get(sr.getId()))) {
                Transaction__c t = transLstTobeUpdatedWithSuccesFailure.get(oliIdOppIdMap.get(sr.getId()));
                t.Status__c = 'Failed';

                for (Database.Error err : sr.getErrors()) {
                    t.Error__c = err.getStatusCode() + ': ' + err.getMessage();
                }

                tLstUpdateToSuccess.put(t.Id, t);
                Map<Id, Opportunity> oppMapTobeUpdated = getOpportunityDetails(opportunityIds);
                Opportunity opp = oppMapTobeUpdated.get(t.Opportunity__c);
                opp.Pending_Update__c = true;
                oLstToBeUpdated.add(opp);
            }
        }
    }
    if (tLstUpdateToSuccess.size() > 0) {
        update tLstUpdateToSuccess.values();
    }
    if (oLstToBeUpdated.size() > 0) {
        MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
        update oLstToBeUpdated;
        MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = false;
    }
}
public static void processPaymentChange(List<Transactions__e> txnEventPaymentLst) {
    cliIdRecMap = genericProcessCliIds(txnEventPaymentLst);
    List<OpportunityLineItem> oliLst = returnOpptyLineItems(cliIdRecMap, oppIds);
    List<OpportunityLineItem> oliFinalLstTobeUpdated = new List<OpportunityLineItem>();
    if (oliLst.isEmpty()) {
        //  CRMEAGLE-1863 mark transaction Success If purchase change Creates a new Subs Opty
        Map<Id, Transaction__c> tLstUpdateToSuccess = new Map<Id, Transaction__c>();
        if (transLstTobeUpdatedWithSuccesFailure.containsKey(opportunityIds[0])) {
            Transaction__c t = transLstTobeUpdatedWithSuccesFailure.get(opportunityIds[0]);
            t.Status__c = 'Success';
            t.Log__c = 'olis Not Found';

            tLstUpdateToSuccess.put(t.Id, t);
        }
        if (tLstUpdateToSuccess.size() > 0) {
            update tLstUpdateToSuccess.values();
        }
    } else {
        Map<Id, Id> oliIdOppIdMap = new Map<Id, Id>();
        for (OpportunityLineItem oli : oliLst) {
            oliIdOppIdMap.put(oli.Id, oli.OpportunityId);
            oli.Payment_Method__c = cliIdRecMap.get(oli.Contract_Line_Item__c)?.Payment_Method__c;
            oli.Payment_Method_Change_Date__c = system.today();
            if (cliRecPaymentOldMap.get(oli.Contract_Line_Item__c) != null && cliRecPaymentOldMap.get(oli.Contract_Line_Item__c) != '') {
                oli.Payment_Method_From_To__c = cliRecPaymentOldMap.get(oli.Contract_Line_Item__c) + '/' + cliIdRecMap.get(oli.Contract_Line_Item__c)?.Payment_Method__c;
            } else {
                oli.Payment_Method_From_To__c = '/' + cliIdRecMap.get(oli.Contract_Line_Item__c)?.Payment_Method__c;
            }
            oliFinalLstTobeUpdated.add(oli);
        }
        try {
            Database.SaveResult[] srList;

            srList = Database.update(oliFinalLstTobeUpdated, false);
            genericResultProcessor(srList, oliIdOppIdMap, null);
        } catch (Exception e) {
            system.debug('Exception##' + e.getMessage());
        }
    }
}
public static List<OpportunityLineItem> returnOpptyLineItems(Map<Id, ContractLineItem> cliMap, Set<Id> oppIds) {
    List<OpportunityLineItem> finalOliLst = new List<OpportunityLineItem>();
    oppLineItemLst = [SELECT Id, Quantity, Quantity_To_Reduce__c, Contract_Line_Item__c, Payment_Method__c, OpportunityId, Name, Renewal_Status__c, Estimated_Subscriptions__c, Contract_Line_Item__r.ServiceContractId FROM OpportunityLineItem WHERE Contract_Line_Item__c IN :cliMap.keySet() AND OpportunityId IN :oppIds];
    for (OpportunityLineItem oli : oppLineItemLst) {
        String tempKey = oli.Contract_Line_Item__c + ':' + oli.OpportunityId;
        if (uniqueKeyCliOppId.contains(tempKey)) {
            finalOliLst.add(oli);
        }
    }
    return finalOliLst;
}
public static Map<Id, ContractLineItem> genericProcessCliIds(List<Transactions__e> txnEventGenricLst) {
    List<Transaction__c> txnLst = new List<Transaction__c>();
    List<Transaction__c> txnLstUpdated = new List<Transaction__c>();
    Set<Id> cliIdsSet = new Set<Id>();
    List<ContractLineItem> cliLst = new List<ContractLineItem>();
    for (Transactions__e txn : txnEventGenricLst) {
        txnLst = (List<Transaction__c>) JSON.deserialize(txn.Details__c, List<Transaction__c>.class);
        txnLstUpdated.addAll(txnLst);
    }
    string changetype;
    if (txnLstUpdated.size() > 0) {
        for (Transaction__c t : (List<Transaction__c>) txnLstUpdated) {
            transLstTobeUpdatedWithSuccesFailure.put(t.Opportunity__c, t);
            if (t.Opportunity__c != null) {
                opportunityIds.add(t.Opportunity__c);
            }
            transLstTobeUpdated.put(t.Opportunity__c, t.id);
            if (t.Change_Type__c == 'Solution Provider Change' || t.Change_Type__c == 'Purchaser Change' || t.Change_Type__c == 'Distributor Change' ) {
                oppCLIsUpdatedMap.put(t.Opportunity__c, Integer.valueOf((t.Log__c).split('-')[1]));
                cliIdsSet = (Set<Id>) JSON.deserialize((t.Log__c).split('-')[2], Set<Id>.class);
                System.debug('cliIdsSet 1055 -- '+cliIdsSet);
            }
            if (t.Change_Type__c == 'Quantity Change') {
                cliIdsSet = (Set<Id>) JSON.deserialize((t.Log__c).split('-')[1], Set<Id>.class);
            }
            if (t.Change_Type__c == 'Payment Method Change') {
                cliRecPaymentOldMap = (Map<Id, String>) JSON.deserialize((((t.Log__c).split(';')[0])).split('-')[1], Map<Id, String>.class);
                cliIdsSet = (Set<Id>) JSON.deserialize((((t.Log__c).split(';')[1])).split('-')[1], Set<Id>.class);
            }
            if (t.Change_Type__c == 'Indirect Asset Split') {
                cliRecAssetSeatOldMap = (Map<Id, String>) JSON.deserialize((((t.Log__c).split(';')[0])).split('-')[1], Map<Id, String>.class);
                cliIdsSet = (Set<Id>) JSON.deserialize((((t.Log__c).split(';')[1])).split('-')[1], Set<Id>.class);
            }
            if (t.Change_Type__c == 'Indirect Asset Move') {
                cliRecAssetMoveOldMap = (Map<Id, String>) JSON.deserialize((((t.Log__c).split(';')[0])).split('-')[1], Map<Id, String>.class);
                cliIdsSet = (Set<Id>) JSON.deserialize((((t.Log__c).split(';')[1])).split('-')[1], Set<Id>.class);
            }
            if (t.Change_Type__c == 'Indirect Contract Merge') {
                cliRecContractMergeOldMap = (Map<Id, String>) JSON.deserialize((((t.Log__c).split(';')[0])).split('-')[1], Map<Id, String>.class);
                cliIdsSet = (Set<Id>) JSON.deserialize((((t.Log__c).split(';')[1])).split('-')[1], Set<Id>.class);
            }
            if (t.Change_Type__c == 'Indirect CM Change') {
                system.debug('Log##' + t.Log__c);
                cliRecCMChangeOldMap = (Map<Id, String>) JSON.deserialize((((t.Log__c).split(';')[0])).split('-')[1], Map<Id, String>.class);
                cliIdsSet = (Set<Id>) JSON.deserialize((((t.Log__c).split(';')[1])).split('-')[1], Set<Id>.class);
            }
            if (t.Change_Type__c == 'Contract Transfer' || t.Change_Type__c == 'Transfer Of License') {
                cliRecContractTransferOldMap = (Map<Id, String>) JSON.deserialize((((t.Log__c).split(';')[0])).split('-')[1], Map<Id, String>.class);
                cliIdsSet = (Set<Id>) JSON.deserialize((((t.Log__c).split(';')[1])).split('-')[1], Set<Id>.class);
            }
            changetype = t.Change_Type__c;
        }
    }
        cliLst = [
            SELECT ServiceContract.Account.Owner.Sales_Role__c,
                    StartDate,
                    Auto_Renew__c,
                    LC_Originated_Subscription__c,
                    Pelican_Order__c,
                    Parent_Opportunity__c,
                    Payment_Method__c,
                    Purchaser__r.Email,
                    Purchaser__r.Contact_Language__c,
                    Asset_Sw_Type_Value__c,
                    Intended_Usage__c,
                    Switch_Price_Condition__c,
                    QuantityToReduce__c,
                    ServiceContract.Account.Type,
                    Offering_Id__c,
                    OfferingId__r.Product_Line_Code__c,
                    OfferingId__r.ProductCode,
                    ServiceContract.Account.currencyIsoCode,
                    ServiceContract.Account.Country_Picklist__c,
                    ServiceContract.Account.Geo__c,
                    CurrencyIsoCode,
                    Entitlement__r.Service_Level__c,
                    OfferingId__r.Material_Group__c,
                    OfferingId__r.Primary_Product_Line__c,
                    UnitPrice,
                    TotalPrice,
                    PricebookEntryId,
                    Billing_Frequency__c,
                    Connectivity_Interval__c,
                    Service_Plan__c,
                    Connectivity__c,
                    Billing_Type__c,
                    Billing_Behavior_Picklist__c,
                    Access_Model__c,
                    OfferingId__c,
                    Quantity,
                    Status,
                    Comments__c,
                    Term__c, recordtype.Name,
                    Reseller_Account__r.Partner_Type__c,
                    Reseller_Account__r.Parent.Partner_Type__c,
                    Reseller_Account__r.Parent.Parent.Partner_Type__c,
                    Reseller_Account__r.Parent.Parent_Partner_Hierarchy__c,
                    Reseller_Account__r.Parent.ParentId,
                    Reseller_Account__r.Parent_Partner_Hierarchy__c,
                    ServiceContract.Account.OwnerId,
                    ServiceContract.Account.Country_Lookup__c,
                    ServiceContract.Account.Country_Lookup__r.Country_Code__c,
                    Actual_End_Date__c,
                    Sales_Channel__c,
                    recordtypeId,
                    Id,
                    ServiceContractId,
                    Termination_Date__c,
                    ServiceContract.Account.Name,
                    ServiceContract.Account.Named_Account_Info__c,
                    ServiceContract.Account.Account_Csn__c,
                    Reseller_Account__r.Account_Csn__c,
                    Purchaser__r.Contact_CSN__c,
                    Reseller_Account__c,
                    Reseller_Account__r.Internal_Use__c,
                    Purchaser__c,
                    Opportunity__r.Lock_Opportunity__c,
                    Opportunity__r.isClosed, //Added for DAASN-21958
                    Opportunity__r.Product_Count__c, //Added for DAASN-21958
                    Opportunity__c,
                    Split_From_Subscription_Id__c,
                    Split_Opportunity__c,
                    Split_Opportunity__r.isClosed,
                    Split_Opportunity__r.Reason__c,
                    Split_Opportunity__r.Parent_Opportunity_Id__r.isClosed,
                    Distributor__c,Distributor__r.Account_CSN__c,
                    Reseller_Account__r.Country_Lookup__r.Primary_Partner_Motion__c ,
                    Merchant__c,Asset__r.Account__c ,Merchant__r.Account_CSN__c,
                    ServiceContract.Account.Country_Lookup__r.ODM_Flag__c, 
                    ServiceContract.Account.Country_Lookup__r.Primary_Partner_Motion__c, Asset__r.End_User_Type__c, Asset__r.Reseller_Account__c
            FROM ContractLineItem
            WHERE ID IN :cliIdsSet 
        ];
    Map<Id, ContractLineItem> cliIdRecMap = new Map<Id, ContractLineItem>(cliLst);
    for (ContractLineItem cli : cliLst) {
        oppIds.add(cli.Opportunity__c);
        uniqueKeyCliOppId.add(cli.Id + ':' + cli.Opportunity__c);
    }
    system.debug(oppIds + 'oppIds>>>>>>');
    system.debug('uniqueKeyCliOppId##' + uniqueKeyCliOppId);
    return cliIdRecMap;
}
public static void updateOliAndCreateNewOpptyOli(List<OpportunityLineItem> oliLstToUpdate, Set<Id> oliSetToDelete, List<ContractLineItem> cliLstToCreateOpptyOlis, Map<Id, Opportunity> oppMap) {
    Boolean checkIfAllOlisAreRemoved = true;
    system.debug(oliLstToUpdate + 'oliLstToUpdate>>>>>');
    Map<Id, Opportunity> opportunitysToUpdate = new Map<Id, Opportunity>();
    Integer totalOliCount; //DAASN-22502
    Integer totalRemovedOliCount; //DAASN-22502
    Boolean lcUpdate; //DAASN-22502
    if (oppMap != null) {
        for (Opportunity opp : oppMap.values()) {
            totalOliCount = opp.OpportunityLineItems.size();
            totalRemovedOliCount = 0;
            lcUpdate = false;
            for (OpportunityLineItem oli : opp.OpportunityLineItems) {
                //Implemented this instead of below commented logic as part of DAASN-22502
                if (oliSetToDelete.contains(oli.Id)) {
                    totalRemovedOliCount = totalRemovedOliCount + 1;
                }
                if (opp.Originated_from_LC__c == true && !oliSetToDelete.contains(oli.Id) && (oli.LC_In_Effect_Period__c < System.today() || oli.LC_In_Effect_Period__c == null)) {
                    //DAASN-22502
                    lcUpdate = true;
                }
            }
            if (totalOliCount == totalRemovedOliCount) {
                opp.StageName = 'Closed/Lost';
                opp.Actual_Close_Date__c = system.today(); // DAASN-25878
                opp.Renewal_status__c = 'Cancelled';
                opp.Originated_from_LC__c = false; //DAASN-22502
                opp.Reason__c = 'Auto-Close';
                opp.Sub_Reason__c = currentChangeType;
                opportunitysToUpdate.put(opp.id, opp);
            } else if (totalOliCount != totalRemovedOliCount && lcUpdate) {
                //DAASN-22502
                opp.Originated_from_LC__c = false;
                opportunitysToUpdate.put(opp.id, opp);
            }
        }
        MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
        if (opportunitysToUpdate.size() > 0 && checkIfAllOlisAreRemoved) {
            update opportunitysToUpdate.values();
        }
    }
    if (oliLstToUpdate.size() > 0) {
        delete oliLstToUpdate;
    }
    system.debug(cliLstToCreateOpptyOlis + 'check cliLstToCreateOpptyOlis for oppty creation');
    if (cliLstToCreateOpptyOlis!=null && cliLstToCreateOpptyOlis.isEmpty() == false) {
        Set<Id> cliIdsOdm = (new Map<Id, ContractLineItem>(cliLstToCreateOpptyOlis)).keySet();
        TransactionEventTriggerHelperUtility.createSubsOpptys(cliIdsOdm);
    }
}

public static void deleteOli(Set<Id> oliSet, List<Id> lstOppIdsToBeCancelled) {
    system.debug(oliSet + 'oliSet>>>>>');
    system.debug(lstOppIdsToBeCancelled + 'lstOppIdsToBeCancelled>>>>>');
    //List<Opportunity> opportunitysToUpdate = new List<Opportunity>();
    List<OpportunityLineItem> oliList = new List<OpportunityLineItem>();
    if (oliSet.size() > 0) {
        oliList = [SELECT Id, Quantity, Quantity_To_Reduce__c, Contract_Line_Item__c, Payment_Method__c, OpportunityId, Name, Renewal_Status__c, Estimated_Subscriptions__c FROM OpportunityLineItem WHERE ID IN :oliSet];
    }
    if (lstOppIdsToBeCancelled != null && lstOppIdsToBeCancelled.size() > 0) {
        Map<Id, Opportunity> oppMapToBeCancelled = getOpportunityDetails(lstOppIdsToBeCancelled);
        updateOliAndCreateNewOpptyOli(oliList, oliSet, null, oppMapToBeCancelled);
    }
}
public static void processOpportunityContactRole(List<OpportunityContactRole> ocrLst, Map<Id, List<ContractLineItem>> oppIdUpdatedCLIs) {
    List<OpportunityContactRole> opptyContactRole = new List<OpportunityContactRole>();
    for (OpportunityContactRole ocr : ocrLst) {
        OpportunityContactRole contactRole = new OpportunityContactRole();
        contactRole.IsPrimary = true;
        contactRole.ContactId = oppIdUpdatedCLIs.get(ocr.OpportunityId)[0]?.Purchaser__c;
        contactRole.Role = 'Purchaser';
        contactRole.OpportunityId = ocr.OpportunityId;
        opptyContactRole.add(contactRole);
    }
    delete ocrLst;
    if (!opptyContactRole.isEmpty()) {
        insert opptyContactRole;
    }
}

public static void handleSubsOpptyMerge(String transactionType, List<Opportunity> victimOppList, Map<String, Opportunity> survivorOppKeyMap, List<Transaction__c> txnList, Map<Id, String> victimCliWithNewKeyMap) {
    Map<Id, OpportunityLineItem> oliToDelete = new Map<Id, OpportunityLineItem>();
    Map<Id, Id> victimOppIdWithSurvivorIdMap = new Map<Id, Id>();
    Map<Id, Set<Id>> victimWithSurvivorMap = new Map<Id, Set<Id>>(); //DAASN-22133
    Map<Id, Opportunity> updateSubOppMap = new Map<Id, Opportunity>();
    Map<Id, OpportunityLineItem> cotermOliMap = new Map<Id, OpportunityLineItem>(); //DAASN-22983
    List<OpportunityLineItem> oliToInsert = new List<OpportunityLineItem>();
    Map<Id, ContractLineItem> cliToUpdate = new Map<Id, ContractLineItem>();
    List<String> allowedDDAStatus = new List<String>{ 'Rejected', 'Expired', 'Not Submitted' };
    Set<Id> successOpptySet = new Set<Id>();
    Set<Id> genericUserIds = new Set<Id>(); //DAASN-22133
    Id oppOwnerId; //DAASN-22133
    Boolean updateSurvivorOppty; //DAASN-22133
    SUBS_MigrateRelatedRecordsUtility.subsOpptyMerge = true; //DAASN-22133
    SavePoint sp;
    if (!Test.isRunningTest()) {
        sp = Database.setSavePoint();
    }
    try {
        Map<Id, Opportunity> victimOppMap = new Map<Id, Opportunity>(victimOppList);
        genericUserIds = TransactionEventTriggerHelperUtility.genericUserIds(); //DAASN-22133

        //Query the victim CLI to generate a key
        Map<Id, ContractLineItem> victimCliMap = new Map<Id, ContractLineItem>(
            [
                SELECT
                    Id,
                    RecordType.Name,
                    ServiceContract.Contact.Contact_Csn__c,
                    ServiceContract.Contact.Email,
                    ServiceContract.Term,
                    ServiceContract.Contract_Term_UOM__c,
                    ServiceContract.Billing_Behavior_Code__c,
                    Next_Billing_Date__c,
                    ServiceContract.Account.Country_Lookup__r.Country_Code__c,
                    Reseller_Account__c,
                    Reseller_Account__r.Account_CSN__c,
                    Reseller_Account__r.Internal_Use__c,
                    Asset__c,
                    Asset__r.Reseller_Account__c,
                    Asset__r.Contract_Term__c,
                    Asset__r.Reseller_Account__r.Account_CSN__c,
                    Asset__r.Reseller_Account__r.Internal_Use__c,
                    Parent_Opportunity__c,
                    Split_Opportunity__c,
                    Split_Opportunity__r.isClosed,
                    Split_Opportunity__r.Reason__c,
                    Split_Opportunity__r.Parent_Opportunity_Id__r.isClosed,
                    ServiceContract.Account.Account_Csn__c,
                    Purchaser__r.Contact_CSN__c,
                    Purchaser__r.Email,
                    Term__c,
                    Actual_End_Date__c,
                    ServiceContract.Account.Name,
                    Distributor__c,Distributor__r.Account_CSN__c,
                    Reseller_Account__r.Country_Lookup__r.Primary_Partner_Motion__c ,
                    Merchant__c,Asset__r.Account__c ,Merchant__r.Account_CSN__c ,Asset__r.Account__r.Account_CSN__c 
                FROM ContractLineItem
                WHERE Opportunity__c IN :victimOppMap.keySet()
            ]
        );

        //Check if the new exist in the survivor oppty. If yes, move all victim line items to survivor oppty else update the victim oppty key with survivor CSN
        String whereClause = 'OpportunityId IN : victimOppList';
        for (OpportunityLineItem vOli : database.query(DROM_OpportunityPriceService.getOliQueryForClone(whereClause))) {
            String newKey = victimCliWithNewKeyMap.containsKey(vOli.Contract_Line_Item__c) ? victimCliWithNewKeyMap.get(vOli.Contract_Line_Item__c) : null;
            if (vOli.Line_Item_Action__c == 'Co-term' && vOli.Contract_Line_Item__c == null && vOli.Reference_Subscription__c != null) {
                //DAASN-22983
                cotermOliMap.put(vOli.Id, vOli);
            } else if (newKey != null && survivorOppKeyMap.containsKey(newKey) && survivorOppKeyMap.get(newKey).currencyIsoCode == victimOppMap.get(vOli.OpportunityId).CurrencyISOCode && 
                        (String.isBlank(victimOppMap.get(vOli.OpportunityId).Discount_Approval_Status__c) || allowedDDAStatus.contains(victimOppMap.get(vOli.OpportunityId).Discount_Approval_Status__c))) {
                //Added CurrencyIsoCode Condition for DAASN-22772 EMEA Multi-currency
                OpportunityLineItem oliNew = new OpportunityLineItem();
                oliNew = vOli.clone(false, true, true, true);
                oliNew.opportunityId = survivorOppKeyMap.get(newKey).Id;
                oliToInsert.add(oliNew);
                oliToDelete.put(vOli.Id, vOli);
                if (vOli.Contract_Line_Item__c != null) {
                    //Added this condition for DAASN-22983
                    ContractLineItem cli = new ContractLineItem();
                    cli.Opportunity__c = survivorOppKeyMap.get(newKey).Id;
                    cli.Previous_Opportunity__c = vOli.OpportunityId;
                    cli.Id = vOli.Contract_Line_Item__c;
                    cliToUpdate.put(cli.Id, cli);
                }
                victimWithSurvivorMap.put(vOli.OpportunityId, new Set<Id>{ survivorOppKeyMap.get(newKey).Id }); //DAASN-22133
                victimOppIdWithSurvivorIdMap.put(vOli.OpportunityId, survivorOppKeyMap.get(newKey).Id);
                updateSurvivorOppty = false; //DAASN-22133
                //DAASN-22133 Starts
                String survivorOppTags = survivorOppKeyMap.get(newKey).Opportunity_Tags__c == null ? '' : survivorOppKeyMap.get(newKey).Opportunity_Tags__c;
                String survivorOppDesc = survivorOppKeyMap.get(newKey).Description == null ? '' : survivorOppKeyMap.get(newKey).Description + '\n';
                String concatOppTags = survivorOppTags;
                String concatDesc = survivorOppDesc;

                String victimOppTags = victimOppMap.get(vOli.OpportunityId).Opportunity_Tags__c == null ? '' : victimOppMap.get(vOli.OpportunityId).Opportunity_Tags__c;
                String victimOppDesc = victimOppMap.get(vOli.OpportunityId).Description == null ? '' : victimOppMap.get(vOli.OpportunityId).Description;
                Integer victimOppStageRank = SUBS_MigrateRelatedRecordsUtility.getPartnerFieldScore(victimOppMap.get(vOli.OpportunityId).StageName, 'StageName');
                Integer survivorOppStageRank = SUBS_MigrateRelatedRecordsUtility.getPartnerFieldScore(survivorOppKeyMap.get(newKey).StageName, 'StageName');
                String oppStageName = victimOppStageRank > survivorOppStageRank ? victimOppMap.get(vOli.OpportunityId).stageName : survivorOppKeyMap.get(newKey).StageName;

                if (String.isNotBlank(victimOppTags) && !concatOppTags.contains(victimOppTags)) {
                    concatOppTags += ';' + victimOppTags;
                    updateSurvivorOppty = true;
                }
                if (String.isNotBlank(victimOppDesc) && !survivorOppDesc.contains(victimOppDesc)) {
                    concatDesc += victimOppDesc + '\n';
                    updateSurvivorOppty = true;
                }

                if (genericUserIds.contains(survivorOppKeyMap.get(newKey).ownerId) && !genericUserIds.contains(victimOppMap.get(vOli.OpportunityId).ownerId)) {
                    oppOwnerId = victimOppMap.get(vOli.OpportunityId).ownerId;
                    updateSurvivorOppty = true;
                } else {
                    oppOwnerId = survivorOppKeyMap.get(newKey).ownerId;
                    updateSurvivorOppty = true;
                }

                if (updateSurvivorOppty == true) {
                    Opportunity opp = new Opportunity(Id = survivorOppKeyMap.get(newKey).Id, Description = concatDesc, Opportunity_Tags__c = concatOppTags, ownerId = oppOwnerId, StageName = oppStageName);
                    //DAASN-22502 - Updated LC flag on oppty
                    if (survivorOppKeyMap.get(newKey).Originated_from_LC__c == false && vOli.LC_In_Effect_Period__c > system.today()) {
                        opp.Originated_from_LC__c = true;
                    }
                    System.debug('** Update survivor Oppty ***' + opp);
                    updateSubOppMap.put(opp.Id, opp);
                }
                //DAASN-22133 Ends

                //Update the victim oppty with parent oppty as survivor oppty and closed the victim oppty
                if (transactionType == 'Account Merge' && vOli.Contract_Line_Item__c != null) {
                    //Added cli condition for DAASN-22983
                    Opportunity opp = new Opportunity(Parent_Opportunity_ID__c = survivorOppKeyMap.get(newKey).Id, Id = vOli.OpportunityId, StageName = 'Closed/Lost', Actual_Close_Date__c = system.today(), Originated_from_LC__c = false, Reason__c = 'Auto-Close', Sub_Reason__c = 'Account Merge', Name = SUBS_OpportunityCreationUtility.getSubscriptionOppName(victimCliMap.get(vOli.Contract_Line_Item__c), survivorOppKeyMap.get(newKey)));
                    updateSubOppMap.put(opp.Id, opp);
                } else {
                    Opportunity opp = new Opportunity(Parent_Opportunity_ID__c = survivorOppKeyMap.get(newKey).Id, Id = vOli.OpportunityId, StageName = 'Closed/Lost', Actual_Close_Date__c = system.today(), Originated_from_LC__c = false, Reason__c = 'Auto-Close', Sub_Reason__c = transactionType, Forecast_Category__c = 'Omitted'); //DAASN-22502 added LC flag reset
                    updateSubOppMap.put(opp.Id, opp);
                }
            } else {
                if (vOli.Contract_Line_Item__c != null) {
                    //Added cli condition for DAASN-22983
                    Opportunity opp = new Opportunity(Opportunity_Key__c = newKey, Id = vOli.OpportunityId, Name = SUBS_OpportunityCreationUtility.getSubscriptionOppName(victimCliMap.get(vOli.Contract_Line_Item__c), victimOppMap.get(vOli.OpportunityId)));
                    updateSubOppMap.put(opp.Id, opp);
                }
            }
        }
        //Added logic for co-term DAASN-22983 Starts
        if (transactionType == 'Account Merge') {
            for (OpportunityLineItem oli : cotermOliMap.values()) {
                if (updateSubOppMap.containsKey(oli.OpportunityId) && updateSubOppMap.get(oli.OpportunityId).Parent_Opportunity_ID__c != null) {
                    System.debug('***Inside co-term oli ***');
                    OpportunityLineItem oliNew = new OpportunityLineItem();
                    oliNew = oli.clone(false, true, true, true);
                    oliNew.opportunityId = updateSubOppMap.get(oli.OpportunityId).Parent_Opportunity_ID__c;
                    oliToInsert.add(oliNew);
                    oliToDelete.put(oli.Id, oli);
                }
            }
        }
        //DAASN-22983 Ends
        //As we can't reparent the OLI with survivor oppty id, deleting the victim oppty line items
        if (oliToDelete.size() > 0) {
            delete oliToDelete.values();
        }
        //Clone and re-insert the victim oppty OLIs under survivor oppty
        if (oliToInsert.size() > 0) {
            insert oliToInsert;
        }
        //update cli with new Oppty
        if (cliToUpdate.size() > 0) {
            ADSK_ContractLineItemTriggerHandler.skipADSKContractLineItemTrigger = true;
            update cliToUpdate.values();
            ADSK_ContractLineItemTriggerHandler.skipADSKContractLineItemTrigger = false;
        }
        //Close the victim oppty or update the key
        if (updateSubOppMap.size() > 0) {
            MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = true;
            List<Database.SaveResult> updateResults = Database.update(updateSubOppMap.values(), true);
            MJA_OpportunityUtility.SKIP_OPPORTUNITY_TRIGGER = false;

            for (Database.SaveResult sr : updateResults) {
                if (sr.isSuccess()) {
                    successOpptySet.add(sr.getId());
                }
            }
        }
        //DAASN-22133 Starts - Faced too many SOQL issue so moved this to queueable job
        if (!victimWithSurvivorMap.isEmpty() || !victimOppIdWithSurvivorIdMap.isEmpty()) {
            System.enqueueJob(new SUBS_MigrateRelatedRecordsQueueable(victimWithSurvivorMap, victimOppIdWithSurvivorIdMap, successOpptySet));
        }
        //DAASN-22133 Ends
        if (!txnList.isEmpty()) {
            TransactionEventTriggerHelper.updateTransactionStatus(txnList, 'Success', '');
        }
    } catch (Exception e) {
        if (!Test.isRunningTest() && sp != null) {
            Database.rollBack(sp);
        }
        if (!txnList.isEmpty()) {
            for (Transaction__c txn : txnList) {
                txn.Status__c = 'Failed';
                txn.Error__c = 'Message:' + e.getMessage() + ' Line No:' + e.getLineNumber() + ' Stack trace:' + e.getStackTraceString() + ' Cause:' + e.getCause();
            }
            update txnList;
        } else {
            for (Opportunity victimOpp : victimOppList) {
                //DAASN-22772
                failedVictimOppIds.add(victimOpp.Id);
            }
        }
    }
}

public static void setCurrentChangetype(String changeType) {
    currentChangeType = changeType;
}
}
