/************************************************************************************
 * Copyright by Autodesk, Inc.
 * The information contained herein is confidential, proprietary to
 * Autodesk, Inc., and considered a trade secret as defined in section
 * 499C of the penal code of the State of California. Use of
 * this information by anyone other than authorized employees of
 * Autodesk, Inc. is granted only under a written non-disclosure
 * agreement, expressly prescribing the scope and manner of such use.
 *
 * $Id$ : ROM_GenerateRenewalOpportunityBatch
 * $Created Date$ : 12/10/2014
 * $Author$ : Chaithanya Godla
 * $Description$ : This is the batch class used of auto generation of renewals
 * $Modified Date$: 12/05/2016
 * $Modified By$: Chaithanya Godla
 * $Description$ : Updated the query for the creation of remaining item renewals. Old Renewal Opportunity(which gets partially completed) reference will not be removed from the Asset. Remaining_Item__c will be true for these assets.
 * $Modified Date/By: 06/04/2017, Maestro Team SFDC
 * $Description$ : PJMAESTRO-188, 308: Renewal Emails Creation and Failure should be reportable and added logic to get the execution time of batch.
 * $Modified Date/By: 06/04/2017, Maestro Team SFDC
 * $Modified Date$: 06/06/2018
 * $Modified By$: Chaithanya Godla
 * $Description$ : Changes to split the job for improving query performance - DAPSFDCPI40
 * $Modified By$: Deepika Seth
 * $Description$ : DAPSFDCPI-105 -
 *                 Added a new field to capture renewal error
 *                 Added validation to prevent Renewal Creation for IC Child Assets in case Do Not Create Renewal Flag is not properly stamped
 * $Modified By$ : Chaithanya Godla
 * $Modified Date$ : 25-June-2019
 * $Description$ : DAPSFDCPI-715 - Added ability to process Cli Ids from Batch_Staging_Table_Record__c and added validation error if previous job is running.
 * $Modified By$ : Chaithanya Godla
 * $Modified Date$ : 01-August-2019
 * $Description$ : DAPSFDCPI-799 - Added Custom Setting Check for parallel job validation
 * $Modified By$ : Mayur Jaiswal
 * $Modified Date$ : 21-April-2021
 * $Description$ : DAPSFDCPI-9155 - Updated query filters on CLI and Asset__c to exclude flex CLIs from being processed
 *
 * $Modified Date$ : 29-AUG-2023
 * $Author$ : Deepika Wadhwa
 * $Description$ : CRMEAGLE-70 : STOP ROM Oppty creation for countries where ODM is enabled
 *************************************************************************************************/
global without sharing class ROM_GenerateRenewalOpportunityBatch implements Database.Batchable<SObject>, Database.Stateful {
    //Changes to split the job for improving query performance
    String query;
    Date maintenanceLowerLimit;
    Date desktopLowerLimit;
    Date maintenanceUpperLimit;
    Date desktopUpperLimit;
    Date actualLowerLimit;
    Date actualUpperLimit;
    Date lowerLimit;
    Date upperLimit;
    String queryLocatorObject;
    Integer eligibleItems = 0;
    Integer processedItems = 0;
    Boolean exceptionLogged = false;
    Boolean parallelMode = false;
    Set<Id> apexJobIds = new Set<Id>();
    DateTime createdDate;
    Integer totalJobs = 0;
    Integer jobsProcessed = 0;
    //PJMAESTRO-188, 308: Renewal Emails Creation and Failure should be reportable and added logic to get the execution time of batch.
    Maestro_BatchResponseWrapper batchResponseWrapper; //wrapper for error report email
    Integer batchRuntime = 0;
    Integer processedBatchRenewalsEmails = 0;
    Integer eligibleBatchRenewalEmails = 0;
    //public List<String> excludeProdCodes = TransactionEventTriggerHelperExtUtility.splitRefSubsIds(System.Label.Restrict_ROM_Creation_WIN_NBE);
    global ROM_GenerateRenewalOpportunityBatch(String queryFilter, String queryLocatorObject, Boolean parallelMode) {
        this(queryFilter, queryLocatorObject);
        if (parallelMode != null) {
            this.parallelMode = parallelMode;
        }
    }

    global ROM_GenerateRenewalOpportunityBatch(String queryFilter, String queryLocatorObject) {
        //DAPSFDCPI-715
        if (!parallelMode) {
            throwExceptionIfPreviousJobRunning();
        }
        system.debug('Reached hereeeeeeeeeeeeee...................................');
        if (String.isNotBlank(queryLocatorObject)) {
            this.queryLocatorObject = queryLocatorObject;
        } else if(!Test.isRunningTest()){
            this.queryLocatorObject = 'ContractLineItem';
            queryLocatorObject = 'ContractLineItem';
        }
        //DAPSFDCPI-105
           system.debug('Reached hereeeeeeeeeeeeee...................................9');

        if (queryLocatorObject == 'ContractLineItem') {
            if (String.isBlank(queryFilter)) {
                List<Batch_Job_Setting__mdt> bList = [SELECT Query_Filter__c FROM Batch_Job_Setting__mdt WHERE DeveloperName = 'ROM_Creation_Job_Cli_Query'];
                if (bList.size() > 0) {
                    queryFilter = bList[0].Query_Filter__c;
                } else {
                    system.debug('@@@@@');
                    queryFilter = ' Deployment_Indicator__c != \'' + System.Label.Flex_Contract_Merge + '\'';
                    // CRMEAGLE-70
                    queryFilter += ' AND ServiceContract.Contract_Type__c != \'ODM\' ';
                   // queryFilter += ' AND (Opportunity__c  = null OR ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = false ) ';
                   //queryFilter += ' AND (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = false OR (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = true AND Asset__r.Program_Type__c !=\'WIN\' AND Opportunity__c  = null ) OR (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = true AND Asset__r.Program_Type__c =\'WIN\' AND (Asset__r.Product_Line_Code__c NOT IN :excludeProdCodes  ) ) ) ';                    
                   queryFilter += ' and Asset__r.status__c = \'Registered\' and (Asset__r.Renewal_Opportunity__c = null or (Asset__r.Renewal_Opportunity__c != null and (Asset__r.Remaining_Item__c = true or Asset__r.Renewal_Opportunity__r.Renewal_Status__c = \'Cancelled\' or (Asset__r.Renewal_Opportunity__r.Renewal_Status__c = \'Completed\' and Asset__r.Renewal_Opportunity__r.LastModifiedDate < Last_N_Days:2)))) and Asset__r.Do_Not_Create_Renewal__c!=true and Asset__r.Parent_Asset__c = null and Asset__r.Product2__r.Special_Sales_Program_Type__c != \'99\' and ServiceContract.Billing_Behavior_Code__c in (\'\', \'A100\') and (Actual_End_Date__c >= :lowerLimit and Actual_End_Date__c <= :upperLimit)';
                }
            }
            //Updating batch query for ROM creation by batch- 17-Feb-2021
            query = 'Select Id,Primary_Admin__c,Asset__r.Renewal_Creation_Error__c, Asset__c from ContractLineItem where ' + queryFilter;
        }
        //DAPSFDCPI-105
        system.debug('Reached hereeeeeeeeeeeeee...................................8');

        if (queryLocatorObject == 'Asset__c') {
            System.debug('queryFilter'+queryFilter);
            if (String.isBlank(queryFilter)) {
                
                List<Batch_Job_Setting__mdt> bList = [SELECT Query_Filter__c FROM Batch_Job_Setting__mdt WHERE DeveloperName = 'ROM_Creation_Job_Asset_Query'];
                if (bList.size() > 0) {
                    queryFilter = bList[0].Query_Filter__c;
                } else {
                    queryFilter = 'Character_Value__c != \'F\' and Status__c = \'Registered\' and (Renewal_Opportunity__c = null or (Renewal_Opportunity__c != null and (Remaining_Item__c = true or Renewal_Opportunity__r.Renewal_Status__c = \'Cancelled\' or (Renewal_Opportunity__r.Renewal_Status__c = \'Completed\' and Renewal_Opportunity__r.LastModifiedDate < Last_N_Days:2)))) and Do_Not_Create_Renewal__c!=true and Parent_Asset__c = null and Product2__r.Special_Sales_Program_Type__c != \'99\'';
                    //queryFilter += ' AND (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = false OR (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = true AND Asset__r.Program_Type__c !=\'WIN\' AND Opportunity__c  = null ) OR (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = true AND Asset__r.Program_Type__c =\'WIN\' AND (Asset__r.Product_Line_Code__c NOT IN :excludeProdCodes  ) ) ) ';                 }
            }
            query = 'Select Id from Asset__c where ' + queryFilter;
        }
            }
        //DAPSFDCPI-715
        system.debug('Reached hereeeeeeeeeeeeee...................................7');

        if (queryLocatorObject == 'Batch_Staging_Table_Record__c') {
            if (String.isBlank(queryFilter)) {
                List<Batch_Job_Setting__mdt> bList = [SELECT Query_Filter__c FROM Batch_Job_Setting__mdt WHERE DeveloperName = 'ROM_Creation_Job_Staging_Table_Query'];
                if (bList.size() > 0) {
                    queryFilter = bList[0].Query_Filter__c;
                } else {
                    queryFilter = 'Job_Name__c = \'Renewal Opportunity Creation\'';
                }
            }
            query = 'Select Record_Id__c from Batch_Staging_Table_Record__c where ' + queryFilter;
        }
        if (String.isBlank(query)) {
            throw new ExodusException('Query cannot be blank');
        }
        system.debug(query);
    
    }
    global Database.QueryLocator start(Database.BatchableContext BC) {
        // To load the class for tracking
        batchResponseWrapper = new Maestro_BatchResponseWrapper();
        //Getting the Renewal Period Limits from the Custom Settings
        Map<String, Agreement_Renewal_Period_Setting__c> settings = Agreement_Renewal_Period_Setting__c.getAll();
        if (settings.get('Maintenance_Auto') != null) {
            Decimal temp = settings.get('Maintenance_Auto').No_Of_Days_After_EndDate__c;
            if (temp != null) {
                maintenanceLowerLimit = Date.today().addDays(-Integer.valueOf(temp));
            }
            temp = settings.get('Maintenance_Auto').No_Of_Days_Before_EndDate__c;
            if (temp != null) {
                maintenanceUpperLimit = Date.today().addDays(Integer.valueOf(temp));
            }
        }
        maintenanceLowerLimit = maintenanceLowerLimit != null ? maintenanceLowerLimit : Date.today().addDays(-364);
        maintenanceUpperLimit = maintenanceUpperLimit != null ? maintenanceUpperLimit : Date.today().addDays(90);
        if (settings.get('Desktop_Auto') != null) {
            Decimal temp = settings.get('Desktop_Auto').No_Of_Days_After_EndDate__c;
            if (temp != null) {
                desktopLowerLimit = Date.today().addDays(-Integer.valueOf(temp));
            }
            temp = settings.get('Desktop_Auto').No_Of_Days_Before_EndDate__c;
            if (temp != null) {
                desktopUpperLimit = Date.today().addDays(Integer.valueOf(temp));
            }
        }
        desktopLowerLimit = desktopLowerLimit != null ? desktopLowerLimit : Date.today();
        desktopUpperLimit = desktopUpperLimit != null ? desktopUpperLimit : Date.today().addDays(90);
        actualLowerLimit = maintenanceLowerLimit < desktopLowerLimit ? maintenanceLowerLimit : desktopLowerLimit;
        actualUpperLimit = maintenanceUpperLimit > desktopUpperLimit ? maintenanceUpperLimit : desktopUpperLimit;
        //DAPSFDCPI-715
        if (queryLocatorObject == 'ContractLineItem') {
            //Changes to split the job for improving query performance
            Integer jobPeriodInDays = 2;
            ROM_RenewalOpportunitySettings__c setting = ROM_RenewalOpportunitySettings__c.getValues('ROMGenerationJobPeriodInDays');
            if (setting != null && setting.value__c != null && setting.value__c != '') {
                jobPeriodInDays = Integer.valueOf(setting.value__c);
            }
            //Setting the lowerLimit in the first Job
            if (lowerLimit == null) {
                lowerLimit = actualLowerLimit;
            }
            upperLimit = lowerLimit.addDays(jobPeriodInDays - 1);
            //If upperLimit is greater than actualUpperLimit, then the job is the last one. So replace the upperLimit with actualUpperLimit
            if (upperLimit > actualUpperLimit) {
                upperLimit = actualUpperLimit;
            }
        } else {
            lowerLimit = actualLowerLimit;
            upperLimit = actualUpperLimit;
        }
        //Querying the records to be processed by the batch job
        system.debug('lowerLimit:::' + lowerLimit);
        system.debug('upperLimit:::' + upperLimit);
        return Database.getQueryLocator(query);
    }

    global void execute(Database.BatchableContext BC, List<SObject> scope) {
        system.debug('**** execute****');
        system.debug('scope :' + scope);
        system.debug('scopesize :' + scope.size());
        //Added to compute the total Execution Time of Batch.
        long startExecuteTime = 0;
        long stopExecuteTime = 0;
        integer currentRuntime = 0;
        startExecuteTime = Datetime.now().getTime();
        //Added to compute the total Execution Time of Batch.

        List<Id> cliIds = new List<Id>();
        List<ContractLineItem> cliList = new List<ContractLineItem>();

        try {
            Set<Id> assetIds = new Set<Id>();
            Set<Id> cliIdSet = new Set<Id>();
            String cliQuery = ROM_RenewalOpportunityUtility.getCliQuery();
            //DAPSFDCPI-105
            if (queryLocatorObject == 'ContractLineItem') {
                for (ContractLineItem cli : (List<ContractLineItem>) scope) {
                    if (cli.Asset__c != null) {
                        assetIds.add(cli.Asset__c);
                    }
                }
                cliQuery += ' where Asset__c in :assetIds and ServiceContract.Legacy_Agreement_Status__c != \'Inactive\'';
                // CRMEAGLE-70
                cliQuery += ' AND ServiceContract.Contract_Type__c != \'ODM\' ';
                //cliQuery += ' AND (Opportunity__c  = null OR ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = false ) ';
                //cliQuery += ' AND (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = false OR (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = true AND Asset__r.Program_Type__c !=\'WIN\' AND Opportunity__c  = null ) OR (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = true AND Asset__r.Program_Type__c =\'WIN\' AND (Asset__r.Product_Line_Code__c NOT IN :excludeProdCodes  ) ) ) '; 
            }
            if (queryLocatorObject == 'Asset__c') {
                for (Asset__c ast : (List<Asset__c>) scope) {
                    assetIds.add(ast.Id);
                }
                cliQuery += ' where Deployment_Indicator__c != \'' + System.Label.Flex_Contract_Merge + '\'';
                // CRMEAGLE-70
                cliQuery += ' AND ServiceContract.Contract_Type__c != \'ODM\' ';
                cliQuery += ' and Asset__c in :assetIds and ServiceContract.Legacy_Agreement_Status__c != \'Inactive\'';
                //cliQuery += ' AND (Opportunity__c  = null OR ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = false ) ';
                //cliQuery += ' AND (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = false OR (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = true AND Asset__r.Program_Type__c !=\'WIN\' AND Opportunity__c  = null ) OR (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = true AND Asset__r.Program_Type__c =\'WIN\' AND (Asset__r.Product_Line_Code__c NOT IN :excludeProdCodes  ) ) ) '; 
            }
            //DAPSFDCPI-715
            if (queryLocatorObject == 'Batch_Staging_Table_Record__c') {
                Set<Id> cIds = new Set<Id>();
                for (Batch_Staging_Table_Record__c b : (List<Batch_Staging_Table_Record__c>) scope) {
                    if (String.isNotBlank(b.Record_Id__c)) {
                        cIds.add(b.Record_Id__c);
                    }
                }
                for (ContractLineItem cli : [SELECT Asset__c FROM ContractLineItem WHERE Id IN :cIds]) {
                    if (cli.Asset__c != null) {
                        assetIds.add(cli.Asset__c);
                    }
                }
                cliQuery += ' where Deployment_Indicator__c != \'' + System.Label.Flex_Contract_Merge + '\'';
                // CRMEAGLE-70
                cliQuery += ' AND ServiceContract.Contract_Type__c != \'ODM\' ';
                cliQuery += ' and Asset__c in :assetIds and ServiceContract.Legacy_Agreement_Status__c != \'Inactive\'';
               // cliQuery += ' AND (Opportunity__c  = null OR ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = false ) ';
               //cliQuery += ' AND (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = false OR (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = true AND Asset__r.Program_Type__c !=\'WIN\' AND Opportunity__c  = null ) OR (ServiceContract.Account.Country_Lookup__r.ODM_Flag__c = true AND Asset__r.Program_Type__c =\'WIN\' AND (Asset__r.Product_Line_Code__c NOT IN :excludeProdCodes  ) ) ) ';             }

            Map<Id, ContractLineItem> cliMap = new Map<Id, ContractLineItem>();
            long t = datetime.now().getTime();
            //DAASN-23934 START
			cliQuery += ' AND (Asset__r.Reseller_Account__c != null AND Asset__r.Reseller_Account__r.Internal_Use__c != true) ';
            //DAASN-23934 END
            system.debug('cliQuery::::' + cliQuery);
            List<ContractLineItem> queriedClis = Database.query(cliQuery);

            system.debug('queriedClis::::' + queriedClis);
            //Querying Contract Line Items to identify correct Contract Line Item for the asset
            for (ContractLineItem cli : queriedClis) {
                if (cliMap.containsKey(cli.Asset__c)) {
                    if (cliMap.get(cli.Asset__c).Actual_end_date__c < cli.Actual_end_date__c) {
                        cliMap.put(cli.Asset__c, cli);
                    }
                } else {
                    cliMap.put(cli.Asset__c, cli);
                }
            }
            long d = datetime.now().getTime();
            ROM_RenewalOpportunityService.debugLog += 'Time taken for querying contract line items - ' + (d - t) + 'milliseconds\n';
            ROM_RenewalOpportunityService.debugLog += 'Batch Size - ' + scope.size() + '\n';
            ROM_RenewalOpportunityService.totalTime += (d - t);

            system.debug('desktopLowerLimit ::::' + desktopLowerLimit);
            system.debug('desktopUpperLimit ::::' + desktopUpperLimit);
            system.debug('maintenanceLowerLimit ::::' + maintenanceLowerLimit);
            system.debug('maintenanceUpperLimit ::::' + maintenanceUpperLimit);
            Date temp = Date.today().addDays(-2);
            Set<String> noRenewalProductCodes = ROM_RenewalOpportunityUtility.noRenewalProductCodes;
            for (ContractLineItem cli : cliMap.values()) {
                Boolean isValidWinCli = ROM_RenewalOpportunityUtility.checkRomCreationEligibility(cli);
                //DAPSFDCPI-105
                if (
                    (cli.Asset__r.Renewal_Opportunity__c == null || (cli.Asset__r.Renewal_Opportunity__c != null && (cli.Asset__r.Remaining_Item__c == true || cli.Asset__r.Renewal_Opportunity__r.Renewal_Status__c == 'Cancelled' || (cli.Asset__r.Renewal_Opportunity__r.Renewal_Status__c == 'Completed' && cli.Asset__r.Renewal_Opportunity__r.LastModifiedDate < temp)))) &&
                    cli.ServiceContract.Legacy_Agreement_Status__c != 'Inactive' &&
                    cli.Servicecontract.Agreement_Type__c == 'Subscription' &&
                    cli.Asset__r.status__c == 'Registered' &&
                    cli.Asset__r.Do_Not_Create_Renewal__c != true &&
                    cli.Asset__r.Parent_Asset__c == null &&
                    cli.Asset__r.Product2__r.Special_Sales_Program_Type__c != '99' &&
                    isValidWinCli &&
                    ((cli.servicecontract.Billing_Behavior_Code__c == 'A100' && cli.Actual_end_date__c >= desktopLowerLimit && cli.Actual_end_date__c <= desktopUpperLimit && String.isNotBlank(cli.Asset__r.Part_Number__c)) || (String.isBlank(cli.servicecontract.Billing_Behavior_Code__c) && cli.Actual_end_date__c >= maintenanceLowerLimit && cli.Actual_end_date__c <= maintenanceUpperLimit && cli.Product_SKU__c != null))
                ) {
                    //Remaining Item Renewals are created when the Partial Order Sync happens
                    //Renewals should not be created for product codes defined in the Custom Setting(NoRenewalProductCodes)
                    if (!noRenewalProductCodes.contains(cli.Asset__r.Product_Line_Code__c)) {
                        System.debug('batch come here!!!');
                        cliList.add(cli);
                        cliIds.add(cli.Id);
                        eligibleItems++;
                    }
                }
            }
            system.debug('' + cliList);
            List<Opportunity> opportunityList = ROM_RenewalOpportunityService.createRenewals(cliList, BC);
            system.debug('opportunityList::::::' + opportunityList);

            processedItems += ROM_RenewalOpportunityUtility.processedItems;

            ROM_RenewalOpportunityService.debugLog += '<br/>processedItems : ' + processedItems + '<br/>';
            ROM_RenewalOpportunityService.debugLog += 'eligibleItems : ' + eligibleItems + '<br/>';

            batchResponseWrapper = ROM_RenewalOpportunityService.ResponseWrapper;
            if (batchResponseWrapper != null) {
                System.debug('renewalSuccessIds' + batchResponseWrapper.renewalSuccessIds);
                System.debug('renewalFailedIds' + batchResponseWrapper.renewalFailedIds);
                System.debug('errorMessage' + batchResponseWrapper.errorMessage);
            }
            //Deleting processed records from Staging Table
            if (queryLocatorObject == 'Batch_Staging_Table_Record__c') {
                delete scope;
            }
        }
     } catch (Exception e) {
            ROM_RenewalOpportunityUtility.logBatchException('Error Message : <br/>' + e.getMessage() + ' - Line Number : ' + e.getLineNumber() + '<br/>' + 'Stack Trace : <br/>' + e.getStackTraceString(), cliIds, null, 'ROM_GenerateRenewalOpportunityBatch', 'execute', 'ROM_GenerateRenewalOpportunityBatch', 'ContractLineItem', e.getTypeName(), BC);
        }
        ROM_RenewalOpportunityUtility.insertBatchExceptions();
        if (!exceptionLogged) {
            exceptionLogged = ROM_RenewalOpportunityUtility.exceptionLogged;
        }

        //DAPSFDCPI-105 - Start
        //Updating Data Errors on the Asset so that they will not be processed by batch everyday
        if (ROM_RenewalOpportunityUtility.logs.size() > 0) {
            Map<Id, Id> cliIdAssetIdMap = new Map<Id, Id>();
            for (ContractLineItem cli : cliList) {
                cliIdAssetIdMap.put(cli.Id, cli.Asset__c);
            }
            Map<Id, Asset__c> assetsToBeUpdatedMap = new Map<Id, Asset__c>();
            for (Batch_Transaction_Log__c bt : ROM_RenewalOpportunityUtility.logs) {
                assetsToBeUpdatedMap.put(cliIdAssetIdMap.get(bt.Impacted_Record_Id__c), new Asset__c(Id = cliIdAssetIdMap.get(bt.Impacted_Record_Id__c), Renewal_Creation_Error__c = bt.Error_Type__c));
            }
            if (assetsToBeUpdatedMap.size() > 0) {
                Database.update(assetsToBeUpdatedMap.values(), false);
            }
        }
        //DAPSFDCPI-105 - End
        stopExecuteTime = Datetime.now().getTime();
        currentRuntime = integer.valueof(stopExecuteTime - startExecuteTime);
        batchRuntime += currentRuntime;

        system.debug('startExecuteTime' + startExecuteTime);
        system.debug('stopExecuteTime' + stopExecuteTime);
        system.debug('currentRuntime' + currentRuntime);
        system.debug('batchRuntime' + batchRuntime);

        system.debug('eligibleRenewalEmails' + ROM_RenewalOpportunityService.eligibleRenewalEmails);
        system.debug('processedRenewalEmails' + ROM_RenewalOpportunityService.processedRenewalEmails);
        processedBatchRenewalsEmails += ROM_RenewalOpportunityService.processedRenewalEmails;
        eligibleBatchRenewalEmails += ROM_RenewalOpportunityService.eligibleRenewalEmails;

        system.debug('eligibleBatchRenewalEmails' + eligibleBatchRenewalEmails);
        system.debug('processedBatchRenewalsEmails' + processedBatchRenewalsEmails);
    }

    global void finish(Database.BatchableContext BC) {
        system.debug('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.     inside finish method'); 
        //if upperLimit is less than actualUpperLimit, then the next is job is triggered otherwise all jobs are done and Notification can be sent
        //DAPSFDCPI-715
        if (queryLocatorObject == 'ContractLineItem' && upperLimit < actualUpperLimit) {
            AsyncApexJob job = [SELECT CompletedDate, JobItemsProcessed, NumberOfErrors, Status, TotalJobItems, CreatedBy.Name, CreatedDate, ApexClassId FROM AsyncApexJob WHERE Id = :BC.getJobId()];
            //Storing the Created Date of the first job
            if (createdDate == null) {
                createdDate = job.CreatedDate;
            }
            //Carrying over job statistics and information from current job to the next job
            totalJobs += job.TotalJobItems;
            jobsProcessed += job.JobItemsProcessed;
            apexJobIds.add(BC.getJobId());
            //Triggering next job
            ROM_GenerateRenewalOpportunityBatch r = new ROM_GenerateRenewalOpportunityBatch('', 'ContractLineItem');
            r.lowerLimit = upperLimit.addDays(1);
            r.eligibleItems = eligibleItems;
            r.processedItems = processedItems;
            r.exceptionLogged = exceptionLogged;
            r.parallelMode = parallelMode;
            r.apexJobIds = apexJobIds;
            r.batchRuntime = batchRuntime;
            r.processedBatchRenewalsEmails = processedBatchRenewalsEmails;
            r.eligibleBatchRenewalEmails = eligibleBatchRenewalEmails;
            r.createdDate = createdDate;
            r.totalJobs = totalJobs;
            r.jobsProcessed = jobsProcessed;
            //Changes to split the job for improving query performance
            ROM_RenewalOpportunitySettings__c setting = ROM_RenewalOpportunitySettings__c.getValues('RenewalGenerationJobBatchSize');
            Integer batchSize = 100;
            if (setting != null && setting.value__c != null && setting.value__c != '') {
                batchSize = Integer.valueOf(setting.value__c);
            }
            Database.executeBatch(r, batchSize);
        } else {
            batchRuntime = batchRuntime / 1000;
            String stats = '';
            String stats1 = '';
            String jobIds = '';
            for (Id jobId : apexJobIds) {
                jobIds += jobId + ',';
            }
            jobIds = jobIds.substringBeforeLast(',');
            if (exceptionLogged) {
                if (eligibleItems != processedItems) {
                    system.debug('eligibleBatchRenewalEmails' + eligibleBatchRenewalEmails);
                    system.debug('processedBatchRenewalsEmails' + processedBatchRenewalsEmails);
                    stats =
                        'Renewal Creation failed for some eligible Contract Line Items ' +
                        '<br/>' +
                        'Apex Job Ids : ' +
                        jobIds +
                        '<br/>' +
                        'Job Created Date : ' +
                        createdDate +
                        '<br/>' +
                        'Total number of batches : ' +
                        totalJobs +
                        '<br/>' +
                        'Number of batches successfully processed : ' +
                        jobsProcessed +
                        '<br/>' +
                        'Number of eligible Contract Line Items : ' +
                        eligibleItems +
                        '<br/>' +
                        'Number of processed Contract Line Items : ' +
                        processedItems +
                        '<br/>' +
                        'Number of Eligible Renewal Email Records: ' +
                        eligibleBatchRenewalEmails +
                        '<br/>' +
                        'Number of Processed Renewal Email Records:' +
                        processedBatchRenewalsEmails +
                        '<br/>' +
                        'Total Time taken to Process all the Batches:' +
                        batchRuntime +
                        ' Secs';
                    AggregateResult[] groupedResults = [SELECT Error_Type__c, Method_Name__c, Count(Id) FROM Batch_Transaction_Log__c WHERE Apex_Job_Id__c IN :apexJobIds GROUP BY Error_Type__c, Method_Name__c];
                    stats += '<br/><br/>' + 'Error Summary : ' + '<br/><br/>';
                    stats += '<table border="1" cellspacing="2px" cellpadding="2px" style="width:100%;border: 1px solid black;border-collapse: collapse;">';
                    stats += '<tr><td colspan="10" style="font-weight:bold;border: 1px solid black;border-collapse: collapse;padding: 5px;">' + 'Error Type' + '</td><td colspan="5" style="font-weight:bold;border: 1px solid black;border-collapse: collapse;padding: 5px;">' + 'Method Name' + '</td><td colspan="2" style="font-weight:bold;border: 1px solid black;border-collapse: collapse;padding: 5px;">' + 'Count' + '</td></tr>';
                    for (AggregateResult ar : groupedResults) {
                        stats += '<tr><td colspan="10" style="border: 1px solid black;border-collapse: collapse;padding: 5px;">' + ar.get('Error_Type__c') + '</td><td colspan="5" style="border: 1px solid black;border-collapse: collapse;padding: 5px;">' + ar.get('Method_Name__c') + '</td><td colspan="2" style="border: 1px solid black;border-collapse: collapse;padding: 5px;">' + ar.get('expr0') + '</td></tr>';
                    }
                    if (ROM_RenewalOpportunityService.eligibleRenewalEmails != ROM_RenewalOpportunityService.processedRenewalEmails) {
                        stats += '</table><br/><br/>';
                        stats += ' <table border="1" cellspacing="2px" cellpadding="2px" style="width:100%;border: 1px solid black;border-collapse: collapse;">';
                        stats += '<tr><td style="font-weight:bold;border: 1px solid black;border-collapse: collapse;padding: 5px;">' + 'Error Type for failed Renewal Emails Records' + '</td><td style="font-weight:bold;border: 1px solid black;border-collapse: collapse;padding: 5px;">' + 'Count' + '</td></tr>';
                        stats += '<tr><td style="border: 1px solid black;border-collapse: collapse;padding: 5px;">' + batchResponseWrapper.errorMessage + '</td><td style="border: 1px solid black;border-collapse: collapse;padding: 5px;">' + batchResponseWrapper.renewalFailedIds.size() + '</td></tr> </table>';
                    }
                } else {
                    stats =
                        'Apex Job Ids : ' +
                        jobIds +
                        '<br/>' +
                        'Job Created Date : ' +
                        createdDate +
                        '<br/>' +
                        'Total number of batches : ' +
                        totalJobs +
                        '<br/>' +
                        'Number of batches successfully processed : ' +
                        jobsProcessed +
                        '<br/>' +
                        'Number of eligible Contract Line Items : ' +
                        eligibleItems +
                        '<br/>' +
                        'Number of processed Contract Line Items : ' +
                        processedItems +
                        '<br/>' +
                        'Number of Eligible Renewal Email Records: ' +
                        eligibleBatchRenewalEmails +
                        '<br/>' +
                        'Number of Processed Renewal Email Records:' +
                        processedBatchRenewalsEmails +
                        '<br/>' +
                        'Total Time taken to Process all the Batches:' +
                        batchRuntime +
                        ' Secs';
                    AggregateResult[] groupedResults = [SELECT Error_Type__c, Method_Name__c, Count(Id) FROM Batch_Transaction_Log__c WHERE Apex_Job_Id__c IN :apexJobIds GROUP BY Error_Type__c, Method_Name__c];
                    stats += '<br/><br/>' + 'Error Summary : ' + '<br/>';
                    stats += '<br/>';
                    stats += '<table border="1" cellspacing="2px" cellpadding="2px" style="width:100%;border: 1px solid black;border-collapse: collapse;">';
                    stats += '<tr><td colspan="10" style="font-weight:bold;border: 1px solid black;border-collapse: collapse;padding: 5px;">' + 'Error Type' + '</td><td colspan="5" style="font-weight:bold;border: 1px solid black;border-collapse: collapse;padding: 5px;">' + 'Method Name' + '</td><td colspan="2" style="font-weight:bold;border: 1px solid black;border-collapse: collapse;padding: 5px;">' + 'Count' + '</td></tr>';
                    for (AggregateResult ar : groupedResults) {
                        stats += '<tr><td colspan="10" style="border: 1px solid black;border-collapse: collapse;padding: 5px;">' + ar.get('Error_Type__c') + '</td><td colspan="5" style="border: 1px solid black;border-collapse: collapse;padding: 5px;">' + ar.get('Method_Name__c') + '</td><td colspan="2" style="border: 1px solid black;border-collapse: collapse;padding: 5px;">' + ar.get('expr0') + '</td></tr>';
                    }
                    if (ROM_RenewalOpportunityService.eligibleRenewalEmails != ROM_RenewalOpportunityService.processedRenewalEmails) {
                        stats += '</table><br/><br/>';
                        stats += ' <table border="1" cellspacing="2px" cellpadding="2px" style="width:100%;border: 1px solid black;border-collapse: collapse;">';
                        stats += '<tr><td style="font-weight:bold;border: 1px solid black;border-collapse: collapse;padding: 5px;">' + 'Error Type for failed Renewal Emails Records' + '</td><td style="font-weight:bold;border: 1px solid black;border-collapse: collapse;padding: 5px;">' + 'Count' + '</td></tr>';
                        stats += '<tr><td style="border: 1px solid black;border-collapse: collapse;padding: 5px;">' + batchResponseWrapper.errorMessage + '</td><td style="border: 1px solid black;border-collapse: collapse;padding: 5px;">' + batchResponseWrapper.renewalFailedIds.size() + '</td></tr> </table>';
                    }
                }
                stats += '</table><br/>Click <a href="' + System.label.ROM_Trouble_Shooting_Guide + '">here</a> for Troubleshooting guide.';
            }

            if (exceptionLogged) {
                logException('Errors in Renewal Creation Job', stats, BC.getJobId());
            } else {
                Boolean sendSuccessNotification = false;
                try {
                    ROM_RenewalOpportunitySettings__c setting = ROM_RenewalOpportunitySettings__c.getValues('GenerationJobSuccessNotification');
                    if (setting != null && setting.value__c != null && setting.value__c != '') {
                        sendSuccessNotification = Boolean.valueOf(setting.value__c);
                    }
                } catch (Exception e) {
                    System.debug(Logginglevel.error, 'Setting Error : ' + e.getMessage());
                }
                if (sendSuccessNotification) {
                    stats =
                        'Apex Job Ids : ' +
                        jobIds +
                        '<br/>' +
                        'Job Created Date : ' +
                        createdDate +
                        '<br/>' +
                        'Total number of batches : ' +
                        totalJobs +
                        '<br/>' +
                        'Number of batches successfully processed : ' +
                        jobsProcessed +
                        '<br/>' +
                        'Number of eligible Contract Line Items : ' +
                        eligibleItems +
                        '<br/>' +
                        'Number of processed Contract Line Items : ' +
                        processedItems +
                        '<br/>' +
                        'Number of Eligible Renewal Email Records: ' +
                        eligibleBatchRenewalEmails +
                        '<br/>' +
                        'Number of Processed Renewal Email Records:' +
                        processedBatchRenewalsEmails +
                        '<br/>' +
                        'Total Time taken to Process all the Batches:' +
                        batchRuntime +
                        ' Secs';
                    String email;
                    ROM_RenewalOpportunitySettings__c setting = ROM_RenewalOpportunitySettings__c.getValues('RenewalGenerationJobEmail');
                    if (setting != null && setting.value__c != null && setting.value__c != '') {
                        email = setting.value__c;
                    } else {
                        email = System.label.ROM_defaultNotificationEmail;
                    }
                    ROM_RenewalOpportunityUtility.sendNotification('Renewal Generation Job Completed', stats, email, 'Apex jobs');
                }
            }
        }
    }

    @testVisible
    private void logException(String subject, String description, String jobId) {
        String email;
        ROM_RenewalOpportunitySettings__c setting = ROM_RenewalOpportunitySettings__c.getValues('RenewalGenerationJobEmail');
        if (setting != null && setting.value__c != null && setting.value__c != '') {
            email = setting.value__c;
        } else {
            email = System.label.ROM_defaultNotificationEmail;
        }
        setting = ROM_RenewalOpportunitySettings__c.getValues('RenewalCreationJobFailureNotification');
        if (setting != null && setting.value__c != null && setting.value__c != '') {
            String[] modes = setting.value__c.split(';', 0);
            Set<String> modeSet = new Set<String>();
            for (String mode : modes) {
                modeSet.add(mode);
            }
            if (modeSet.contains('Email')) {
                ROM_RenewalOpportunityUtility.sendNotification(subject, description, email, 'Apex jobs');
            }
            if (modeSet.contains('Case')) {
                ROM_RenewalOpportunityUtility.createCase(subject, description);
            }
            // Added as part of US9339..
            if (modeSet.contains('ServiceNow') && !parallelMode) {
                System.debug('Descriptin**** ' + description);
                Id recId = ROM_RenewalOpportunityUtility.insertServiceNowRecord('ROM_GenerateRenewalOpportunityBatch', subject, description, jobId);
                if (!parallelMode && recId != null) {
                    System.enqueueJob(new ROM_GenrateServiceNowTicketBatch(recId));
                }
            }
        }
    }

    public void throwExceptionIfPreviousJobRunning() {
        if (!Sf.settings.getBoolean('ROM_GenerationJobAllowParallelJobs', false)) {
            List<AsyncApexJob> asyncJobs = new List<AsyncApexJob>([SELECT Id, MethodName, JobItemsProcessed, ApexClassId, CompletedDate, Status, ExtendedStatus, TotalJobItems FROM AsyncApexJob WHERE (Status = 'Processing' OR Status = 'Queued' OR Status = 'Preparing' OR Status = 'Holding') AND ApexClassId IN (SELECT Id FROM ApexClass WHERE Name = 'ROM_GenerateRenewalOpportunityBatch')]);
            //Execute the Batch only if no other jobs are running
            if (asyncJobs.size() > 0 && !Test.isRunningTest()) {
                throw new CustomException('PREVIOUS_JOB_RUNNING', 'Previous Job(s) is still running');
            }
        }
    }
}
